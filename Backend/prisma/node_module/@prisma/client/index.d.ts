
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserDetails
 * 
 */
export type UserDetails = $Result.DefaultSelection<Prisma.$UserDetailsPayload>
/**
 * Model OwnerDetails
 * 
 */
export type OwnerDetails = $Result.DefaultSelection<Prisma.$OwnerDetailsPayload>
/**
 * Model AdminDetails
 * 
 */
export type AdminDetails = $Result.DefaultSelection<Prisma.$AdminDetailsPayload>
/**
 * Model StationMasterDetails
 * 
 */
export type StationMasterDetails = $Result.DefaultSelection<Prisma.$StationMasterDetailsPayload>
/**
 * Model EV
 * 
 */
export type EV = $Result.DefaultSelection<Prisma.$EVPayload>
/**
 * Model Station
 * 
 */
export type Station = $Result.DefaultSelection<Prisma.$StationPayload>
/**
 * Model Booking
 * 
 */
export type Booking = $Result.DefaultSelection<Prisma.$BookingPayload>
/**
 * Model Transaction
 * 
 */
export type Transaction = $Result.DefaultSelection<Prisma.$TransactionPayload>
/**
 * Model ChargingSlot
 * 
 */
export type ChargingSlot = $Result.DefaultSelection<Prisma.$ChargingSlotPayload>
/**
 * Model Review
 * 
 */
export type Review = $Result.DefaultSelection<Prisma.$ReviewPayload>
/**
 * Model ChargingHistory
 * 
 */
export type ChargingHistory = $Result.DefaultSelection<Prisma.$ChargingHistoryPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model OTP
 * 
 */
export type OTP = $Result.DefaultSelection<Prisma.$OTPPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const AccountType: {
  USER: 'USER',
  OWNER: 'OWNER',
  ADMIN: 'ADMIN',
  STATIONMASTER: 'STATIONMASTER'
};

export type AccountType = (typeof AccountType)[keyof typeof AccountType]


export const Status: {
  PENDING: 'PENDING',
  VERIFIED: 'VERIFIED',
  REJECTED: 'REJECTED'
};

export type Status = (typeof Status)[keyof typeof Status]


export const BookingStatus: {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  CANCELLED: 'CANCELLED'
};

export type BookingStatus = (typeof BookingStatus)[keyof typeof BookingStatus]


export const OwnerType: {
  COMPANY: 'COMPANY',
  INDIVIDUAL: 'INDIVIDUAL'
};

export type OwnerType = (typeof OwnerType)[keyof typeof OwnerType]


export const TransactionType: {
  PAYMENT: 'PAYMENT',
  PENALTY: 'PENALTY',
  REFUND: 'REFUND'
};

export type TransactionType = (typeof TransactionType)[keyof typeof TransactionType]


export const TransactionStatus: {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

export type TransactionStatus = (typeof TransactionStatus)[keyof typeof TransactionStatus]


export const SlotType: {
  AC: 'AC',
  DC: 'DC',
  FAST: 'FAST'
};

export type SlotType = (typeof SlotType)[keyof typeof SlotType]


export const NotificationType: {
  BOOKING_CONFIRMATION: 'BOOKING_CONFIRMATION',
  BOOKING_CANCELLATION: 'BOOKING_CANCELLATION',
  PAYMENT_SUCCESS: 'PAYMENT_SUCCESS',
  PENALTY_APPLIED: 'PENALTY_APPLIED'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]

}

export type AccountType = $Enums.AccountType

export const AccountType: typeof $Enums.AccountType

export type Status = $Enums.Status

export const Status: typeof $Enums.Status

export type BookingStatus = $Enums.BookingStatus

export const BookingStatus: typeof $Enums.BookingStatus

export type OwnerType = $Enums.OwnerType

export const OwnerType: typeof $Enums.OwnerType

export type TransactionType = $Enums.TransactionType

export const TransactionType: typeof $Enums.TransactionType

export type TransactionStatus = $Enums.TransactionStatus

export const TransactionStatus: typeof $Enums.TransactionStatus

export type SlotType = $Enums.SlotType

export const SlotType: typeof $Enums.SlotType

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userDetails`: Exposes CRUD operations for the **UserDetails** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserDetails
    * const userDetails = await prisma.userDetails.findMany()
    * ```
    */
  get userDetails(): Prisma.UserDetailsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ownerDetails`: Exposes CRUD operations for the **OwnerDetails** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OwnerDetails
    * const ownerDetails = await prisma.ownerDetails.findMany()
    * ```
    */
  get ownerDetails(): Prisma.OwnerDetailsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.adminDetails`: Exposes CRUD operations for the **AdminDetails** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdminDetails
    * const adminDetails = await prisma.adminDetails.findMany()
    * ```
    */
  get adminDetails(): Prisma.AdminDetailsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stationMasterDetails`: Exposes CRUD operations for the **StationMasterDetails** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StationMasterDetails
    * const stationMasterDetails = await prisma.stationMasterDetails.findMany()
    * ```
    */
  get stationMasterDetails(): Prisma.StationMasterDetailsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.eV`: Exposes CRUD operations for the **EV** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EVS
    * const eVS = await prisma.eV.findMany()
    * ```
    */
  get eV(): Prisma.EVDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.station`: Exposes CRUD operations for the **Station** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stations
    * const stations = await prisma.station.findMany()
    * ```
    */
  get station(): Prisma.StationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.booking`: Exposes CRUD operations for the **Booking** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bookings
    * const bookings = await prisma.booking.findMany()
    * ```
    */
  get booking(): Prisma.BookingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chargingSlot`: Exposes CRUD operations for the **ChargingSlot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChargingSlots
    * const chargingSlots = await prisma.chargingSlot.findMany()
    * ```
    */
  get chargingSlot(): Prisma.ChargingSlotDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chargingHistory`: Exposes CRUD operations for the **ChargingHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChargingHistories
    * const chargingHistories = await prisma.chargingHistory.findMany()
    * ```
    */
  get chargingHistory(): Prisma.ChargingHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.oTP`: Exposes CRUD operations for the **OTP** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OTPS
    * const oTPS = await prisma.oTP.findMany()
    * ```
    */
  get oTP(): Prisma.OTPDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    UserDetails: 'UserDetails',
    OwnerDetails: 'OwnerDetails',
    AdminDetails: 'AdminDetails',
    StationMasterDetails: 'StationMasterDetails',
    EV: 'EV',
    Station: 'Station',
    Booking: 'Booking',
    Transaction: 'Transaction',
    ChargingSlot: 'ChargingSlot',
    Review: 'Review',
    ChargingHistory: 'ChargingHistory',
    Notification: 'Notification',
    OTP: 'OTP'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "userDetails" | "ownerDetails" | "adminDetails" | "stationMasterDetails" | "eV" | "station" | "booking" | "transaction" | "chargingSlot" | "review" | "chargingHistory" | "notification" | "oTP"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserDetails: {
        payload: Prisma.$UserDetailsPayload<ExtArgs>
        fields: Prisma.UserDetailsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserDetailsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDetailsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserDetailsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDetailsPayload>
          }
          findFirst: {
            args: Prisma.UserDetailsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDetailsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserDetailsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDetailsPayload>
          }
          findMany: {
            args: Prisma.UserDetailsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDetailsPayload>[]
          }
          create: {
            args: Prisma.UserDetailsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDetailsPayload>
          }
          createMany: {
            args: Prisma.UserDetailsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserDetailsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDetailsPayload>[]
          }
          delete: {
            args: Prisma.UserDetailsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDetailsPayload>
          }
          update: {
            args: Prisma.UserDetailsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDetailsPayload>
          }
          deleteMany: {
            args: Prisma.UserDetailsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserDetailsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserDetailsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDetailsPayload>[]
          }
          upsert: {
            args: Prisma.UserDetailsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserDetailsPayload>
          }
          aggregate: {
            args: Prisma.UserDetailsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserDetails>
          }
          groupBy: {
            args: Prisma.UserDetailsGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserDetailsGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserDetailsCountArgs<ExtArgs>
            result: $Utils.Optional<UserDetailsCountAggregateOutputType> | number
          }
        }
      }
      OwnerDetails: {
        payload: Prisma.$OwnerDetailsPayload<ExtArgs>
        fields: Prisma.OwnerDetailsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OwnerDetailsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerDetailsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OwnerDetailsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerDetailsPayload>
          }
          findFirst: {
            args: Prisma.OwnerDetailsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerDetailsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OwnerDetailsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerDetailsPayload>
          }
          findMany: {
            args: Prisma.OwnerDetailsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerDetailsPayload>[]
          }
          create: {
            args: Prisma.OwnerDetailsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerDetailsPayload>
          }
          createMany: {
            args: Prisma.OwnerDetailsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OwnerDetailsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerDetailsPayload>[]
          }
          delete: {
            args: Prisma.OwnerDetailsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerDetailsPayload>
          }
          update: {
            args: Prisma.OwnerDetailsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerDetailsPayload>
          }
          deleteMany: {
            args: Prisma.OwnerDetailsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OwnerDetailsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OwnerDetailsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerDetailsPayload>[]
          }
          upsert: {
            args: Prisma.OwnerDetailsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerDetailsPayload>
          }
          aggregate: {
            args: Prisma.OwnerDetailsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOwnerDetails>
          }
          groupBy: {
            args: Prisma.OwnerDetailsGroupByArgs<ExtArgs>
            result: $Utils.Optional<OwnerDetailsGroupByOutputType>[]
          }
          count: {
            args: Prisma.OwnerDetailsCountArgs<ExtArgs>
            result: $Utils.Optional<OwnerDetailsCountAggregateOutputType> | number
          }
        }
      }
      AdminDetails: {
        payload: Prisma.$AdminDetailsPayload<ExtArgs>
        fields: Prisma.AdminDetailsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminDetailsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminDetailsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminDetailsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminDetailsPayload>
          }
          findFirst: {
            args: Prisma.AdminDetailsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminDetailsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminDetailsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminDetailsPayload>
          }
          findMany: {
            args: Prisma.AdminDetailsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminDetailsPayload>[]
          }
          create: {
            args: Prisma.AdminDetailsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminDetailsPayload>
          }
          createMany: {
            args: Prisma.AdminDetailsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminDetailsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminDetailsPayload>[]
          }
          delete: {
            args: Prisma.AdminDetailsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminDetailsPayload>
          }
          update: {
            args: Prisma.AdminDetailsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminDetailsPayload>
          }
          deleteMany: {
            args: Prisma.AdminDetailsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminDetailsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminDetailsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminDetailsPayload>[]
          }
          upsert: {
            args: Prisma.AdminDetailsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminDetailsPayload>
          }
          aggregate: {
            args: Prisma.AdminDetailsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdminDetails>
          }
          groupBy: {
            args: Prisma.AdminDetailsGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminDetailsGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminDetailsCountArgs<ExtArgs>
            result: $Utils.Optional<AdminDetailsCountAggregateOutputType> | number
          }
        }
      }
      StationMasterDetails: {
        payload: Prisma.$StationMasterDetailsPayload<ExtArgs>
        fields: Prisma.StationMasterDetailsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StationMasterDetailsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationMasterDetailsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StationMasterDetailsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationMasterDetailsPayload>
          }
          findFirst: {
            args: Prisma.StationMasterDetailsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationMasterDetailsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StationMasterDetailsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationMasterDetailsPayload>
          }
          findMany: {
            args: Prisma.StationMasterDetailsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationMasterDetailsPayload>[]
          }
          create: {
            args: Prisma.StationMasterDetailsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationMasterDetailsPayload>
          }
          createMany: {
            args: Prisma.StationMasterDetailsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StationMasterDetailsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationMasterDetailsPayload>[]
          }
          delete: {
            args: Prisma.StationMasterDetailsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationMasterDetailsPayload>
          }
          update: {
            args: Prisma.StationMasterDetailsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationMasterDetailsPayload>
          }
          deleteMany: {
            args: Prisma.StationMasterDetailsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StationMasterDetailsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StationMasterDetailsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationMasterDetailsPayload>[]
          }
          upsert: {
            args: Prisma.StationMasterDetailsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationMasterDetailsPayload>
          }
          aggregate: {
            args: Prisma.StationMasterDetailsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStationMasterDetails>
          }
          groupBy: {
            args: Prisma.StationMasterDetailsGroupByArgs<ExtArgs>
            result: $Utils.Optional<StationMasterDetailsGroupByOutputType>[]
          }
          count: {
            args: Prisma.StationMasterDetailsCountArgs<ExtArgs>
            result: $Utils.Optional<StationMasterDetailsCountAggregateOutputType> | number
          }
        }
      }
      EV: {
        payload: Prisma.$EVPayload<ExtArgs>
        fields: Prisma.EVFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EVFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EVFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVPayload>
          }
          findFirst: {
            args: Prisma.EVFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EVFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVPayload>
          }
          findMany: {
            args: Prisma.EVFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVPayload>[]
          }
          create: {
            args: Prisma.EVCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVPayload>
          }
          createMany: {
            args: Prisma.EVCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EVCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVPayload>[]
          }
          delete: {
            args: Prisma.EVDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVPayload>
          }
          update: {
            args: Prisma.EVUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVPayload>
          }
          deleteMany: {
            args: Prisma.EVDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EVUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EVUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVPayload>[]
          }
          upsert: {
            args: Prisma.EVUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EVPayload>
          }
          aggregate: {
            args: Prisma.EVAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEV>
          }
          groupBy: {
            args: Prisma.EVGroupByArgs<ExtArgs>
            result: $Utils.Optional<EVGroupByOutputType>[]
          }
          count: {
            args: Prisma.EVCountArgs<ExtArgs>
            result: $Utils.Optional<EVCountAggregateOutputType> | number
          }
        }
      }
      Station: {
        payload: Prisma.$StationPayload<ExtArgs>
        fields: Prisma.StationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload>
          }
          findFirst: {
            args: Prisma.StationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload>
          }
          findMany: {
            args: Prisma.StationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload>[]
          }
          create: {
            args: Prisma.StationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload>
          }
          createMany: {
            args: Prisma.StationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload>[]
          }
          delete: {
            args: Prisma.StationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload>
          }
          update: {
            args: Prisma.StationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload>
          }
          deleteMany: {
            args: Prisma.StationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload>[]
          }
          upsert: {
            args: Prisma.StationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload>
          }
          aggregate: {
            args: Prisma.StationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStation>
          }
          groupBy: {
            args: Prisma.StationGroupByArgs<ExtArgs>
            result: $Utils.Optional<StationGroupByOutputType>[]
          }
          count: {
            args: Prisma.StationCountArgs<ExtArgs>
            result: $Utils.Optional<StationCountAggregateOutputType> | number
          }
        }
      }
      Booking: {
        payload: Prisma.$BookingPayload<ExtArgs>
        fields: Prisma.BookingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          findFirst: {
            args: Prisma.BookingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          findMany: {
            args: Prisma.BookingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>[]
          }
          create: {
            args: Prisma.BookingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          createMany: {
            args: Prisma.BookingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BookingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>[]
          }
          delete: {
            args: Prisma.BookingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          update: {
            args: Prisma.BookingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          deleteMany: {
            args: Prisma.BookingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BookingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>[]
          }
          upsert: {
            args: Prisma.BookingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          aggregate: {
            args: Prisma.BookingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBooking>
          }
          groupBy: {
            args: Prisma.BookingGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookingGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookingCountArgs<ExtArgs>
            result: $Utils.Optional<BookingCountAggregateOutputType> | number
          }
        }
      }
      Transaction: {
        payload: Prisma.$TransactionPayload<ExtArgs>
        fields: Prisma.TransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findFirst: {
            args: Prisma.TransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findMany: {
            args: Prisma.TransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          create: {
            args: Prisma.TransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          createMany: {
            args: Prisma.TransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          delete: {
            args: Prisma.TransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          update: {
            args: Prisma.TransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          deleteMany: {
            args: Prisma.TransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TransactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          upsert: {
            args: Prisma.TransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          aggregate: {
            args: Prisma.TransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransaction>
          }
          groupBy: {
            args: Prisma.TransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionCountAggregateOutputType> | number
          }
        }
      }
      ChargingSlot: {
        payload: Prisma.$ChargingSlotPayload<ExtArgs>
        fields: Prisma.ChargingSlotFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChargingSlotFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChargingSlotPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChargingSlotFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChargingSlotPayload>
          }
          findFirst: {
            args: Prisma.ChargingSlotFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChargingSlotPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChargingSlotFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChargingSlotPayload>
          }
          findMany: {
            args: Prisma.ChargingSlotFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChargingSlotPayload>[]
          }
          create: {
            args: Prisma.ChargingSlotCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChargingSlotPayload>
          }
          createMany: {
            args: Prisma.ChargingSlotCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChargingSlotCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChargingSlotPayload>[]
          }
          delete: {
            args: Prisma.ChargingSlotDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChargingSlotPayload>
          }
          update: {
            args: Prisma.ChargingSlotUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChargingSlotPayload>
          }
          deleteMany: {
            args: Prisma.ChargingSlotDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChargingSlotUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChargingSlotUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChargingSlotPayload>[]
          }
          upsert: {
            args: Prisma.ChargingSlotUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChargingSlotPayload>
          }
          aggregate: {
            args: Prisma.ChargingSlotAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChargingSlot>
          }
          groupBy: {
            args: Prisma.ChargingSlotGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChargingSlotGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChargingSlotCountArgs<ExtArgs>
            result: $Utils.Optional<ChargingSlotCountAggregateOutputType> | number
          }
        }
      }
      Review: {
        payload: Prisma.$ReviewPayload<ExtArgs>
        fields: Prisma.ReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findFirst: {
            args: Prisma.ReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findMany: {
            args: Prisma.ReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          create: {
            args: Prisma.ReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          createMany: {
            args: Prisma.ReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          delete: {
            args: Prisma.ReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          update: {
            args: Prisma.ReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          deleteMany: {
            args: Prisma.ReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReviewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          upsert: {
            args: Prisma.ReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReview>
          }
          groupBy: {
            args: Prisma.ReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewCountAggregateOutputType> | number
          }
        }
      }
      ChargingHistory: {
        payload: Prisma.$ChargingHistoryPayload<ExtArgs>
        fields: Prisma.ChargingHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChargingHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChargingHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChargingHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChargingHistoryPayload>
          }
          findFirst: {
            args: Prisma.ChargingHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChargingHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChargingHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChargingHistoryPayload>
          }
          findMany: {
            args: Prisma.ChargingHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChargingHistoryPayload>[]
          }
          create: {
            args: Prisma.ChargingHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChargingHistoryPayload>
          }
          createMany: {
            args: Prisma.ChargingHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChargingHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChargingHistoryPayload>[]
          }
          delete: {
            args: Prisma.ChargingHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChargingHistoryPayload>
          }
          update: {
            args: Prisma.ChargingHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChargingHistoryPayload>
          }
          deleteMany: {
            args: Prisma.ChargingHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChargingHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChargingHistoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChargingHistoryPayload>[]
          }
          upsert: {
            args: Prisma.ChargingHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChargingHistoryPayload>
          }
          aggregate: {
            args: Prisma.ChargingHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChargingHistory>
          }
          groupBy: {
            args: Prisma.ChargingHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChargingHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChargingHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<ChargingHistoryCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      OTP: {
        payload: Prisma.$OTPPayload<ExtArgs>
        fields: Prisma.OTPFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OTPFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OTPFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>
          }
          findFirst: {
            args: Prisma.OTPFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OTPFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>
          }
          findMany: {
            args: Prisma.OTPFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>[]
          }
          create: {
            args: Prisma.OTPCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>
          }
          createMany: {
            args: Prisma.OTPCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OTPCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>[]
          }
          delete: {
            args: Prisma.OTPDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>
          }
          update: {
            args: Prisma.OTPUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>
          }
          deleteMany: {
            args: Prisma.OTPDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OTPUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OTPUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>[]
          }
          upsert: {
            args: Prisma.OTPUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>
          }
          aggregate: {
            args: Prisma.OTPAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOTP>
          }
          groupBy: {
            args: Prisma.OTPGroupByArgs<ExtArgs>
            result: $Utils.Optional<OTPGroupByOutputType>[]
          }
          count: {
            args: Prisma.OTPCountArgs<ExtArgs>
            result: $Utils.Optional<OTPCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    userDetails?: UserDetailsOmit
    ownerDetails?: OwnerDetailsOmit
    adminDetails?: AdminDetailsOmit
    stationMasterDetails?: StationMasterDetailsOmit
    eV?: EVOmit
    station?: StationOmit
    booking?: BookingOmit
    transaction?: TransactionOmit
    chargingSlot?: ChargingSlotOmit
    review?: ReviewOmit
    chargingHistory?: ChargingHistoryOmit
    notification?: NotificationOmit
    oTP?: OTPOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    otps: number
    evs: number
    bookings: number
    stations: number
    transactions: number
    reviews: number
    notifications: number
    chargingHistories: number
    stationMastersUnderMe: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    otps?: boolean | UserCountOutputTypeCountOtpsArgs
    evs?: boolean | UserCountOutputTypeCountEvsArgs
    bookings?: boolean | UserCountOutputTypeCountBookingsArgs
    stations?: boolean | UserCountOutputTypeCountStationsArgs
    transactions?: boolean | UserCountOutputTypeCountTransactionsArgs
    reviews?: boolean | UserCountOutputTypeCountReviewsArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    chargingHistories?: boolean | UserCountOutputTypeCountChargingHistoriesArgs
    stationMastersUnderMe?: boolean | UserCountOutputTypeCountStationMastersUnderMeArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOtpsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OTPWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEvsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EVWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChargingHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChargingHistoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStationMastersUnderMeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StationMasterDetailsWhereInput
  }


  /**
   * Count Type StationCountOutputType
   */

  export type StationCountOutputType = {
    stationMasters: number
    bookings: number
    chargingSlots: number
    reviews: number
    chargingHistories: number
  }

  export type StationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stationMasters?: boolean | StationCountOutputTypeCountStationMastersArgs
    bookings?: boolean | StationCountOutputTypeCountBookingsArgs
    chargingSlots?: boolean | StationCountOutputTypeCountChargingSlotsArgs
    reviews?: boolean | StationCountOutputTypeCountReviewsArgs
    chargingHistories?: boolean | StationCountOutputTypeCountChargingHistoriesArgs
  }

  // Custom InputTypes
  /**
   * StationCountOutputType without action
   */
  export type StationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationCountOutputType
     */
    select?: StationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StationCountOutputType without action
   */
  export type StationCountOutputTypeCountStationMastersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StationMasterDetailsWhereInput
  }

  /**
   * StationCountOutputType without action
   */
  export type StationCountOutputTypeCountBookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingWhereInput
  }

  /**
   * StationCountOutputType without action
   */
  export type StationCountOutputTypeCountChargingSlotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChargingSlotWhereInput
  }

  /**
   * StationCountOutputType without action
   */
  export type StationCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }

  /**
   * StationCountOutputType without action
   */
  export type StationCountOutputTypeCountChargingHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChargingHistoryWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    accountType: $Enums.AccountType | null
    image: string | null
    gender: string | null
    dateOfBirth: Date | null
    about: string | null
    contactNumber: string | null
    token: string | null
    tokenExpires: Date | null
    resetPasswordExpires: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    accountType: $Enums.AccountType | null
    image: string | null
    gender: string | null
    dateOfBirth: Date | null
    about: string | null
    contactNumber: string | null
    token: string | null
    tokenExpires: Date | null
    resetPasswordExpires: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    accountType: number
    image: number
    gender: number
    dateOfBirth: number
    about: number
    contactNumber: number
    token: number
    tokenExpires: number
    resetPasswordExpires: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    accountType?: true
    image?: true
    gender?: true
    dateOfBirth?: true
    about?: true
    contactNumber?: true
    token?: true
    tokenExpires?: true
    resetPasswordExpires?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    accountType?: true
    image?: true
    gender?: true
    dateOfBirth?: true
    about?: true
    contactNumber?: true
    token?: true
    tokenExpires?: true
    resetPasswordExpires?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    accountType?: true
    image?: true
    gender?: true
    dateOfBirth?: true
    about?: true
    contactNumber?: true
    token?: true
    tokenExpires?: true
    resetPasswordExpires?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image: string | null
    gender: string | null
    dateOfBirth: Date | null
    about: string | null
    contactNumber: string | null
    token: string | null
    tokenExpires: Date | null
    resetPasswordExpires: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    accountType?: boolean
    image?: boolean
    gender?: boolean
    dateOfBirth?: boolean
    about?: boolean
    contactNumber?: boolean
    token?: boolean
    tokenExpires?: boolean
    resetPasswordExpires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    otps?: boolean | User$otpsArgs<ExtArgs>
    evs?: boolean | User$evsArgs<ExtArgs>
    bookings?: boolean | User$bookingsArgs<ExtArgs>
    stations?: boolean | User$stationsArgs<ExtArgs>
    transactions?: boolean | User$transactionsArgs<ExtArgs>
    reviews?: boolean | User$reviewsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    chargingHistories?: boolean | User$chargingHistoriesArgs<ExtArgs>
    stationMastersUnderMe?: boolean | User$stationMastersUnderMeArgs<ExtArgs>
    userDetails?: boolean | User$userDetailsArgs<ExtArgs>
    ownerDetails?: boolean | User$ownerDetailsArgs<ExtArgs>
    adminDetails?: boolean | User$adminDetailsArgs<ExtArgs>
    stationMasterDetails?: boolean | User$stationMasterDetailsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    accountType?: boolean
    image?: boolean
    gender?: boolean
    dateOfBirth?: boolean
    about?: boolean
    contactNumber?: boolean
    token?: boolean
    tokenExpires?: boolean
    resetPasswordExpires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    accountType?: boolean
    image?: boolean
    gender?: boolean
    dateOfBirth?: boolean
    about?: boolean
    contactNumber?: boolean
    token?: boolean
    tokenExpires?: boolean
    resetPasswordExpires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    accountType?: boolean
    image?: boolean
    gender?: boolean
    dateOfBirth?: boolean
    about?: boolean
    contactNumber?: boolean
    token?: boolean
    tokenExpires?: boolean
    resetPasswordExpires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password" | "accountType" | "image" | "gender" | "dateOfBirth" | "about" | "contactNumber" | "token" | "tokenExpires" | "resetPasswordExpires" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    otps?: boolean | User$otpsArgs<ExtArgs>
    evs?: boolean | User$evsArgs<ExtArgs>
    bookings?: boolean | User$bookingsArgs<ExtArgs>
    stations?: boolean | User$stationsArgs<ExtArgs>
    transactions?: boolean | User$transactionsArgs<ExtArgs>
    reviews?: boolean | User$reviewsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    chargingHistories?: boolean | User$chargingHistoriesArgs<ExtArgs>
    stationMastersUnderMe?: boolean | User$stationMastersUnderMeArgs<ExtArgs>
    userDetails?: boolean | User$userDetailsArgs<ExtArgs>
    ownerDetails?: boolean | User$ownerDetailsArgs<ExtArgs>
    adminDetails?: boolean | User$adminDetailsArgs<ExtArgs>
    stationMasterDetails?: boolean | User$stationMasterDetailsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      otps: Prisma.$OTPPayload<ExtArgs>[]
      evs: Prisma.$EVPayload<ExtArgs>[]
      bookings: Prisma.$BookingPayload<ExtArgs>[]
      stations: Prisma.$StationPayload<ExtArgs>[]
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      chargingHistories: Prisma.$ChargingHistoryPayload<ExtArgs>[]
      stationMastersUnderMe: Prisma.$StationMasterDetailsPayload<ExtArgs>[]
      userDetails: Prisma.$UserDetailsPayload<ExtArgs> | null
      ownerDetails: Prisma.$OwnerDetailsPayload<ExtArgs> | null
      adminDetails: Prisma.$AdminDetailsPayload<ExtArgs> | null
      stationMasterDetails: Prisma.$StationMasterDetailsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      password: string
      accountType: $Enums.AccountType
      image: string | null
      gender: string | null
      dateOfBirth: Date | null
      about: string | null
      contactNumber: string | null
      token: string | null
      tokenExpires: Date | null
      resetPasswordExpires: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    otps<T extends User$otpsArgs<ExtArgs> = {}>(args?: Subset<T, User$otpsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    evs<T extends User$evsArgs<ExtArgs> = {}>(args?: Subset<T, User$evsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EVPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    bookings<T extends User$bookingsArgs<ExtArgs> = {}>(args?: Subset<T, User$bookingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    stations<T extends User$stationsArgs<ExtArgs> = {}>(args?: Subset<T, User$stationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transactions<T extends User$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviews<T extends User$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    chargingHistories<T extends User$chargingHistoriesArgs<ExtArgs> = {}>(args?: Subset<T, User$chargingHistoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChargingHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    stationMastersUnderMe<T extends User$stationMastersUnderMeArgs<ExtArgs> = {}>(args?: Subset<T, User$stationMastersUnderMeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StationMasterDetailsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userDetails<T extends User$userDetailsArgs<ExtArgs> = {}>(args?: Subset<T, User$userDetailsArgs<ExtArgs>>): Prisma__UserDetailsClient<$Result.GetResult<Prisma.$UserDetailsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    ownerDetails<T extends User$ownerDetailsArgs<ExtArgs> = {}>(args?: Subset<T, User$ownerDetailsArgs<ExtArgs>>): Prisma__OwnerDetailsClient<$Result.GetResult<Prisma.$OwnerDetailsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    adminDetails<T extends User$adminDetailsArgs<ExtArgs> = {}>(args?: Subset<T, User$adminDetailsArgs<ExtArgs>>): Prisma__AdminDetailsClient<$Result.GetResult<Prisma.$AdminDetailsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    stationMasterDetails<T extends User$stationMasterDetailsArgs<ExtArgs> = {}>(args?: Subset<T, User$stationMasterDetailsArgs<ExtArgs>>): Prisma__StationMasterDetailsClient<$Result.GetResult<Prisma.$StationMasterDetailsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly accountType: FieldRef<"User", 'AccountType'>
    readonly image: FieldRef<"User", 'String'>
    readonly gender: FieldRef<"User", 'String'>
    readonly dateOfBirth: FieldRef<"User", 'DateTime'>
    readonly about: FieldRef<"User", 'String'>
    readonly contactNumber: FieldRef<"User", 'String'>
    readonly token: FieldRef<"User", 'String'>
    readonly tokenExpires: FieldRef<"User", 'DateTime'>
    readonly resetPasswordExpires: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.otps
   */
  export type User$otpsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTP
     */
    omit?: OTPOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OTPInclude<ExtArgs> | null
    where?: OTPWhereInput
    orderBy?: OTPOrderByWithRelationInput | OTPOrderByWithRelationInput[]
    cursor?: OTPWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OTPScalarFieldEnum | OTPScalarFieldEnum[]
  }

  /**
   * User.evs
   */
  export type User$evsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EV
     */
    select?: EVSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EV
     */
    omit?: EVOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVInclude<ExtArgs> | null
    where?: EVWhereInput
    orderBy?: EVOrderByWithRelationInput | EVOrderByWithRelationInput[]
    cursor?: EVWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EVScalarFieldEnum | EVScalarFieldEnum[]
  }

  /**
   * User.bookings
   */
  export type User$bookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    where?: BookingWhereInput
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    cursor?: BookingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * User.stations
   */
  export type User$stationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Station
     */
    omit?: StationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    where?: StationWhereInput
    orderBy?: StationOrderByWithRelationInput | StationOrderByWithRelationInput[]
    cursor?: StationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StationScalarFieldEnum | StationScalarFieldEnum[]
  }

  /**
   * User.transactions
   */
  export type User$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * User.reviews
   */
  export type User$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.chargingHistories
   */
  export type User$chargingHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingHistory
     */
    select?: ChargingHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingHistory
     */
    omit?: ChargingHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingHistoryInclude<ExtArgs> | null
    where?: ChargingHistoryWhereInput
    orderBy?: ChargingHistoryOrderByWithRelationInput | ChargingHistoryOrderByWithRelationInput[]
    cursor?: ChargingHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChargingHistoryScalarFieldEnum | ChargingHistoryScalarFieldEnum[]
  }

  /**
   * User.stationMastersUnderMe
   */
  export type User$stationMastersUnderMeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationMasterDetails
     */
    select?: StationMasterDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StationMasterDetails
     */
    omit?: StationMasterDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationMasterDetailsInclude<ExtArgs> | null
    where?: StationMasterDetailsWhereInput
    orderBy?: StationMasterDetailsOrderByWithRelationInput | StationMasterDetailsOrderByWithRelationInput[]
    cursor?: StationMasterDetailsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StationMasterDetailsScalarFieldEnum | StationMasterDetailsScalarFieldEnum[]
  }

  /**
   * User.userDetails
   */
  export type User$userDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDetails
     */
    select?: UserDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDetails
     */
    omit?: UserDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDetailsInclude<ExtArgs> | null
    where?: UserDetailsWhereInput
  }

  /**
   * User.ownerDetails
   */
  export type User$ownerDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OwnerDetails
     */
    select?: OwnerDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OwnerDetails
     */
    omit?: OwnerDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerDetailsInclude<ExtArgs> | null
    where?: OwnerDetailsWhereInput
  }

  /**
   * User.adminDetails
   */
  export type User$adminDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminDetails
     */
    select?: AdminDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminDetails
     */
    omit?: AdminDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminDetailsInclude<ExtArgs> | null
    where?: AdminDetailsWhereInput
  }

  /**
   * User.stationMasterDetails
   */
  export type User$stationMasterDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationMasterDetails
     */
    select?: StationMasterDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StationMasterDetails
     */
    omit?: StationMasterDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationMasterDetailsInclude<ExtArgs> | null
    where?: StationMasterDetailsWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserDetails
   */

  export type AggregateUserDetails = {
    _count: UserDetailsCountAggregateOutputType | null
    _min: UserDetailsMinAggregateOutputType | null
    _max: UserDetailsMaxAggregateOutputType | null
  }

  export type UserDetailsMinAggregateOutputType = {
    id: string | null
    userId: string | null
    address: string | null
    preferences: string | null
    city: string | null
    state: string | null
    zipCode: string | null
    createdAt: Date | null
  }

  export type UserDetailsMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    address: string | null
    preferences: string | null
    city: string | null
    state: string | null
    zipCode: string | null
    createdAt: Date | null
  }

  export type UserDetailsCountAggregateOutputType = {
    id: number
    userId: number
    address: number
    preferences: number
    city: number
    state: number
    zipCode: number
    createdAt: number
    _all: number
  }


  export type UserDetailsMinAggregateInputType = {
    id?: true
    userId?: true
    address?: true
    preferences?: true
    city?: true
    state?: true
    zipCode?: true
    createdAt?: true
  }

  export type UserDetailsMaxAggregateInputType = {
    id?: true
    userId?: true
    address?: true
    preferences?: true
    city?: true
    state?: true
    zipCode?: true
    createdAt?: true
  }

  export type UserDetailsCountAggregateInputType = {
    id?: true
    userId?: true
    address?: true
    preferences?: true
    city?: true
    state?: true
    zipCode?: true
    createdAt?: true
    _all?: true
  }

  export type UserDetailsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserDetails to aggregate.
     */
    where?: UserDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDetails to fetch.
     */
    orderBy?: UserDetailsOrderByWithRelationInput | UserDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserDetails
    **/
    _count?: true | UserDetailsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserDetailsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserDetailsMaxAggregateInputType
  }

  export type GetUserDetailsAggregateType<T extends UserDetailsAggregateArgs> = {
        [P in keyof T & keyof AggregateUserDetails]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserDetails[P]>
      : GetScalarType<T[P], AggregateUserDetails[P]>
  }




  export type UserDetailsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserDetailsWhereInput
    orderBy?: UserDetailsOrderByWithAggregationInput | UserDetailsOrderByWithAggregationInput[]
    by: UserDetailsScalarFieldEnum[] | UserDetailsScalarFieldEnum
    having?: UserDetailsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserDetailsCountAggregateInputType | true
    _min?: UserDetailsMinAggregateInputType
    _max?: UserDetailsMaxAggregateInputType
  }

  export type UserDetailsGroupByOutputType = {
    id: string
    userId: string
    address: string | null
    preferences: string | null
    city: string | null
    state: string | null
    zipCode: string | null
    createdAt: Date
    _count: UserDetailsCountAggregateOutputType | null
    _min: UserDetailsMinAggregateOutputType | null
    _max: UserDetailsMaxAggregateOutputType | null
  }

  type GetUserDetailsGroupByPayload<T extends UserDetailsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserDetailsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserDetailsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserDetailsGroupByOutputType[P]>
            : GetScalarType<T[P], UserDetailsGroupByOutputType[P]>
        }
      >
    >


  export type UserDetailsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    address?: boolean
    preferences?: boolean
    city?: boolean
    state?: boolean
    zipCode?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userDetails"]>

  export type UserDetailsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    address?: boolean
    preferences?: boolean
    city?: boolean
    state?: boolean
    zipCode?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userDetails"]>

  export type UserDetailsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    address?: boolean
    preferences?: boolean
    city?: boolean
    state?: boolean
    zipCode?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userDetails"]>

  export type UserDetailsSelectScalar = {
    id?: boolean
    userId?: boolean
    address?: boolean
    preferences?: boolean
    city?: boolean
    state?: boolean
    zipCode?: boolean
    createdAt?: boolean
  }

  export type UserDetailsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "address" | "preferences" | "city" | "state" | "zipCode" | "createdAt", ExtArgs["result"]["userDetails"]>
  export type UserDetailsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserDetailsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserDetailsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserDetailsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserDetails"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      address: string | null
      preferences: string | null
      city: string | null
      state: string | null
      zipCode: string | null
      createdAt: Date
    }, ExtArgs["result"]["userDetails"]>
    composites: {}
  }

  type UserDetailsGetPayload<S extends boolean | null | undefined | UserDetailsDefaultArgs> = $Result.GetResult<Prisma.$UserDetailsPayload, S>

  type UserDetailsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserDetailsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserDetailsCountAggregateInputType | true
    }

  export interface UserDetailsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserDetails'], meta: { name: 'UserDetails' } }
    /**
     * Find zero or one UserDetails that matches the filter.
     * @param {UserDetailsFindUniqueArgs} args - Arguments to find a UserDetails
     * @example
     * // Get one UserDetails
     * const userDetails = await prisma.userDetails.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserDetailsFindUniqueArgs>(args: SelectSubset<T, UserDetailsFindUniqueArgs<ExtArgs>>): Prisma__UserDetailsClient<$Result.GetResult<Prisma.$UserDetailsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserDetails that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserDetailsFindUniqueOrThrowArgs} args - Arguments to find a UserDetails
     * @example
     * // Get one UserDetails
     * const userDetails = await prisma.userDetails.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserDetailsFindUniqueOrThrowArgs>(args: SelectSubset<T, UserDetailsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserDetailsClient<$Result.GetResult<Prisma.$UserDetailsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDetailsFindFirstArgs} args - Arguments to find a UserDetails
     * @example
     * // Get one UserDetails
     * const userDetails = await prisma.userDetails.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserDetailsFindFirstArgs>(args?: SelectSubset<T, UserDetailsFindFirstArgs<ExtArgs>>): Prisma__UserDetailsClient<$Result.GetResult<Prisma.$UserDetailsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserDetails that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDetailsFindFirstOrThrowArgs} args - Arguments to find a UserDetails
     * @example
     * // Get one UserDetails
     * const userDetails = await prisma.userDetails.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserDetailsFindFirstOrThrowArgs>(args?: SelectSubset<T, UserDetailsFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserDetailsClient<$Result.GetResult<Prisma.$UserDetailsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDetailsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserDetails
     * const userDetails = await prisma.userDetails.findMany()
     * 
     * // Get first 10 UserDetails
     * const userDetails = await prisma.userDetails.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userDetailsWithIdOnly = await prisma.userDetails.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserDetailsFindManyArgs>(args?: SelectSubset<T, UserDetailsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserDetailsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserDetails.
     * @param {UserDetailsCreateArgs} args - Arguments to create a UserDetails.
     * @example
     * // Create one UserDetails
     * const UserDetails = await prisma.userDetails.create({
     *   data: {
     *     // ... data to create a UserDetails
     *   }
     * })
     * 
     */
    create<T extends UserDetailsCreateArgs>(args: SelectSubset<T, UserDetailsCreateArgs<ExtArgs>>): Prisma__UserDetailsClient<$Result.GetResult<Prisma.$UserDetailsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserDetails.
     * @param {UserDetailsCreateManyArgs} args - Arguments to create many UserDetails.
     * @example
     * // Create many UserDetails
     * const userDetails = await prisma.userDetails.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserDetailsCreateManyArgs>(args?: SelectSubset<T, UserDetailsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserDetails and returns the data saved in the database.
     * @param {UserDetailsCreateManyAndReturnArgs} args - Arguments to create many UserDetails.
     * @example
     * // Create many UserDetails
     * const userDetails = await prisma.userDetails.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserDetails and only return the `id`
     * const userDetailsWithIdOnly = await prisma.userDetails.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserDetailsCreateManyAndReturnArgs>(args?: SelectSubset<T, UserDetailsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserDetailsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserDetails.
     * @param {UserDetailsDeleteArgs} args - Arguments to delete one UserDetails.
     * @example
     * // Delete one UserDetails
     * const UserDetails = await prisma.userDetails.delete({
     *   where: {
     *     // ... filter to delete one UserDetails
     *   }
     * })
     * 
     */
    delete<T extends UserDetailsDeleteArgs>(args: SelectSubset<T, UserDetailsDeleteArgs<ExtArgs>>): Prisma__UserDetailsClient<$Result.GetResult<Prisma.$UserDetailsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserDetails.
     * @param {UserDetailsUpdateArgs} args - Arguments to update one UserDetails.
     * @example
     * // Update one UserDetails
     * const userDetails = await prisma.userDetails.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserDetailsUpdateArgs>(args: SelectSubset<T, UserDetailsUpdateArgs<ExtArgs>>): Prisma__UserDetailsClient<$Result.GetResult<Prisma.$UserDetailsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserDetails.
     * @param {UserDetailsDeleteManyArgs} args - Arguments to filter UserDetails to delete.
     * @example
     * // Delete a few UserDetails
     * const { count } = await prisma.userDetails.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDetailsDeleteManyArgs>(args?: SelectSubset<T, UserDetailsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDetailsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserDetails
     * const userDetails = await prisma.userDetails.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserDetailsUpdateManyArgs>(args: SelectSubset<T, UserDetailsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserDetails and returns the data updated in the database.
     * @param {UserDetailsUpdateManyAndReturnArgs} args - Arguments to update many UserDetails.
     * @example
     * // Update many UserDetails
     * const userDetails = await prisma.userDetails.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserDetails and only return the `id`
     * const userDetailsWithIdOnly = await prisma.userDetails.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserDetailsUpdateManyAndReturnArgs>(args: SelectSubset<T, UserDetailsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserDetailsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserDetails.
     * @param {UserDetailsUpsertArgs} args - Arguments to update or create a UserDetails.
     * @example
     * // Update or create a UserDetails
     * const userDetails = await prisma.userDetails.upsert({
     *   create: {
     *     // ... data to create a UserDetails
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserDetails we want to update
     *   }
     * })
     */
    upsert<T extends UserDetailsUpsertArgs>(args: SelectSubset<T, UserDetailsUpsertArgs<ExtArgs>>): Prisma__UserDetailsClient<$Result.GetResult<Prisma.$UserDetailsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDetailsCountArgs} args - Arguments to filter UserDetails to count.
     * @example
     * // Count the number of UserDetails
     * const count = await prisma.userDetails.count({
     *   where: {
     *     // ... the filter for the UserDetails we want to count
     *   }
     * })
    **/
    count<T extends UserDetailsCountArgs>(
      args?: Subset<T, UserDetailsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserDetailsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDetailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserDetailsAggregateArgs>(args: Subset<T, UserDetailsAggregateArgs>): Prisma.PrismaPromise<GetUserDetailsAggregateType<T>>

    /**
     * Group by UserDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserDetailsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserDetailsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserDetailsGroupByArgs['orderBy'] }
        : { orderBy?: UserDetailsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserDetailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserDetailsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserDetails model
   */
  readonly fields: UserDetailsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserDetails.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserDetailsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserDetails model
   */
  interface UserDetailsFieldRefs {
    readonly id: FieldRef<"UserDetails", 'String'>
    readonly userId: FieldRef<"UserDetails", 'String'>
    readonly address: FieldRef<"UserDetails", 'String'>
    readonly preferences: FieldRef<"UserDetails", 'String'>
    readonly city: FieldRef<"UserDetails", 'String'>
    readonly state: FieldRef<"UserDetails", 'String'>
    readonly zipCode: FieldRef<"UserDetails", 'String'>
    readonly createdAt: FieldRef<"UserDetails", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserDetails findUnique
   */
  export type UserDetailsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDetails
     */
    select?: UserDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDetails
     */
    omit?: UserDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDetailsInclude<ExtArgs> | null
    /**
     * Filter, which UserDetails to fetch.
     */
    where: UserDetailsWhereUniqueInput
  }

  /**
   * UserDetails findUniqueOrThrow
   */
  export type UserDetailsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDetails
     */
    select?: UserDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDetails
     */
    omit?: UserDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDetailsInclude<ExtArgs> | null
    /**
     * Filter, which UserDetails to fetch.
     */
    where: UserDetailsWhereUniqueInput
  }

  /**
   * UserDetails findFirst
   */
  export type UserDetailsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDetails
     */
    select?: UserDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDetails
     */
    omit?: UserDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDetailsInclude<ExtArgs> | null
    /**
     * Filter, which UserDetails to fetch.
     */
    where?: UserDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDetails to fetch.
     */
    orderBy?: UserDetailsOrderByWithRelationInput | UserDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserDetails.
     */
    cursor?: UserDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserDetails.
     */
    distinct?: UserDetailsScalarFieldEnum | UserDetailsScalarFieldEnum[]
  }

  /**
   * UserDetails findFirstOrThrow
   */
  export type UserDetailsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDetails
     */
    select?: UserDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDetails
     */
    omit?: UserDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDetailsInclude<ExtArgs> | null
    /**
     * Filter, which UserDetails to fetch.
     */
    where?: UserDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDetails to fetch.
     */
    orderBy?: UserDetailsOrderByWithRelationInput | UserDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserDetails.
     */
    cursor?: UserDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserDetails.
     */
    distinct?: UserDetailsScalarFieldEnum | UserDetailsScalarFieldEnum[]
  }

  /**
   * UserDetails findMany
   */
  export type UserDetailsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDetails
     */
    select?: UserDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDetails
     */
    omit?: UserDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDetailsInclude<ExtArgs> | null
    /**
     * Filter, which UserDetails to fetch.
     */
    where?: UserDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserDetails to fetch.
     */
    orderBy?: UserDetailsOrderByWithRelationInput | UserDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserDetails.
     */
    cursor?: UserDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserDetails.
     */
    skip?: number
    distinct?: UserDetailsScalarFieldEnum | UserDetailsScalarFieldEnum[]
  }

  /**
   * UserDetails create
   */
  export type UserDetailsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDetails
     */
    select?: UserDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDetails
     */
    omit?: UserDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDetailsInclude<ExtArgs> | null
    /**
     * The data needed to create a UserDetails.
     */
    data: XOR<UserDetailsCreateInput, UserDetailsUncheckedCreateInput>
  }

  /**
   * UserDetails createMany
   */
  export type UserDetailsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserDetails.
     */
    data: UserDetailsCreateManyInput | UserDetailsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserDetails createManyAndReturn
   */
  export type UserDetailsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDetails
     */
    select?: UserDetailsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserDetails
     */
    omit?: UserDetailsOmit<ExtArgs> | null
    /**
     * The data used to create many UserDetails.
     */
    data: UserDetailsCreateManyInput | UserDetailsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDetailsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserDetails update
   */
  export type UserDetailsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDetails
     */
    select?: UserDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDetails
     */
    omit?: UserDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDetailsInclude<ExtArgs> | null
    /**
     * The data needed to update a UserDetails.
     */
    data: XOR<UserDetailsUpdateInput, UserDetailsUncheckedUpdateInput>
    /**
     * Choose, which UserDetails to update.
     */
    where: UserDetailsWhereUniqueInput
  }

  /**
   * UserDetails updateMany
   */
  export type UserDetailsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserDetails.
     */
    data: XOR<UserDetailsUpdateManyMutationInput, UserDetailsUncheckedUpdateManyInput>
    /**
     * Filter which UserDetails to update
     */
    where?: UserDetailsWhereInput
    /**
     * Limit how many UserDetails to update.
     */
    limit?: number
  }

  /**
   * UserDetails updateManyAndReturn
   */
  export type UserDetailsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDetails
     */
    select?: UserDetailsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserDetails
     */
    omit?: UserDetailsOmit<ExtArgs> | null
    /**
     * The data used to update UserDetails.
     */
    data: XOR<UserDetailsUpdateManyMutationInput, UserDetailsUncheckedUpdateManyInput>
    /**
     * Filter which UserDetails to update
     */
    where?: UserDetailsWhereInput
    /**
     * Limit how many UserDetails to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDetailsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserDetails upsert
   */
  export type UserDetailsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDetails
     */
    select?: UserDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDetails
     */
    omit?: UserDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDetailsInclude<ExtArgs> | null
    /**
     * The filter to search for the UserDetails to update in case it exists.
     */
    where: UserDetailsWhereUniqueInput
    /**
     * In case the UserDetails found by the `where` argument doesn't exist, create a new UserDetails with this data.
     */
    create: XOR<UserDetailsCreateInput, UserDetailsUncheckedCreateInput>
    /**
     * In case the UserDetails was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserDetailsUpdateInput, UserDetailsUncheckedUpdateInput>
  }

  /**
   * UserDetails delete
   */
  export type UserDetailsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDetails
     */
    select?: UserDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDetails
     */
    omit?: UserDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDetailsInclude<ExtArgs> | null
    /**
     * Filter which UserDetails to delete.
     */
    where: UserDetailsWhereUniqueInput
  }

  /**
   * UserDetails deleteMany
   */
  export type UserDetailsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserDetails to delete
     */
    where?: UserDetailsWhereInput
    /**
     * Limit how many UserDetails to delete.
     */
    limit?: number
  }

  /**
   * UserDetails without action
   */
  export type UserDetailsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserDetails
     */
    select?: UserDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserDetails
     */
    omit?: UserDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserDetailsInclude<ExtArgs> | null
  }


  /**
   * Model OwnerDetails
   */

  export type AggregateOwnerDetails = {
    _count: OwnerDetailsCountAggregateOutputType | null
    _min: OwnerDetailsMinAggregateOutputType | null
    _max: OwnerDetailsMaxAggregateOutputType | null
  }

  export type OwnerDetailsMinAggregateOutputType = {
    id: string | null
    userId: string | null
    companyName: string | null
    companyRegNo: string | null
    companyDocs: string | null
    address: string | null
    contactEmail: string | null
    createdAt: Date | null
  }

  export type OwnerDetailsMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    companyName: string | null
    companyRegNo: string | null
    companyDocs: string | null
    address: string | null
    contactEmail: string | null
    createdAt: Date | null
  }

  export type OwnerDetailsCountAggregateOutputType = {
    id: number
    userId: number
    companyName: number
    companyRegNo: number
    companyDocs: number
    address: number
    contactEmail: number
    createdAt: number
    _all: number
  }


  export type OwnerDetailsMinAggregateInputType = {
    id?: true
    userId?: true
    companyName?: true
    companyRegNo?: true
    companyDocs?: true
    address?: true
    contactEmail?: true
    createdAt?: true
  }

  export type OwnerDetailsMaxAggregateInputType = {
    id?: true
    userId?: true
    companyName?: true
    companyRegNo?: true
    companyDocs?: true
    address?: true
    contactEmail?: true
    createdAt?: true
  }

  export type OwnerDetailsCountAggregateInputType = {
    id?: true
    userId?: true
    companyName?: true
    companyRegNo?: true
    companyDocs?: true
    address?: true
    contactEmail?: true
    createdAt?: true
    _all?: true
  }

  export type OwnerDetailsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OwnerDetails to aggregate.
     */
    where?: OwnerDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OwnerDetails to fetch.
     */
    orderBy?: OwnerDetailsOrderByWithRelationInput | OwnerDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OwnerDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OwnerDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OwnerDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OwnerDetails
    **/
    _count?: true | OwnerDetailsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OwnerDetailsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OwnerDetailsMaxAggregateInputType
  }

  export type GetOwnerDetailsAggregateType<T extends OwnerDetailsAggregateArgs> = {
        [P in keyof T & keyof AggregateOwnerDetails]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOwnerDetails[P]>
      : GetScalarType<T[P], AggregateOwnerDetails[P]>
  }




  export type OwnerDetailsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OwnerDetailsWhereInput
    orderBy?: OwnerDetailsOrderByWithAggregationInput | OwnerDetailsOrderByWithAggregationInput[]
    by: OwnerDetailsScalarFieldEnum[] | OwnerDetailsScalarFieldEnum
    having?: OwnerDetailsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OwnerDetailsCountAggregateInputType | true
    _min?: OwnerDetailsMinAggregateInputType
    _max?: OwnerDetailsMaxAggregateInputType
  }

  export type OwnerDetailsGroupByOutputType = {
    id: string
    userId: string
    companyName: string
    companyRegNo: string
    companyDocs: string
    address: string | null
    contactEmail: string | null
    createdAt: Date
    _count: OwnerDetailsCountAggregateOutputType | null
    _min: OwnerDetailsMinAggregateOutputType | null
    _max: OwnerDetailsMaxAggregateOutputType | null
  }

  type GetOwnerDetailsGroupByPayload<T extends OwnerDetailsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OwnerDetailsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OwnerDetailsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OwnerDetailsGroupByOutputType[P]>
            : GetScalarType<T[P], OwnerDetailsGroupByOutputType[P]>
        }
      >
    >


  export type OwnerDetailsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    companyName?: boolean
    companyRegNo?: boolean
    companyDocs?: boolean
    address?: boolean
    contactEmail?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ownerDetails"]>

  export type OwnerDetailsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    companyName?: boolean
    companyRegNo?: boolean
    companyDocs?: boolean
    address?: boolean
    contactEmail?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ownerDetails"]>

  export type OwnerDetailsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    companyName?: boolean
    companyRegNo?: boolean
    companyDocs?: boolean
    address?: boolean
    contactEmail?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ownerDetails"]>

  export type OwnerDetailsSelectScalar = {
    id?: boolean
    userId?: boolean
    companyName?: boolean
    companyRegNo?: boolean
    companyDocs?: boolean
    address?: boolean
    contactEmail?: boolean
    createdAt?: boolean
  }

  export type OwnerDetailsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "companyName" | "companyRegNo" | "companyDocs" | "address" | "contactEmail" | "createdAt", ExtArgs["result"]["ownerDetails"]>
  export type OwnerDetailsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OwnerDetailsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OwnerDetailsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OwnerDetailsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OwnerDetails"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      companyName: string
      companyRegNo: string
      companyDocs: string
      address: string | null
      contactEmail: string | null
      createdAt: Date
    }, ExtArgs["result"]["ownerDetails"]>
    composites: {}
  }

  type OwnerDetailsGetPayload<S extends boolean | null | undefined | OwnerDetailsDefaultArgs> = $Result.GetResult<Prisma.$OwnerDetailsPayload, S>

  type OwnerDetailsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OwnerDetailsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OwnerDetailsCountAggregateInputType | true
    }

  export interface OwnerDetailsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OwnerDetails'], meta: { name: 'OwnerDetails' } }
    /**
     * Find zero or one OwnerDetails that matches the filter.
     * @param {OwnerDetailsFindUniqueArgs} args - Arguments to find a OwnerDetails
     * @example
     * // Get one OwnerDetails
     * const ownerDetails = await prisma.ownerDetails.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OwnerDetailsFindUniqueArgs>(args: SelectSubset<T, OwnerDetailsFindUniqueArgs<ExtArgs>>): Prisma__OwnerDetailsClient<$Result.GetResult<Prisma.$OwnerDetailsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OwnerDetails that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OwnerDetailsFindUniqueOrThrowArgs} args - Arguments to find a OwnerDetails
     * @example
     * // Get one OwnerDetails
     * const ownerDetails = await prisma.ownerDetails.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OwnerDetailsFindUniqueOrThrowArgs>(args: SelectSubset<T, OwnerDetailsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OwnerDetailsClient<$Result.GetResult<Prisma.$OwnerDetailsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OwnerDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OwnerDetailsFindFirstArgs} args - Arguments to find a OwnerDetails
     * @example
     * // Get one OwnerDetails
     * const ownerDetails = await prisma.ownerDetails.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OwnerDetailsFindFirstArgs>(args?: SelectSubset<T, OwnerDetailsFindFirstArgs<ExtArgs>>): Prisma__OwnerDetailsClient<$Result.GetResult<Prisma.$OwnerDetailsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OwnerDetails that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OwnerDetailsFindFirstOrThrowArgs} args - Arguments to find a OwnerDetails
     * @example
     * // Get one OwnerDetails
     * const ownerDetails = await prisma.ownerDetails.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OwnerDetailsFindFirstOrThrowArgs>(args?: SelectSubset<T, OwnerDetailsFindFirstOrThrowArgs<ExtArgs>>): Prisma__OwnerDetailsClient<$Result.GetResult<Prisma.$OwnerDetailsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OwnerDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OwnerDetailsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OwnerDetails
     * const ownerDetails = await prisma.ownerDetails.findMany()
     * 
     * // Get first 10 OwnerDetails
     * const ownerDetails = await prisma.ownerDetails.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ownerDetailsWithIdOnly = await prisma.ownerDetails.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OwnerDetailsFindManyArgs>(args?: SelectSubset<T, OwnerDetailsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OwnerDetailsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OwnerDetails.
     * @param {OwnerDetailsCreateArgs} args - Arguments to create a OwnerDetails.
     * @example
     * // Create one OwnerDetails
     * const OwnerDetails = await prisma.ownerDetails.create({
     *   data: {
     *     // ... data to create a OwnerDetails
     *   }
     * })
     * 
     */
    create<T extends OwnerDetailsCreateArgs>(args: SelectSubset<T, OwnerDetailsCreateArgs<ExtArgs>>): Prisma__OwnerDetailsClient<$Result.GetResult<Prisma.$OwnerDetailsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OwnerDetails.
     * @param {OwnerDetailsCreateManyArgs} args - Arguments to create many OwnerDetails.
     * @example
     * // Create many OwnerDetails
     * const ownerDetails = await prisma.ownerDetails.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OwnerDetailsCreateManyArgs>(args?: SelectSubset<T, OwnerDetailsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OwnerDetails and returns the data saved in the database.
     * @param {OwnerDetailsCreateManyAndReturnArgs} args - Arguments to create many OwnerDetails.
     * @example
     * // Create many OwnerDetails
     * const ownerDetails = await prisma.ownerDetails.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OwnerDetails and only return the `id`
     * const ownerDetailsWithIdOnly = await prisma.ownerDetails.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OwnerDetailsCreateManyAndReturnArgs>(args?: SelectSubset<T, OwnerDetailsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OwnerDetailsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OwnerDetails.
     * @param {OwnerDetailsDeleteArgs} args - Arguments to delete one OwnerDetails.
     * @example
     * // Delete one OwnerDetails
     * const OwnerDetails = await prisma.ownerDetails.delete({
     *   where: {
     *     // ... filter to delete one OwnerDetails
     *   }
     * })
     * 
     */
    delete<T extends OwnerDetailsDeleteArgs>(args: SelectSubset<T, OwnerDetailsDeleteArgs<ExtArgs>>): Prisma__OwnerDetailsClient<$Result.GetResult<Prisma.$OwnerDetailsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OwnerDetails.
     * @param {OwnerDetailsUpdateArgs} args - Arguments to update one OwnerDetails.
     * @example
     * // Update one OwnerDetails
     * const ownerDetails = await prisma.ownerDetails.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OwnerDetailsUpdateArgs>(args: SelectSubset<T, OwnerDetailsUpdateArgs<ExtArgs>>): Prisma__OwnerDetailsClient<$Result.GetResult<Prisma.$OwnerDetailsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OwnerDetails.
     * @param {OwnerDetailsDeleteManyArgs} args - Arguments to filter OwnerDetails to delete.
     * @example
     * // Delete a few OwnerDetails
     * const { count } = await prisma.ownerDetails.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OwnerDetailsDeleteManyArgs>(args?: SelectSubset<T, OwnerDetailsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OwnerDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OwnerDetailsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OwnerDetails
     * const ownerDetails = await prisma.ownerDetails.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OwnerDetailsUpdateManyArgs>(args: SelectSubset<T, OwnerDetailsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OwnerDetails and returns the data updated in the database.
     * @param {OwnerDetailsUpdateManyAndReturnArgs} args - Arguments to update many OwnerDetails.
     * @example
     * // Update many OwnerDetails
     * const ownerDetails = await prisma.ownerDetails.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OwnerDetails and only return the `id`
     * const ownerDetailsWithIdOnly = await prisma.ownerDetails.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OwnerDetailsUpdateManyAndReturnArgs>(args: SelectSubset<T, OwnerDetailsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OwnerDetailsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OwnerDetails.
     * @param {OwnerDetailsUpsertArgs} args - Arguments to update or create a OwnerDetails.
     * @example
     * // Update or create a OwnerDetails
     * const ownerDetails = await prisma.ownerDetails.upsert({
     *   create: {
     *     // ... data to create a OwnerDetails
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OwnerDetails we want to update
     *   }
     * })
     */
    upsert<T extends OwnerDetailsUpsertArgs>(args: SelectSubset<T, OwnerDetailsUpsertArgs<ExtArgs>>): Prisma__OwnerDetailsClient<$Result.GetResult<Prisma.$OwnerDetailsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OwnerDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OwnerDetailsCountArgs} args - Arguments to filter OwnerDetails to count.
     * @example
     * // Count the number of OwnerDetails
     * const count = await prisma.ownerDetails.count({
     *   where: {
     *     // ... the filter for the OwnerDetails we want to count
     *   }
     * })
    **/
    count<T extends OwnerDetailsCountArgs>(
      args?: Subset<T, OwnerDetailsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OwnerDetailsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OwnerDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OwnerDetailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OwnerDetailsAggregateArgs>(args: Subset<T, OwnerDetailsAggregateArgs>): Prisma.PrismaPromise<GetOwnerDetailsAggregateType<T>>

    /**
     * Group by OwnerDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OwnerDetailsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OwnerDetailsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OwnerDetailsGroupByArgs['orderBy'] }
        : { orderBy?: OwnerDetailsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OwnerDetailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOwnerDetailsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OwnerDetails model
   */
  readonly fields: OwnerDetailsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OwnerDetails.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OwnerDetailsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OwnerDetails model
   */
  interface OwnerDetailsFieldRefs {
    readonly id: FieldRef<"OwnerDetails", 'String'>
    readonly userId: FieldRef<"OwnerDetails", 'String'>
    readonly companyName: FieldRef<"OwnerDetails", 'String'>
    readonly companyRegNo: FieldRef<"OwnerDetails", 'String'>
    readonly companyDocs: FieldRef<"OwnerDetails", 'String'>
    readonly address: FieldRef<"OwnerDetails", 'String'>
    readonly contactEmail: FieldRef<"OwnerDetails", 'String'>
    readonly createdAt: FieldRef<"OwnerDetails", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OwnerDetails findUnique
   */
  export type OwnerDetailsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OwnerDetails
     */
    select?: OwnerDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OwnerDetails
     */
    omit?: OwnerDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerDetailsInclude<ExtArgs> | null
    /**
     * Filter, which OwnerDetails to fetch.
     */
    where: OwnerDetailsWhereUniqueInput
  }

  /**
   * OwnerDetails findUniqueOrThrow
   */
  export type OwnerDetailsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OwnerDetails
     */
    select?: OwnerDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OwnerDetails
     */
    omit?: OwnerDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerDetailsInclude<ExtArgs> | null
    /**
     * Filter, which OwnerDetails to fetch.
     */
    where: OwnerDetailsWhereUniqueInput
  }

  /**
   * OwnerDetails findFirst
   */
  export type OwnerDetailsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OwnerDetails
     */
    select?: OwnerDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OwnerDetails
     */
    omit?: OwnerDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerDetailsInclude<ExtArgs> | null
    /**
     * Filter, which OwnerDetails to fetch.
     */
    where?: OwnerDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OwnerDetails to fetch.
     */
    orderBy?: OwnerDetailsOrderByWithRelationInput | OwnerDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OwnerDetails.
     */
    cursor?: OwnerDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OwnerDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OwnerDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OwnerDetails.
     */
    distinct?: OwnerDetailsScalarFieldEnum | OwnerDetailsScalarFieldEnum[]
  }

  /**
   * OwnerDetails findFirstOrThrow
   */
  export type OwnerDetailsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OwnerDetails
     */
    select?: OwnerDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OwnerDetails
     */
    omit?: OwnerDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerDetailsInclude<ExtArgs> | null
    /**
     * Filter, which OwnerDetails to fetch.
     */
    where?: OwnerDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OwnerDetails to fetch.
     */
    orderBy?: OwnerDetailsOrderByWithRelationInput | OwnerDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OwnerDetails.
     */
    cursor?: OwnerDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OwnerDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OwnerDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OwnerDetails.
     */
    distinct?: OwnerDetailsScalarFieldEnum | OwnerDetailsScalarFieldEnum[]
  }

  /**
   * OwnerDetails findMany
   */
  export type OwnerDetailsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OwnerDetails
     */
    select?: OwnerDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OwnerDetails
     */
    omit?: OwnerDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerDetailsInclude<ExtArgs> | null
    /**
     * Filter, which OwnerDetails to fetch.
     */
    where?: OwnerDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OwnerDetails to fetch.
     */
    orderBy?: OwnerDetailsOrderByWithRelationInput | OwnerDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OwnerDetails.
     */
    cursor?: OwnerDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OwnerDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OwnerDetails.
     */
    skip?: number
    distinct?: OwnerDetailsScalarFieldEnum | OwnerDetailsScalarFieldEnum[]
  }

  /**
   * OwnerDetails create
   */
  export type OwnerDetailsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OwnerDetails
     */
    select?: OwnerDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OwnerDetails
     */
    omit?: OwnerDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerDetailsInclude<ExtArgs> | null
    /**
     * The data needed to create a OwnerDetails.
     */
    data: XOR<OwnerDetailsCreateInput, OwnerDetailsUncheckedCreateInput>
  }

  /**
   * OwnerDetails createMany
   */
  export type OwnerDetailsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OwnerDetails.
     */
    data: OwnerDetailsCreateManyInput | OwnerDetailsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OwnerDetails createManyAndReturn
   */
  export type OwnerDetailsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OwnerDetails
     */
    select?: OwnerDetailsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OwnerDetails
     */
    omit?: OwnerDetailsOmit<ExtArgs> | null
    /**
     * The data used to create many OwnerDetails.
     */
    data: OwnerDetailsCreateManyInput | OwnerDetailsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerDetailsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OwnerDetails update
   */
  export type OwnerDetailsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OwnerDetails
     */
    select?: OwnerDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OwnerDetails
     */
    omit?: OwnerDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerDetailsInclude<ExtArgs> | null
    /**
     * The data needed to update a OwnerDetails.
     */
    data: XOR<OwnerDetailsUpdateInput, OwnerDetailsUncheckedUpdateInput>
    /**
     * Choose, which OwnerDetails to update.
     */
    where: OwnerDetailsWhereUniqueInput
  }

  /**
   * OwnerDetails updateMany
   */
  export type OwnerDetailsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OwnerDetails.
     */
    data: XOR<OwnerDetailsUpdateManyMutationInput, OwnerDetailsUncheckedUpdateManyInput>
    /**
     * Filter which OwnerDetails to update
     */
    where?: OwnerDetailsWhereInput
    /**
     * Limit how many OwnerDetails to update.
     */
    limit?: number
  }

  /**
   * OwnerDetails updateManyAndReturn
   */
  export type OwnerDetailsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OwnerDetails
     */
    select?: OwnerDetailsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OwnerDetails
     */
    omit?: OwnerDetailsOmit<ExtArgs> | null
    /**
     * The data used to update OwnerDetails.
     */
    data: XOR<OwnerDetailsUpdateManyMutationInput, OwnerDetailsUncheckedUpdateManyInput>
    /**
     * Filter which OwnerDetails to update
     */
    where?: OwnerDetailsWhereInput
    /**
     * Limit how many OwnerDetails to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerDetailsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OwnerDetails upsert
   */
  export type OwnerDetailsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OwnerDetails
     */
    select?: OwnerDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OwnerDetails
     */
    omit?: OwnerDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerDetailsInclude<ExtArgs> | null
    /**
     * The filter to search for the OwnerDetails to update in case it exists.
     */
    where: OwnerDetailsWhereUniqueInput
    /**
     * In case the OwnerDetails found by the `where` argument doesn't exist, create a new OwnerDetails with this data.
     */
    create: XOR<OwnerDetailsCreateInput, OwnerDetailsUncheckedCreateInput>
    /**
     * In case the OwnerDetails was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OwnerDetailsUpdateInput, OwnerDetailsUncheckedUpdateInput>
  }

  /**
   * OwnerDetails delete
   */
  export type OwnerDetailsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OwnerDetails
     */
    select?: OwnerDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OwnerDetails
     */
    omit?: OwnerDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerDetailsInclude<ExtArgs> | null
    /**
     * Filter which OwnerDetails to delete.
     */
    where: OwnerDetailsWhereUniqueInput
  }

  /**
   * OwnerDetails deleteMany
   */
  export type OwnerDetailsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OwnerDetails to delete
     */
    where?: OwnerDetailsWhereInput
    /**
     * Limit how many OwnerDetails to delete.
     */
    limit?: number
  }

  /**
   * OwnerDetails without action
   */
  export type OwnerDetailsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OwnerDetails
     */
    select?: OwnerDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OwnerDetails
     */
    omit?: OwnerDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerDetailsInclude<ExtArgs> | null
  }


  /**
   * Model AdminDetails
   */

  export type AggregateAdminDetails = {
    _count: AdminDetailsCountAggregateOutputType | null
    _avg: AdminDetailsAvgAggregateOutputType | null
    _sum: AdminDetailsSumAggregateOutputType | null
    _min: AdminDetailsMinAggregateOutputType | null
    _max: AdminDetailsMaxAggregateOutputType | null
  }

  export type AdminDetailsAvgAggregateOutputType = {
    accessLevel: number | null
  }

  export type AdminDetailsSumAggregateOutputType = {
    accessLevel: number | null
  }

  export type AdminDetailsMinAggregateOutputType = {
    id: string | null
    userId: string | null
    employeeId: string | null
    department: string | null
    accessLevel: number | null
    assignedZone: string | null
    createdAt: Date | null
  }

  export type AdminDetailsMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    employeeId: string | null
    department: string | null
    accessLevel: number | null
    assignedZone: string | null
    createdAt: Date | null
  }

  export type AdminDetailsCountAggregateOutputType = {
    id: number
    userId: number
    employeeId: number
    department: number
    accessLevel: number
    assignedZone: number
    createdAt: number
    _all: number
  }


  export type AdminDetailsAvgAggregateInputType = {
    accessLevel?: true
  }

  export type AdminDetailsSumAggregateInputType = {
    accessLevel?: true
  }

  export type AdminDetailsMinAggregateInputType = {
    id?: true
    userId?: true
    employeeId?: true
    department?: true
    accessLevel?: true
    assignedZone?: true
    createdAt?: true
  }

  export type AdminDetailsMaxAggregateInputType = {
    id?: true
    userId?: true
    employeeId?: true
    department?: true
    accessLevel?: true
    assignedZone?: true
    createdAt?: true
  }

  export type AdminDetailsCountAggregateInputType = {
    id?: true
    userId?: true
    employeeId?: true
    department?: true
    accessLevel?: true
    assignedZone?: true
    createdAt?: true
    _all?: true
  }

  export type AdminDetailsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminDetails to aggregate.
     */
    where?: AdminDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminDetails to fetch.
     */
    orderBy?: AdminDetailsOrderByWithRelationInput | AdminDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdminDetails
    **/
    _count?: true | AdminDetailsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminDetailsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminDetailsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminDetailsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminDetailsMaxAggregateInputType
  }

  export type GetAdminDetailsAggregateType<T extends AdminDetailsAggregateArgs> = {
        [P in keyof T & keyof AggregateAdminDetails]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdminDetails[P]>
      : GetScalarType<T[P], AggregateAdminDetails[P]>
  }




  export type AdminDetailsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminDetailsWhereInput
    orderBy?: AdminDetailsOrderByWithAggregationInput | AdminDetailsOrderByWithAggregationInput[]
    by: AdminDetailsScalarFieldEnum[] | AdminDetailsScalarFieldEnum
    having?: AdminDetailsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminDetailsCountAggregateInputType | true
    _avg?: AdminDetailsAvgAggregateInputType
    _sum?: AdminDetailsSumAggregateInputType
    _min?: AdminDetailsMinAggregateInputType
    _max?: AdminDetailsMaxAggregateInputType
  }

  export type AdminDetailsGroupByOutputType = {
    id: string
    userId: string
    employeeId: string
    department: string
    accessLevel: number
    assignedZone: string | null
    createdAt: Date
    _count: AdminDetailsCountAggregateOutputType | null
    _avg: AdminDetailsAvgAggregateOutputType | null
    _sum: AdminDetailsSumAggregateOutputType | null
    _min: AdminDetailsMinAggregateOutputType | null
    _max: AdminDetailsMaxAggregateOutputType | null
  }

  type GetAdminDetailsGroupByPayload<T extends AdminDetailsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminDetailsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminDetailsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminDetailsGroupByOutputType[P]>
            : GetScalarType<T[P], AdminDetailsGroupByOutputType[P]>
        }
      >
    >


  export type AdminDetailsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    employeeId?: boolean
    department?: boolean
    accessLevel?: boolean
    assignedZone?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminDetails"]>

  export type AdminDetailsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    employeeId?: boolean
    department?: boolean
    accessLevel?: boolean
    assignedZone?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminDetails"]>

  export type AdminDetailsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    employeeId?: boolean
    department?: boolean
    accessLevel?: boolean
    assignedZone?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminDetails"]>

  export type AdminDetailsSelectScalar = {
    id?: boolean
    userId?: boolean
    employeeId?: boolean
    department?: boolean
    accessLevel?: boolean
    assignedZone?: boolean
    createdAt?: boolean
  }

  export type AdminDetailsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "employeeId" | "department" | "accessLevel" | "assignedZone" | "createdAt", ExtArgs["result"]["adminDetails"]>
  export type AdminDetailsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AdminDetailsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AdminDetailsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AdminDetailsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdminDetails"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      employeeId: string
      department: string
      accessLevel: number
      assignedZone: string | null
      createdAt: Date
    }, ExtArgs["result"]["adminDetails"]>
    composites: {}
  }

  type AdminDetailsGetPayload<S extends boolean | null | undefined | AdminDetailsDefaultArgs> = $Result.GetResult<Prisma.$AdminDetailsPayload, S>

  type AdminDetailsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminDetailsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminDetailsCountAggregateInputType | true
    }

  export interface AdminDetailsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdminDetails'], meta: { name: 'AdminDetails' } }
    /**
     * Find zero or one AdminDetails that matches the filter.
     * @param {AdminDetailsFindUniqueArgs} args - Arguments to find a AdminDetails
     * @example
     * // Get one AdminDetails
     * const adminDetails = await prisma.adminDetails.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminDetailsFindUniqueArgs>(args: SelectSubset<T, AdminDetailsFindUniqueArgs<ExtArgs>>): Prisma__AdminDetailsClient<$Result.GetResult<Prisma.$AdminDetailsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AdminDetails that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminDetailsFindUniqueOrThrowArgs} args - Arguments to find a AdminDetails
     * @example
     * // Get one AdminDetails
     * const adminDetails = await prisma.adminDetails.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminDetailsFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminDetailsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminDetailsClient<$Result.GetResult<Prisma.$AdminDetailsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminDetailsFindFirstArgs} args - Arguments to find a AdminDetails
     * @example
     * // Get one AdminDetails
     * const adminDetails = await prisma.adminDetails.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminDetailsFindFirstArgs>(args?: SelectSubset<T, AdminDetailsFindFirstArgs<ExtArgs>>): Prisma__AdminDetailsClient<$Result.GetResult<Prisma.$AdminDetailsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminDetails that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminDetailsFindFirstOrThrowArgs} args - Arguments to find a AdminDetails
     * @example
     * // Get one AdminDetails
     * const adminDetails = await prisma.adminDetails.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminDetailsFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminDetailsFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminDetailsClient<$Result.GetResult<Prisma.$AdminDetailsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AdminDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminDetailsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdminDetails
     * const adminDetails = await prisma.adminDetails.findMany()
     * 
     * // Get first 10 AdminDetails
     * const adminDetails = await prisma.adminDetails.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminDetailsWithIdOnly = await prisma.adminDetails.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminDetailsFindManyArgs>(args?: SelectSubset<T, AdminDetailsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminDetailsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AdminDetails.
     * @param {AdminDetailsCreateArgs} args - Arguments to create a AdminDetails.
     * @example
     * // Create one AdminDetails
     * const AdminDetails = await prisma.adminDetails.create({
     *   data: {
     *     // ... data to create a AdminDetails
     *   }
     * })
     * 
     */
    create<T extends AdminDetailsCreateArgs>(args: SelectSubset<T, AdminDetailsCreateArgs<ExtArgs>>): Prisma__AdminDetailsClient<$Result.GetResult<Prisma.$AdminDetailsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AdminDetails.
     * @param {AdminDetailsCreateManyArgs} args - Arguments to create many AdminDetails.
     * @example
     * // Create many AdminDetails
     * const adminDetails = await prisma.adminDetails.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminDetailsCreateManyArgs>(args?: SelectSubset<T, AdminDetailsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AdminDetails and returns the data saved in the database.
     * @param {AdminDetailsCreateManyAndReturnArgs} args - Arguments to create many AdminDetails.
     * @example
     * // Create many AdminDetails
     * const adminDetails = await prisma.adminDetails.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AdminDetails and only return the `id`
     * const adminDetailsWithIdOnly = await prisma.adminDetails.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminDetailsCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminDetailsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminDetailsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AdminDetails.
     * @param {AdminDetailsDeleteArgs} args - Arguments to delete one AdminDetails.
     * @example
     * // Delete one AdminDetails
     * const AdminDetails = await prisma.adminDetails.delete({
     *   where: {
     *     // ... filter to delete one AdminDetails
     *   }
     * })
     * 
     */
    delete<T extends AdminDetailsDeleteArgs>(args: SelectSubset<T, AdminDetailsDeleteArgs<ExtArgs>>): Prisma__AdminDetailsClient<$Result.GetResult<Prisma.$AdminDetailsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AdminDetails.
     * @param {AdminDetailsUpdateArgs} args - Arguments to update one AdminDetails.
     * @example
     * // Update one AdminDetails
     * const adminDetails = await prisma.adminDetails.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminDetailsUpdateArgs>(args: SelectSubset<T, AdminDetailsUpdateArgs<ExtArgs>>): Prisma__AdminDetailsClient<$Result.GetResult<Prisma.$AdminDetailsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AdminDetails.
     * @param {AdminDetailsDeleteManyArgs} args - Arguments to filter AdminDetails to delete.
     * @example
     * // Delete a few AdminDetails
     * const { count } = await prisma.adminDetails.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminDetailsDeleteManyArgs>(args?: SelectSubset<T, AdminDetailsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminDetailsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdminDetails
     * const adminDetails = await prisma.adminDetails.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminDetailsUpdateManyArgs>(args: SelectSubset<T, AdminDetailsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminDetails and returns the data updated in the database.
     * @param {AdminDetailsUpdateManyAndReturnArgs} args - Arguments to update many AdminDetails.
     * @example
     * // Update many AdminDetails
     * const adminDetails = await prisma.adminDetails.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AdminDetails and only return the `id`
     * const adminDetailsWithIdOnly = await prisma.adminDetails.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminDetailsUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminDetailsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminDetailsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AdminDetails.
     * @param {AdminDetailsUpsertArgs} args - Arguments to update or create a AdminDetails.
     * @example
     * // Update or create a AdminDetails
     * const adminDetails = await prisma.adminDetails.upsert({
     *   create: {
     *     // ... data to create a AdminDetails
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdminDetails we want to update
     *   }
     * })
     */
    upsert<T extends AdminDetailsUpsertArgs>(args: SelectSubset<T, AdminDetailsUpsertArgs<ExtArgs>>): Prisma__AdminDetailsClient<$Result.GetResult<Prisma.$AdminDetailsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AdminDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminDetailsCountArgs} args - Arguments to filter AdminDetails to count.
     * @example
     * // Count the number of AdminDetails
     * const count = await prisma.adminDetails.count({
     *   where: {
     *     // ... the filter for the AdminDetails we want to count
     *   }
     * })
    **/
    count<T extends AdminDetailsCountArgs>(
      args?: Subset<T, AdminDetailsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminDetailsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdminDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminDetailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminDetailsAggregateArgs>(args: Subset<T, AdminDetailsAggregateArgs>): Prisma.PrismaPromise<GetAdminDetailsAggregateType<T>>

    /**
     * Group by AdminDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminDetailsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminDetailsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminDetailsGroupByArgs['orderBy'] }
        : { orderBy?: AdminDetailsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminDetailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminDetailsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdminDetails model
   */
  readonly fields: AdminDetailsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdminDetails.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminDetailsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AdminDetails model
   */
  interface AdminDetailsFieldRefs {
    readonly id: FieldRef<"AdminDetails", 'String'>
    readonly userId: FieldRef<"AdminDetails", 'String'>
    readonly employeeId: FieldRef<"AdminDetails", 'String'>
    readonly department: FieldRef<"AdminDetails", 'String'>
    readonly accessLevel: FieldRef<"AdminDetails", 'Int'>
    readonly assignedZone: FieldRef<"AdminDetails", 'String'>
    readonly createdAt: FieldRef<"AdminDetails", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AdminDetails findUnique
   */
  export type AdminDetailsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminDetails
     */
    select?: AdminDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminDetails
     */
    omit?: AdminDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminDetailsInclude<ExtArgs> | null
    /**
     * Filter, which AdminDetails to fetch.
     */
    where: AdminDetailsWhereUniqueInput
  }

  /**
   * AdminDetails findUniqueOrThrow
   */
  export type AdminDetailsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminDetails
     */
    select?: AdminDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminDetails
     */
    omit?: AdminDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminDetailsInclude<ExtArgs> | null
    /**
     * Filter, which AdminDetails to fetch.
     */
    where: AdminDetailsWhereUniqueInput
  }

  /**
   * AdminDetails findFirst
   */
  export type AdminDetailsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminDetails
     */
    select?: AdminDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminDetails
     */
    omit?: AdminDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminDetailsInclude<ExtArgs> | null
    /**
     * Filter, which AdminDetails to fetch.
     */
    where?: AdminDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminDetails to fetch.
     */
    orderBy?: AdminDetailsOrderByWithRelationInput | AdminDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminDetails.
     */
    cursor?: AdminDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminDetails.
     */
    distinct?: AdminDetailsScalarFieldEnum | AdminDetailsScalarFieldEnum[]
  }

  /**
   * AdminDetails findFirstOrThrow
   */
  export type AdminDetailsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminDetails
     */
    select?: AdminDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminDetails
     */
    omit?: AdminDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminDetailsInclude<ExtArgs> | null
    /**
     * Filter, which AdminDetails to fetch.
     */
    where?: AdminDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminDetails to fetch.
     */
    orderBy?: AdminDetailsOrderByWithRelationInput | AdminDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminDetails.
     */
    cursor?: AdminDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminDetails.
     */
    distinct?: AdminDetailsScalarFieldEnum | AdminDetailsScalarFieldEnum[]
  }

  /**
   * AdminDetails findMany
   */
  export type AdminDetailsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminDetails
     */
    select?: AdminDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminDetails
     */
    omit?: AdminDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminDetailsInclude<ExtArgs> | null
    /**
     * Filter, which AdminDetails to fetch.
     */
    where?: AdminDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminDetails to fetch.
     */
    orderBy?: AdminDetailsOrderByWithRelationInput | AdminDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdminDetails.
     */
    cursor?: AdminDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminDetails.
     */
    skip?: number
    distinct?: AdminDetailsScalarFieldEnum | AdminDetailsScalarFieldEnum[]
  }

  /**
   * AdminDetails create
   */
  export type AdminDetailsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminDetails
     */
    select?: AdminDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminDetails
     */
    omit?: AdminDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminDetailsInclude<ExtArgs> | null
    /**
     * The data needed to create a AdminDetails.
     */
    data: XOR<AdminDetailsCreateInput, AdminDetailsUncheckedCreateInput>
  }

  /**
   * AdminDetails createMany
   */
  export type AdminDetailsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdminDetails.
     */
    data: AdminDetailsCreateManyInput | AdminDetailsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdminDetails createManyAndReturn
   */
  export type AdminDetailsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminDetails
     */
    select?: AdminDetailsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminDetails
     */
    omit?: AdminDetailsOmit<ExtArgs> | null
    /**
     * The data used to create many AdminDetails.
     */
    data: AdminDetailsCreateManyInput | AdminDetailsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminDetailsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdminDetails update
   */
  export type AdminDetailsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminDetails
     */
    select?: AdminDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminDetails
     */
    omit?: AdminDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminDetailsInclude<ExtArgs> | null
    /**
     * The data needed to update a AdminDetails.
     */
    data: XOR<AdminDetailsUpdateInput, AdminDetailsUncheckedUpdateInput>
    /**
     * Choose, which AdminDetails to update.
     */
    where: AdminDetailsWhereUniqueInput
  }

  /**
   * AdminDetails updateMany
   */
  export type AdminDetailsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdminDetails.
     */
    data: XOR<AdminDetailsUpdateManyMutationInput, AdminDetailsUncheckedUpdateManyInput>
    /**
     * Filter which AdminDetails to update
     */
    where?: AdminDetailsWhereInput
    /**
     * Limit how many AdminDetails to update.
     */
    limit?: number
  }

  /**
   * AdminDetails updateManyAndReturn
   */
  export type AdminDetailsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminDetails
     */
    select?: AdminDetailsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AdminDetails
     */
    omit?: AdminDetailsOmit<ExtArgs> | null
    /**
     * The data used to update AdminDetails.
     */
    data: XOR<AdminDetailsUpdateManyMutationInput, AdminDetailsUncheckedUpdateManyInput>
    /**
     * Filter which AdminDetails to update
     */
    where?: AdminDetailsWhereInput
    /**
     * Limit how many AdminDetails to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminDetailsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdminDetails upsert
   */
  export type AdminDetailsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminDetails
     */
    select?: AdminDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminDetails
     */
    omit?: AdminDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminDetailsInclude<ExtArgs> | null
    /**
     * The filter to search for the AdminDetails to update in case it exists.
     */
    where: AdminDetailsWhereUniqueInput
    /**
     * In case the AdminDetails found by the `where` argument doesn't exist, create a new AdminDetails with this data.
     */
    create: XOR<AdminDetailsCreateInput, AdminDetailsUncheckedCreateInput>
    /**
     * In case the AdminDetails was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminDetailsUpdateInput, AdminDetailsUncheckedUpdateInput>
  }

  /**
   * AdminDetails delete
   */
  export type AdminDetailsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminDetails
     */
    select?: AdminDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminDetails
     */
    omit?: AdminDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminDetailsInclude<ExtArgs> | null
    /**
     * Filter which AdminDetails to delete.
     */
    where: AdminDetailsWhereUniqueInput
  }

  /**
   * AdminDetails deleteMany
   */
  export type AdminDetailsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminDetails to delete
     */
    where?: AdminDetailsWhereInput
    /**
     * Limit how many AdminDetails to delete.
     */
    limit?: number
  }

  /**
   * AdminDetails without action
   */
  export type AdminDetailsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminDetails
     */
    select?: AdminDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminDetails
     */
    omit?: AdminDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminDetailsInclude<ExtArgs> | null
  }


  /**
   * Model StationMasterDetails
   */

  export type AggregateStationMasterDetails = {
    _count: StationMasterDetailsCountAggregateOutputType | null
    _avg: StationMasterDetailsAvgAggregateOutputType | null
    _sum: StationMasterDetailsSumAggregateOutputType | null
    _min: StationMasterDetailsMinAggregateOutputType | null
    _max: StationMasterDetailsMaxAggregateOutputType | null
  }

  export type StationMasterDetailsAvgAggregateOutputType = {
    experience: number | null
  }

  export type StationMasterDetailsSumAggregateOutputType = {
    experience: number | null
  }

  export type StationMasterDetailsMinAggregateOutputType = {
    id: string | null
    userId: string | null
    stationId: string | null
    ownerId: string | null
    shift: string | null
    experience: number | null
    certification: string | null
    createdAt: Date | null
  }

  export type StationMasterDetailsMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    stationId: string | null
    ownerId: string | null
    shift: string | null
    experience: number | null
    certification: string | null
    createdAt: Date | null
  }

  export type StationMasterDetailsCountAggregateOutputType = {
    id: number
    userId: number
    stationId: number
    ownerId: number
    shift: number
    experience: number
    certification: number
    createdAt: number
    _all: number
  }


  export type StationMasterDetailsAvgAggregateInputType = {
    experience?: true
  }

  export type StationMasterDetailsSumAggregateInputType = {
    experience?: true
  }

  export type StationMasterDetailsMinAggregateInputType = {
    id?: true
    userId?: true
    stationId?: true
    ownerId?: true
    shift?: true
    experience?: true
    certification?: true
    createdAt?: true
  }

  export type StationMasterDetailsMaxAggregateInputType = {
    id?: true
    userId?: true
    stationId?: true
    ownerId?: true
    shift?: true
    experience?: true
    certification?: true
    createdAt?: true
  }

  export type StationMasterDetailsCountAggregateInputType = {
    id?: true
    userId?: true
    stationId?: true
    ownerId?: true
    shift?: true
    experience?: true
    certification?: true
    createdAt?: true
    _all?: true
  }

  export type StationMasterDetailsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StationMasterDetails to aggregate.
     */
    where?: StationMasterDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StationMasterDetails to fetch.
     */
    orderBy?: StationMasterDetailsOrderByWithRelationInput | StationMasterDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StationMasterDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StationMasterDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StationMasterDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StationMasterDetails
    **/
    _count?: true | StationMasterDetailsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StationMasterDetailsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StationMasterDetailsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StationMasterDetailsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StationMasterDetailsMaxAggregateInputType
  }

  export type GetStationMasterDetailsAggregateType<T extends StationMasterDetailsAggregateArgs> = {
        [P in keyof T & keyof AggregateStationMasterDetails]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStationMasterDetails[P]>
      : GetScalarType<T[P], AggregateStationMasterDetails[P]>
  }




  export type StationMasterDetailsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StationMasterDetailsWhereInput
    orderBy?: StationMasterDetailsOrderByWithAggregationInput | StationMasterDetailsOrderByWithAggregationInput[]
    by: StationMasterDetailsScalarFieldEnum[] | StationMasterDetailsScalarFieldEnum
    having?: StationMasterDetailsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StationMasterDetailsCountAggregateInputType | true
    _avg?: StationMasterDetailsAvgAggregateInputType
    _sum?: StationMasterDetailsSumAggregateInputType
    _min?: StationMasterDetailsMinAggregateInputType
    _max?: StationMasterDetailsMaxAggregateInputType
  }

  export type StationMasterDetailsGroupByOutputType = {
    id: string
    userId: string
    stationId: string
    ownerId: string
    shift: string
    experience: number | null
    certification: string | null
    createdAt: Date
    _count: StationMasterDetailsCountAggregateOutputType | null
    _avg: StationMasterDetailsAvgAggregateOutputType | null
    _sum: StationMasterDetailsSumAggregateOutputType | null
    _min: StationMasterDetailsMinAggregateOutputType | null
    _max: StationMasterDetailsMaxAggregateOutputType | null
  }

  type GetStationMasterDetailsGroupByPayload<T extends StationMasterDetailsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StationMasterDetailsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StationMasterDetailsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StationMasterDetailsGroupByOutputType[P]>
            : GetScalarType<T[P], StationMasterDetailsGroupByOutputType[P]>
        }
      >
    >


  export type StationMasterDetailsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    stationId?: boolean
    ownerId?: boolean
    shift?: boolean
    experience?: boolean
    certification?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stationMasterDetails"]>

  export type StationMasterDetailsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    stationId?: boolean
    ownerId?: boolean
    shift?: boolean
    experience?: boolean
    certification?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stationMasterDetails"]>

  export type StationMasterDetailsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    stationId?: boolean
    ownerId?: boolean
    shift?: boolean
    experience?: boolean
    certification?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stationMasterDetails"]>

  export type StationMasterDetailsSelectScalar = {
    id?: boolean
    userId?: boolean
    stationId?: boolean
    ownerId?: boolean
    shift?: boolean
    experience?: boolean
    certification?: boolean
    createdAt?: boolean
  }

  export type StationMasterDetailsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "stationId" | "ownerId" | "shift" | "experience" | "certification" | "createdAt", ExtArgs["result"]["stationMasterDetails"]>
  export type StationMasterDetailsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StationMasterDetailsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StationMasterDetailsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StationMasterDetailsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StationMasterDetails"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      station: Prisma.$StationPayload<ExtArgs>
      owner: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      stationId: string
      ownerId: string
      shift: string
      experience: number | null
      certification: string | null
      createdAt: Date
    }, ExtArgs["result"]["stationMasterDetails"]>
    composites: {}
  }

  type StationMasterDetailsGetPayload<S extends boolean | null | undefined | StationMasterDetailsDefaultArgs> = $Result.GetResult<Prisma.$StationMasterDetailsPayload, S>

  type StationMasterDetailsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StationMasterDetailsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StationMasterDetailsCountAggregateInputType | true
    }

  export interface StationMasterDetailsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StationMasterDetails'], meta: { name: 'StationMasterDetails' } }
    /**
     * Find zero or one StationMasterDetails that matches the filter.
     * @param {StationMasterDetailsFindUniqueArgs} args - Arguments to find a StationMasterDetails
     * @example
     * // Get one StationMasterDetails
     * const stationMasterDetails = await prisma.stationMasterDetails.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StationMasterDetailsFindUniqueArgs>(args: SelectSubset<T, StationMasterDetailsFindUniqueArgs<ExtArgs>>): Prisma__StationMasterDetailsClient<$Result.GetResult<Prisma.$StationMasterDetailsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StationMasterDetails that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StationMasterDetailsFindUniqueOrThrowArgs} args - Arguments to find a StationMasterDetails
     * @example
     * // Get one StationMasterDetails
     * const stationMasterDetails = await prisma.stationMasterDetails.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StationMasterDetailsFindUniqueOrThrowArgs>(args: SelectSubset<T, StationMasterDetailsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StationMasterDetailsClient<$Result.GetResult<Prisma.$StationMasterDetailsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StationMasterDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationMasterDetailsFindFirstArgs} args - Arguments to find a StationMasterDetails
     * @example
     * // Get one StationMasterDetails
     * const stationMasterDetails = await prisma.stationMasterDetails.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StationMasterDetailsFindFirstArgs>(args?: SelectSubset<T, StationMasterDetailsFindFirstArgs<ExtArgs>>): Prisma__StationMasterDetailsClient<$Result.GetResult<Prisma.$StationMasterDetailsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StationMasterDetails that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationMasterDetailsFindFirstOrThrowArgs} args - Arguments to find a StationMasterDetails
     * @example
     * // Get one StationMasterDetails
     * const stationMasterDetails = await prisma.stationMasterDetails.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StationMasterDetailsFindFirstOrThrowArgs>(args?: SelectSubset<T, StationMasterDetailsFindFirstOrThrowArgs<ExtArgs>>): Prisma__StationMasterDetailsClient<$Result.GetResult<Prisma.$StationMasterDetailsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StationMasterDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationMasterDetailsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StationMasterDetails
     * const stationMasterDetails = await prisma.stationMasterDetails.findMany()
     * 
     * // Get first 10 StationMasterDetails
     * const stationMasterDetails = await prisma.stationMasterDetails.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stationMasterDetailsWithIdOnly = await prisma.stationMasterDetails.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StationMasterDetailsFindManyArgs>(args?: SelectSubset<T, StationMasterDetailsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StationMasterDetailsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StationMasterDetails.
     * @param {StationMasterDetailsCreateArgs} args - Arguments to create a StationMasterDetails.
     * @example
     * // Create one StationMasterDetails
     * const StationMasterDetails = await prisma.stationMasterDetails.create({
     *   data: {
     *     // ... data to create a StationMasterDetails
     *   }
     * })
     * 
     */
    create<T extends StationMasterDetailsCreateArgs>(args: SelectSubset<T, StationMasterDetailsCreateArgs<ExtArgs>>): Prisma__StationMasterDetailsClient<$Result.GetResult<Prisma.$StationMasterDetailsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StationMasterDetails.
     * @param {StationMasterDetailsCreateManyArgs} args - Arguments to create many StationMasterDetails.
     * @example
     * // Create many StationMasterDetails
     * const stationMasterDetails = await prisma.stationMasterDetails.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StationMasterDetailsCreateManyArgs>(args?: SelectSubset<T, StationMasterDetailsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StationMasterDetails and returns the data saved in the database.
     * @param {StationMasterDetailsCreateManyAndReturnArgs} args - Arguments to create many StationMasterDetails.
     * @example
     * // Create many StationMasterDetails
     * const stationMasterDetails = await prisma.stationMasterDetails.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StationMasterDetails and only return the `id`
     * const stationMasterDetailsWithIdOnly = await prisma.stationMasterDetails.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StationMasterDetailsCreateManyAndReturnArgs>(args?: SelectSubset<T, StationMasterDetailsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StationMasterDetailsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StationMasterDetails.
     * @param {StationMasterDetailsDeleteArgs} args - Arguments to delete one StationMasterDetails.
     * @example
     * // Delete one StationMasterDetails
     * const StationMasterDetails = await prisma.stationMasterDetails.delete({
     *   where: {
     *     // ... filter to delete one StationMasterDetails
     *   }
     * })
     * 
     */
    delete<T extends StationMasterDetailsDeleteArgs>(args: SelectSubset<T, StationMasterDetailsDeleteArgs<ExtArgs>>): Prisma__StationMasterDetailsClient<$Result.GetResult<Prisma.$StationMasterDetailsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StationMasterDetails.
     * @param {StationMasterDetailsUpdateArgs} args - Arguments to update one StationMasterDetails.
     * @example
     * // Update one StationMasterDetails
     * const stationMasterDetails = await prisma.stationMasterDetails.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StationMasterDetailsUpdateArgs>(args: SelectSubset<T, StationMasterDetailsUpdateArgs<ExtArgs>>): Prisma__StationMasterDetailsClient<$Result.GetResult<Prisma.$StationMasterDetailsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StationMasterDetails.
     * @param {StationMasterDetailsDeleteManyArgs} args - Arguments to filter StationMasterDetails to delete.
     * @example
     * // Delete a few StationMasterDetails
     * const { count } = await prisma.stationMasterDetails.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StationMasterDetailsDeleteManyArgs>(args?: SelectSubset<T, StationMasterDetailsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StationMasterDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationMasterDetailsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StationMasterDetails
     * const stationMasterDetails = await prisma.stationMasterDetails.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StationMasterDetailsUpdateManyArgs>(args: SelectSubset<T, StationMasterDetailsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StationMasterDetails and returns the data updated in the database.
     * @param {StationMasterDetailsUpdateManyAndReturnArgs} args - Arguments to update many StationMasterDetails.
     * @example
     * // Update many StationMasterDetails
     * const stationMasterDetails = await prisma.stationMasterDetails.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StationMasterDetails and only return the `id`
     * const stationMasterDetailsWithIdOnly = await prisma.stationMasterDetails.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StationMasterDetailsUpdateManyAndReturnArgs>(args: SelectSubset<T, StationMasterDetailsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StationMasterDetailsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StationMasterDetails.
     * @param {StationMasterDetailsUpsertArgs} args - Arguments to update or create a StationMasterDetails.
     * @example
     * // Update or create a StationMasterDetails
     * const stationMasterDetails = await prisma.stationMasterDetails.upsert({
     *   create: {
     *     // ... data to create a StationMasterDetails
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StationMasterDetails we want to update
     *   }
     * })
     */
    upsert<T extends StationMasterDetailsUpsertArgs>(args: SelectSubset<T, StationMasterDetailsUpsertArgs<ExtArgs>>): Prisma__StationMasterDetailsClient<$Result.GetResult<Prisma.$StationMasterDetailsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StationMasterDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationMasterDetailsCountArgs} args - Arguments to filter StationMasterDetails to count.
     * @example
     * // Count the number of StationMasterDetails
     * const count = await prisma.stationMasterDetails.count({
     *   where: {
     *     // ... the filter for the StationMasterDetails we want to count
     *   }
     * })
    **/
    count<T extends StationMasterDetailsCountArgs>(
      args?: Subset<T, StationMasterDetailsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StationMasterDetailsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StationMasterDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationMasterDetailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StationMasterDetailsAggregateArgs>(args: Subset<T, StationMasterDetailsAggregateArgs>): Prisma.PrismaPromise<GetStationMasterDetailsAggregateType<T>>

    /**
     * Group by StationMasterDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationMasterDetailsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StationMasterDetailsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StationMasterDetailsGroupByArgs['orderBy'] }
        : { orderBy?: StationMasterDetailsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StationMasterDetailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStationMasterDetailsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StationMasterDetails model
   */
  readonly fields: StationMasterDetailsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StationMasterDetails.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StationMasterDetailsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    station<T extends StationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StationDefaultArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StationMasterDetails model
   */
  interface StationMasterDetailsFieldRefs {
    readonly id: FieldRef<"StationMasterDetails", 'String'>
    readonly userId: FieldRef<"StationMasterDetails", 'String'>
    readonly stationId: FieldRef<"StationMasterDetails", 'String'>
    readonly ownerId: FieldRef<"StationMasterDetails", 'String'>
    readonly shift: FieldRef<"StationMasterDetails", 'String'>
    readonly experience: FieldRef<"StationMasterDetails", 'Int'>
    readonly certification: FieldRef<"StationMasterDetails", 'String'>
    readonly createdAt: FieldRef<"StationMasterDetails", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StationMasterDetails findUnique
   */
  export type StationMasterDetailsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationMasterDetails
     */
    select?: StationMasterDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StationMasterDetails
     */
    omit?: StationMasterDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationMasterDetailsInclude<ExtArgs> | null
    /**
     * Filter, which StationMasterDetails to fetch.
     */
    where: StationMasterDetailsWhereUniqueInput
  }

  /**
   * StationMasterDetails findUniqueOrThrow
   */
  export type StationMasterDetailsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationMasterDetails
     */
    select?: StationMasterDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StationMasterDetails
     */
    omit?: StationMasterDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationMasterDetailsInclude<ExtArgs> | null
    /**
     * Filter, which StationMasterDetails to fetch.
     */
    where: StationMasterDetailsWhereUniqueInput
  }

  /**
   * StationMasterDetails findFirst
   */
  export type StationMasterDetailsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationMasterDetails
     */
    select?: StationMasterDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StationMasterDetails
     */
    omit?: StationMasterDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationMasterDetailsInclude<ExtArgs> | null
    /**
     * Filter, which StationMasterDetails to fetch.
     */
    where?: StationMasterDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StationMasterDetails to fetch.
     */
    orderBy?: StationMasterDetailsOrderByWithRelationInput | StationMasterDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StationMasterDetails.
     */
    cursor?: StationMasterDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StationMasterDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StationMasterDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StationMasterDetails.
     */
    distinct?: StationMasterDetailsScalarFieldEnum | StationMasterDetailsScalarFieldEnum[]
  }

  /**
   * StationMasterDetails findFirstOrThrow
   */
  export type StationMasterDetailsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationMasterDetails
     */
    select?: StationMasterDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StationMasterDetails
     */
    omit?: StationMasterDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationMasterDetailsInclude<ExtArgs> | null
    /**
     * Filter, which StationMasterDetails to fetch.
     */
    where?: StationMasterDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StationMasterDetails to fetch.
     */
    orderBy?: StationMasterDetailsOrderByWithRelationInput | StationMasterDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StationMasterDetails.
     */
    cursor?: StationMasterDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StationMasterDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StationMasterDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StationMasterDetails.
     */
    distinct?: StationMasterDetailsScalarFieldEnum | StationMasterDetailsScalarFieldEnum[]
  }

  /**
   * StationMasterDetails findMany
   */
  export type StationMasterDetailsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationMasterDetails
     */
    select?: StationMasterDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StationMasterDetails
     */
    omit?: StationMasterDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationMasterDetailsInclude<ExtArgs> | null
    /**
     * Filter, which StationMasterDetails to fetch.
     */
    where?: StationMasterDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StationMasterDetails to fetch.
     */
    orderBy?: StationMasterDetailsOrderByWithRelationInput | StationMasterDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StationMasterDetails.
     */
    cursor?: StationMasterDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StationMasterDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StationMasterDetails.
     */
    skip?: number
    distinct?: StationMasterDetailsScalarFieldEnum | StationMasterDetailsScalarFieldEnum[]
  }

  /**
   * StationMasterDetails create
   */
  export type StationMasterDetailsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationMasterDetails
     */
    select?: StationMasterDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StationMasterDetails
     */
    omit?: StationMasterDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationMasterDetailsInclude<ExtArgs> | null
    /**
     * The data needed to create a StationMasterDetails.
     */
    data: XOR<StationMasterDetailsCreateInput, StationMasterDetailsUncheckedCreateInput>
  }

  /**
   * StationMasterDetails createMany
   */
  export type StationMasterDetailsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StationMasterDetails.
     */
    data: StationMasterDetailsCreateManyInput | StationMasterDetailsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StationMasterDetails createManyAndReturn
   */
  export type StationMasterDetailsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationMasterDetails
     */
    select?: StationMasterDetailsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StationMasterDetails
     */
    omit?: StationMasterDetailsOmit<ExtArgs> | null
    /**
     * The data used to create many StationMasterDetails.
     */
    data: StationMasterDetailsCreateManyInput | StationMasterDetailsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationMasterDetailsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StationMasterDetails update
   */
  export type StationMasterDetailsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationMasterDetails
     */
    select?: StationMasterDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StationMasterDetails
     */
    omit?: StationMasterDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationMasterDetailsInclude<ExtArgs> | null
    /**
     * The data needed to update a StationMasterDetails.
     */
    data: XOR<StationMasterDetailsUpdateInput, StationMasterDetailsUncheckedUpdateInput>
    /**
     * Choose, which StationMasterDetails to update.
     */
    where: StationMasterDetailsWhereUniqueInput
  }

  /**
   * StationMasterDetails updateMany
   */
  export type StationMasterDetailsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StationMasterDetails.
     */
    data: XOR<StationMasterDetailsUpdateManyMutationInput, StationMasterDetailsUncheckedUpdateManyInput>
    /**
     * Filter which StationMasterDetails to update
     */
    where?: StationMasterDetailsWhereInput
    /**
     * Limit how many StationMasterDetails to update.
     */
    limit?: number
  }

  /**
   * StationMasterDetails updateManyAndReturn
   */
  export type StationMasterDetailsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationMasterDetails
     */
    select?: StationMasterDetailsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StationMasterDetails
     */
    omit?: StationMasterDetailsOmit<ExtArgs> | null
    /**
     * The data used to update StationMasterDetails.
     */
    data: XOR<StationMasterDetailsUpdateManyMutationInput, StationMasterDetailsUncheckedUpdateManyInput>
    /**
     * Filter which StationMasterDetails to update
     */
    where?: StationMasterDetailsWhereInput
    /**
     * Limit how many StationMasterDetails to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationMasterDetailsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StationMasterDetails upsert
   */
  export type StationMasterDetailsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationMasterDetails
     */
    select?: StationMasterDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StationMasterDetails
     */
    omit?: StationMasterDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationMasterDetailsInclude<ExtArgs> | null
    /**
     * The filter to search for the StationMasterDetails to update in case it exists.
     */
    where: StationMasterDetailsWhereUniqueInput
    /**
     * In case the StationMasterDetails found by the `where` argument doesn't exist, create a new StationMasterDetails with this data.
     */
    create: XOR<StationMasterDetailsCreateInput, StationMasterDetailsUncheckedCreateInput>
    /**
     * In case the StationMasterDetails was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StationMasterDetailsUpdateInput, StationMasterDetailsUncheckedUpdateInput>
  }

  /**
   * StationMasterDetails delete
   */
  export type StationMasterDetailsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationMasterDetails
     */
    select?: StationMasterDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StationMasterDetails
     */
    omit?: StationMasterDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationMasterDetailsInclude<ExtArgs> | null
    /**
     * Filter which StationMasterDetails to delete.
     */
    where: StationMasterDetailsWhereUniqueInput
  }

  /**
   * StationMasterDetails deleteMany
   */
  export type StationMasterDetailsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StationMasterDetails to delete
     */
    where?: StationMasterDetailsWhereInput
    /**
     * Limit how many StationMasterDetails to delete.
     */
    limit?: number
  }

  /**
   * StationMasterDetails without action
   */
  export type StationMasterDetailsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationMasterDetails
     */
    select?: StationMasterDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StationMasterDetails
     */
    omit?: StationMasterDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationMasterDetailsInclude<ExtArgs> | null
  }


  /**
   * Model EV
   */

  export type AggregateEV = {
    _count: EVCountAggregateOutputType | null
    _avg: EVAvgAggregateOutputType | null
    _sum: EVSumAggregateOutputType | null
    _min: EVMinAggregateOutputType | null
    _max: EVMaxAggregateOutputType | null
  }

  export type EVAvgAggregateOutputType = {
    batteryCapacity: number | null
    batteryPercentage: number | null
  }

  export type EVSumAggregateOutputType = {
    batteryCapacity: number | null
    batteryPercentage: number | null
  }

  export type EVMinAggregateOutputType = {
    id: string | null
    userId: string | null
    brand: string | null
    model: string | null
    licensePlate: string | null
    batteryCapacity: number | null
    batteryPercentage: number | null
    isDefault: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EVMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    brand: string | null
    model: string | null
    licensePlate: string | null
    batteryCapacity: number | null
    batteryPercentage: number | null
    isDefault: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EVCountAggregateOutputType = {
    id: number
    userId: number
    brand: number
    model: number
    licensePlate: number
    batteryCapacity: number
    batteryPercentage: number
    isDefault: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EVAvgAggregateInputType = {
    batteryCapacity?: true
    batteryPercentage?: true
  }

  export type EVSumAggregateInputType = {
    batteryCapacity?: true
    batteryPercentage?: true
  }

  export type EVMinAggregateInputType = {
    id?: true
    userId?: true
    brand?: true
    model?: true
    licensePlate?: true
    batteryCapacity?: true
    batteryPercentage?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EVMaxAggregateInputType = {
    id?: true
    userId?: true
    brand?: true
    model?: true
    licensePlate?: true
    batteryCapacity?: true
    batteryPercentage?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EVCountAggregateInputType = {
    id?: true
    userId?: true
    brand?: true
    model?: true
    licensePlate?: true
    batteryCapacity?: true
    batteryPercentage?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EVAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EV to aggregate.
     */
    where?: EVWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EVS to fetch.
     */
    orderBy?: EVOrderByWithRelationInput | EVOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EVWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EVS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EVS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EVS
    **/
    _count?: true | EVCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EVAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EVSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EVMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EVMaxAggregateInputType
  }

  export type GetEVAggregateType<T extends EVAggregateArgs> = {
        [P in keyof T & keyof AggregateEV]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEV[P]>
      : GetScalarType<T[P], AggregateEV[P]>
  }




  export type EVGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EVWhereInput
    orderBy?: EVOrderByWithAggregationInput | EVOrderByWithAggregationInput[]
    by: EVScalarFieldEnum[] | EVScalarFieldEnum
    having?: EVScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EVCountAggregateInputType | true
    _avg?: EVAvgAggregateInputType
    _sum?: EVSumAggregateInputType
    _min?: EVMinAggregateInputType
    _max?: EVMaxAggregateInputType
  }

  export type EVGroupByOutputType = {
    id: string
    userId: string
    brand: string
    model: string
    licensePlate: string
    batteryCapacity: number
    batteryPercentage: number
    isDefault: boolean
    createdAt: Date
    updatedAt: Date
    _count: EVCountAggregateOutputType | null
    _avg: EVAvgAggregateOutputType | null
    _sum: EVSumAggregateOutputType | null
    _min: EVMinAggregateOutputType | null
    _max: EVMaxAggregateOutputType | null
  }

  type GetEVGroupByPayload<T extends EVGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EVGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EVGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EVGroupByOutputType[P]>
            : GetScalarType<T[P], EVGroupByOutputType[P]>
        }
      >
    >


  export type EVSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    brand?: boolean
    model?: boolean
    licensePlate?: boolean
    batteryCapacity?: boolean
    batteryPercentage?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eV"]>

  export type EVSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    brand?: boolean
    model?: boolean
    licensePlate?: boolean
    batteryCapacity?: boolean
    batteryPercentage?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eV"]>

  export type EVSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    brand?: boolean
    model?: boolean
    licensePlate?: boolean
    batteryCapacity?: boolean
    batteryPercentage?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eV"]>

  export type EVSelectScalar = {
    id?: boolean
    userId?: boolean
    brand?: boolean
    model?: boolean
    licensePlate?: boolean
    batteryCapacity?: boolean
    batteryPercentage?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EVOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "brand" | "model" | "licensePlate" | "batteryCapacity" | "batteryPercentage" | "isDefault" | "createdAt" | "updatedAt", ExtArgs["result"]["eV"]>
  export type EVInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EVIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EVIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $EVPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EV"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      brand: string
      model: string
      licensePlate: string
      batteryCapacity: number
      batteryPercentage: number
      isDefault: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["eV"]>
    composites: {}
  }

  type EVGetPayload<S extends boolean | null | undefined | EVDefaultArgs> = $Result.GetResult<Prisma.$EVPayload, S>

  type EVCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EVFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EVCountAggregateInputType | true
    }

  export interface EVDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EV'], meta: { name: 'EV' } }
    /**
     * Find zero or one EV that matches the filter.
     * @param {EVFindUniqueArgs} args - Arguments to find a EV
     * @example
     * // Get one EV
     * const eV = await prisma.eV.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EVFindUniqueArgs>(args: SelectSubset<T, EVFindUniqueArgs<ExtArgs>>): Prisma__EVClient<$Result.GetResult<Prisma.$EVPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EV that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EVFindUniqueOrThrowArgs} args - Arguments to find a EV
     * @example
     * // Get one EV
     * const eV = await prisma.eV.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EVFindUniqueOrThrowArgs>(args: SelectSubset<T, EVFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EVClient<$Result.GetResult<Prisma.$EVPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EV that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EVFindFirstArgs} args - Arguments to find a EV
     * @example
     * // Get one EV
     * const eV = await prisma.eV.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EVFindFirstArgs>(args?: SelectSubset<T, EVFindFirstArgs<ExtArgs>>): Prisma__EVClient<$Result.GetResult<Prisma.$EVPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EV that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EVFindFirstOrThrowArgs} args - Arguments to find a EV
     * @example
     * // Get one EV
     * const eV = await prisma.eV.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EVFindFirstOrThrowArgs>(args?: SelectSubset<T, EVFindFirstOrThrowArgs<ExtArgs>>): Prisma__EVClient<$Result.GetResult<Prisma.$EVPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EVS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EVFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EVS
     * const eVS = await prisma.eV.findMany()
     * 
     * // Get first 10 EVS
     * const eVS = await prisma.eV.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eVWithIdOnly = await prisma.eV.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EVFindManyArgs>(args?: SelectSubset<T, EVFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EVPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EV.
     * @param {EVCreateArgs} args - Arguments to create a EV.
     * @example
     * // Create one EV
     * const EV = await prisma.eV.create({
     *   data: {
     *     // ... data to create a EV
     *   }
     * })
     * 
     */
    create<T extends EVCreateArgs>(args: SelectSubset<T, EVCreateArgs<ExtArgs>>): Prisma__EVClient<$Result.GetResult<Prisma.$EVPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EVS.
     * @param {EVCreateManyArgs} args - Arguments to create many EVS.
     * @example
     * // Create many EVS
     * const eV = await prisma.eV.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EVCreateManyArgs>(args?: SelectSubset<T, EVCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EVS and returns the data saved in the database.
     * @param {EVCreateManyAndReturnArgs} args - Arguments to create many EVS.
     * @example
     * // Create many EVS
     * const eV = await prisma.eV.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EVS and only return the `id`
     * const eVWithIdOnly = await prisma.eV.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EVCreateManyAndReturnArgs>(args?: SelectSubset<T, EVCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EVPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EV.
     * @param {EVDeleteArgs} args - Arguments to delete one EV.
     * @example
     * // Delete one EV
     * const EV = await prisma.eV.delete({
     *   where: {
     *     // ... filter to delete one EV
     *   }
     * })
     * 
     */
    delete<T extends EVDeleteArgs>(args: SelectSubset<T, EVDeleteArgs<ExtArgs>>): Prisma__EVClient<$Result.GetResult<Prisma.$EVPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EV.
     * @param {EVUpdateArgs} args - Arguments to update one EV.
     * @example
     * // Update one EV
     * const eV = await prisma.eV.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EVUpdateArgs>(args: SelectSubset<T, EVUpdateArgs<ExtArgs>>): Prisma__EVClient<$Result.GetResult<Prisma.$EVPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EVS.
     * @param {EVDeleteManyArgs} args - Arguments to filter EVS to delete.
     * @example
     * // Delete a few EVS
     * const { count } = await prisma.eV.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EVDeleteManyArgs>(args?: SelectSubset<T, EVDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EVS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EVUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EVS
     * const eV = await prisma.eV.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EVUpdateManyArgs>(args: SelectSubset<T, EVUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EVS and returns the data updated in the database.
     * @param {EVUpdateManyAndReturnArgs} args - Arguments to update many EVS.
     * @example
     * // Update many EVS
     * const eV = await prisma.eV.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EVS and only return the `id`
     * const eVWithIdOnly = await prisma.eV.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EVUpdateManyAndReturnArgs>(args: SelectSubset<T, EVUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EVPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EV.
     * @param {EVUpsertArgs} args - Arguments to update or create a EV.
     * @example
     * // Update or create a EV
     * const eV = await prisma.eV.upsert({
     *   create: {
     *     // ... data to create a EV
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EV we want to update
     *   }
     * })
     */
    upsert<T extends EVUpsertArgs>(args: SelectSubset<T, EVUpsertArgs<ExtArgs>>): Prisma__EVClient<$Result.GetResult<Prisma.$EVPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EVS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EVCountArgs} args - Arguments to filter EVS to count.
     * @example
     * // Count the number of EVS
     * const count = await prisma.eV.count({
     *   where: {
     *     // ... the filter for the EVS we want to count
     *   }
     * })
    **/
    count<T extends EVCountArgs>(
      args?: Subset<T, EVCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EVCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EV.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EVAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EVAggregateArgs>(args: Subset<T, EVAggregateArgs>): Prisma.PrismaPromise<GetEVAggregateType<T>>

    /**
     * Group by EV.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EVGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EVGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EVGroupByArgs['orderBy'] }
        : { orderBy?: EVGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EVGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEVGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EV model
   */
  readonly fields: EVFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EV.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EVClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EV model
   */
  interface EVFieldRefs {
    readonly id: FieldRef<"EV", 'String'>
    readonly userId: FieldRef<"EV", 'String'>
    readonly brand: FieldRef<"EV", 'String'>
    readonly model: FieldRef<"EV", 'String'>
    readonly licensePlate: FieldRef<"EV", 'String'>
    readonly batteryCapacity: FieldRef<"EV", 'Float'>
    readonly batteryPercentage: FieldRef<"EV", 'Float'>
    readonly isDefault: FieldRef<"EV", 'Boolean'>
    readonly createdAt: FieldRef<"EV", 'DateTime'>
    readonly updatedAt: FieldRef<"EV", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EV findUnique
   */
  export type EVFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EV
     */
    select?: EVSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EV
     */
    omit?: EVOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVInclude<ExtArgs> | null
    /**
     * Filter, which EV to fetch.
     */
    where: EVWhereUniqueInput
  }

  /**
   * EV findUniqueOrThrow
   */
  export type EVFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EV
     */
    select?: EVSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EV
     */
    omit?: EVOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVInclude<ExtArgs> | null
    /**
     * Filter, which EV to fetch.
     */
    where: EVWhereUniqueInput
  }

  /**
   * EV findFirst
   */
  export type EVFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EV
     */
    select?: EVSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EV
     */
    omit?: EVOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVInclude<ExtArgs> | null
    /**
     * Filter, which EV to fetch.
     */
    where?: EVWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EVS to fetch.
     */
    orderBy?: EVOrderByWithRelationInput | EVOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EVS.
     */
    cursor?: EVWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EVS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EVS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EVS.
     */
    distinct?: EVScalarFieldEnum | EVScalarFieldEnum[]
  }

  /**
   * EV findFirstOrThrow
   */
  export type EVFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EV
     */
    select?: EVSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EV
     */
    omit?: EVOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVInclude<ExtArgs> | null
    /**
     * Filter, which EV to fetch.
     */
    where?: EVWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EVS to fetch.
     */
    orderBy?: EVOrderByWithRelationInput | EVOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EVS.
     */
    cursor?: EVWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EVS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EVS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EVS.
     */
    distinct?: EVScalarFieldEnum | EVScalarFieldEnum[]
  }

  /**
   * EV findMany
   */
  export type EVFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EV
     */
    select?: EVSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EV
     */
    omit?: EVOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVInclude<ExtArgs> | null
    /**
     * Filter, which EVS to fetch.
     */
    where?: EVWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EVS to fetch.
     */
    orderBy?: EVOrderByWithRelationInput | EVOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EVS.
     */
    cursor?: EVWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EVS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EVS.
     */
    skip?: number
    distinct?: EVScalarFieldEnum | EVScalarFieldEnum[]
  }

  /**
   * EV create
   */
  export type EVCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EV
     */
    select?: EVSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EV
     */
    omit?: EVOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVInclude<ExtArgs> | null
    /**
     * The data needed to create a EV.
     */
    data: XOR<EVCreateInput, EVUncheckedCreateInput>
  }

  /**
   * EV createMany
   */
  export type EVCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EVS.
     */
    data: EVCreateManyInput | EVCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EV createManyAndReturn
   */
  export type EVCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EV
     */
    select?: EVSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EV
     */
    omit?: EVOmit<ExtArgs> | null
    /**
     * The data used to create many EVS.
     */
    data: EVCreateManyInput | EVCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EV update
   */
  export type EVUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EV
     */
    select?: EVSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EV
     */
    omit?: EVOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVInclude<ExtArgs> | null
    /**
     * The data needed to update a EV.
     */
    data: XOR<EVUpdateInput, EVUncheckedUpdateInput>
    /**
     * Choose, which EV to update.
     */
    where: EVWhereUniqueInput
  }

  /**
   * EV updateMany
   */
  export type EVUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EVS.
     */
    data: XOR<EVUpdateManyMutationInput, EVUncheckedUpdateManyInput>
    /**
     * Filter which EVS to update
     */
    where?: EVWhereInput
    /**
     * Limit how many EVS to update.
     */
    limit?: number
  }

  /**
   * EV updateManyAndReturn
   */
  export type EVUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EV
     */
    select?: EVSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EV
     */
    omit?: EVOmit<ExtArgs> | null
    /**
     * The data used to update EVS.
     */
    data: XOR<EVUpdateManyMutationInput, EVUncheckedUpdateManyInput>
    /**
     * Filter which EVS to update
     */
    where?: EVWhereInput
    /**
     * Limit how many EVS to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EV upsert
   */
  export type EVUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EV
     */
    select?: EVSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EV
     */
    omit?: EVOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVInclude<ExtArgs> | null
    /**
     * The filter to search for the EV to update in case it exists.
     */
    where: EVWhereUniqueInput
    /**
     * In case the EV found by the `where` argument doesn't exist, create a new EV with this data.
     */
    create: XOR<EVCreateInput, EVUncheckedCreateInput>
    /**
     * In case the EV was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EVUpdateInput, EVUncheckedUpdateInput>
  }

  /**
   * EV delete
   */
  export type EVDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EV
     */
    select?: EVSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EV
     */
    omit?: EVOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVInclude<ExtArgs> | null
    /**
     * Filter which EV to delete.
     */
    where: EVWhereUniqueInput
  }

  /**
   * EV deleteMany
   */
  export type EVDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EVS to delete
     */
    where?: EVWhereInput
    /**
     * Limit how many EVS to delete.
     */
    limit?: number
  }

  /**
   * EV without action
   */
  export type EVDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EV
     */
    select?: EVSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EV
     */
    omit?: EVOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EVInclude<ExtArgs> | null
  }


  /**
   * Model Station
   */

  export type AggregateStation = {
    _count: StationCountAggregateOutputType | null
    _avg: StationAvgAggregateOutputType | null
    _sum: StationSumAggregateOutputType | null
    _min: StationMinAggregateOutputType | null
    _max: StationMaxAggregateOutputType | null
  }

  export type StationAvgAggregateOutputType = {
    latitude: number | null
    longitude: number | null
    totalSlots: number | null
    availableSlots: number | null
  }

  export type StationSumAggregateOutputType = {
    latitude: number | null
    longitude: number | null
    totalSlots: number | null
    availableSlots: number | null
  }

  export type StationMinAggregateOutputType = {
    id: string | null
    name: string | null
    companyName: string | null
    ownerType: $Enums.OwnerType | null
    ownerId: string | null
    address: string | null
    latitude: number | null
    longitude: number | null
    totalSlots: number | null
    availableSlots: number | null
    contact: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    companyName: string | null
    ownerType: $Enums.OwnerType | null
    ownerId: string | null
    address: string | null
    latitude: number | null
    longitude: number | null
    totalSlots: number | null
    availableSlots: number | null
    contact: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StationCountAggregateOutputType = {
    id: number
    name: number
    companyName: number
    ownerType: number
    ownerId: number
    address: number
    latitude: number
    longitude: number
    totalSlots: number
    availableSlots: number
    contact: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StationAvgAggregateInputType = {
    latitude?: true
    longitude?: true
    totalSlots?: true
    availableSlots?: true
  }

  export type StationSumAggregateInputType = {
    latitude?: true
    longitude?: true
    totalSlots?: true
    availableSlots?: true
  }

  export type StationMinAggregateInputType = {
    id?: true
    name?: true
    companyName?: true
    ownerType?: true
    ownerId?: true
    address?: true
    latitude?: true
    longitude?: true
    totalSlots?: true
    availableSlots?: true
    contact?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StationMaxAggregateInputType = {
    id?: true
    name?: true
    companyName?: true
    ownerType?: true
    ownerId?: true
    address?: true
    latitude?: true
    longitude?: true
    totalSlots?: true
    availableSlots?: true
    contact?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StationCountAggregateInputType = {
    id?: true
    name?: true
    companyName?: true
    ownerType?: true
    ownerId?: true
    address?: true
    latitude?: true
    longitude?: true
    totalSlots?: true
    availableSlots?: true
    contact?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Station to aggregate.
     */
    where?: StationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stations to fetch.
     */
    orderBy?: StationOrderByWithRelationInput | StationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stations
    **/
    _count?: true | StationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StationMaxAggregateInputType
  }

  export type GetStationAggregateType<T extends StationAggregateArgs> = {
        [P in keyof T & keyof AggregateStation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStation[P]>
      : GetScalarType<T[P], AggregateStation[P]>
  }




  export type StationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StationWhereInput
    orderBy?: StationOrderByWithAggregationInput | StationOrderByWithAggregationInput[]
    by: StationScalarFieldEnum[] | StationScalarFieldEnum
    having?: StationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StationCountAggregateInputType | true
    _avg?: StationAvgAggregateInputType
    _sum?: StationSumAggregateInputType
    _min?: StationMinAggregateInputType
    _max?: StationMaxAggregateInputType
  }

  export type StationGroupByOutputType = {
    id: string
    name: string
    companyName: string | null
    ownerType: $Enums.OwnerType
    ownerId: string
    address: string
    latitude: number
    longitude: number
    totalSlots: number
    availableSlots: number
    contact: string | null
    createdAt: Date
    updatedAt: Date
    _count: StationCountAggregateOutputType | null
    _avg: StationAvgAggregateOutputType | null
    _sum: StationSumAggregateOutputType | null
    _min: StationMinAggregateOutputType | null
    _max: StationMaxAggregateOutputType | null
  }

  type GetStationGroupByPayload<T extends StationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StationGroupByOutputType[P]>
            : GetScalarType<T[P], StationGroupByOutputType[P]>
        }
      >
    >


  export type StationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    companyName?: boolean
    ownerType?: boolean
    ownerId?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    totalSlots?: boolean
    availableSlots?: boolean
    contact?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    stationMasters?: boolean | Station$stationMastersArgs<ExtArgs>
    bookings?: boolean | Station$bookingsArgs<ExtArgs>
    chargingSlots?: boolean | Station$chargingSlotsArgs<ExtArgs>
    reviews?: boolean | Station$reviewsArgs<ExtArgs>
    chargingHistories?: boolean | Station$chargingHistoriesArgs<ExtArgs>
    _count?: boolean | StationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["station"]>

  export type StationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    companyName?: boolean
    ownerType?: boolean
    ownerId?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    totalSlots?: boolean
    availableSlots?: boolean
    contact?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["station"]>

  export type StationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    companyName?: boolean
    ownerType?: boolean
    ownerId?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    totalSlots?: boolean
    availableSlots?: boolean
    contact?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["station"]>

  export type StationSelectScalar = {
    id?: boolean
    name?: boolean
    companyName?: boolean
    ownerType?: boolean
    ownerId?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    totalSlots?: boolean
    availableSlots?: boolean
    contact?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "companyName" | "ownerType" | "ownerId" | "address" | "latitude" | "longitude" | "totalSlots" | "availableSlots" | "contact" | "createdAt" | "updatedAt", ExtArgs["result"]["station"]>
  export type StationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    stationMasters?: boolean | Station$stationMastersArgs<ExtArgs>
    bookings?: boolean | Station$bookingsArgs<ExtArgs>
    chargingSlots?: boolean | Station$chargingSlotsArgs<ExtArgs>
    reviews?: boolean | Station$reviewsArgs<ExtArgs>
    chargingHistories?: boolean | Station$chargingHistoriesArgs<ExtArgs>
    _count?: boolean | StationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Station"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      stationMasters: Prisma.$StationMasterDetailsPayload<ExtArgs>[]
      bookings: Prisma.$BookingPayload<ExtArgs>[]
      chargingSlots: Prisma.$ChargingSlotPayload<ExtArgs>[]
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
      chargingHistories: Prisma.$ChargingHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      companyName: string | null
      ownerType: $Enums.OwnerType
      ownerId: string
      address: string
      latitude: number
      longitude: number
      totalSlots: number
      availableSlots: number
      contact: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["station"]>
    composites: {}
  }

  type StationGetPayload<S extends boolean | null | undefined | StationDefaultArgs> = $Result.GetResult<Prisma.$StationPayload, S>

  type StationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StationCountAggregateInputType | true
    }

  export interface StationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Station'], meta: { name: 'Station' } }
    /**
     * Find zero or one Station that matches the filter.
     * @param {StationFindUniqueArgs} args - Arguments to find a Station
     * @example
     * // Get one Station
     * const station = await prisma.station.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StationFindUniqueArgs>(args: SelectSubset<T, StationFindUniqueArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Station that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StationFindUniqueOrThrowArgs} args - Arguments to find a Station
     * @example
     * // Get one Station
     * const station = await prisma.station.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StationFindUniqueOrThrowArgs>(args: SelectSubset<T, StationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Station that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationFindFirstArgs} args - Arguments to find a Station
     * @example
     * // Get one Station
     * const station = await prisma.station.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StationFindFirstArgs>(args?: SelectSubset<T, StationFindFirstArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Station that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationFindFirstOrThrowArgs} args - Arguments to find a Station
     * @example
     * // Get one Station
     * const station = await prisma.station.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StationFindFirstOrThrowArgs>(args?: SelectSubset<T, StationFindFirstOrThrowArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Stations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stations
     * const stations = await prisma.station.findMany()
     * 
     * // Get first 10 Stations
     * const stations = await prisma.station.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stationWithIdOnly = await prisma.station.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StationFindManyArgs>(args?: SelectSubset<T, StationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Station.
     * @param {StationCreateArgs} args - Arguments to create a Station.
     * @example
     * // Create one Station
     * const Station = await prisma.station.create({
     *   data: {
     *     // ... data to create a Station
     *   }
     * })
     * 
     */
    create<T extends StationCreateArgs>(args: SelectSubset<T, StationCreateArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Stations.
     * @param {StationCreateManyArgs} args - Arguments to create many Stations.
     * @example
     * // Create many Stations
     * const station = await prisma.station.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StationCreateManyArgs>(args?: SelectSubset<T, StationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Stations and returns the data saved in the database.
     * @param {StationCreateManyAndReturnArgs} args - Arguments to create many Stations.
     * @example
     * // Create many Stations
     * const station = await prisma.station.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Stations and only return the `id`
     * const stationWithIdOnly = await prisma.station.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StationCreateManyAndReturnArgs>(args?: SelectSubset<T, StationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Station.
     * @param {StationDeleteArgs} args - Arguments to delete one Station.
     * @example
     * // Delete one Station
     * const Station = await prisma.station.delete({
     *   where: {
     *     // ... filter to delete one Station
     *   }
     * })
     * 
     */
    delete<T extends StationDeleteArgs>(args: SelectSubset<T, StationDeleteArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Station.
     * @param {StationUpdateArgs} args - Arguments to update one Station.
     * @example
     * // Update one Station
     * const station = await prisma.station.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StationUpdateArgs>(args: SelectSubset<T, StationUpdateArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Stations.
     * @param {StationDeleteManyArgs} args - Arguments to filter Stations to delete.
     * @example
     * // Delete a few Stations
     * const { count } = await prisma.station.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StationDeleteManyArgs>(args?: SelectSubset<T, StationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stations
     * const station = await prisma.station.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StationUpdateManyArgs>(args: SelectSubset<T, StationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stations and returns the data updated in the database.
     * @param {StationUpdateManyAndReturnArgs} args - Arguments to update many Stations.
     * @example
     * // Update many Stations
     * const station = await prisma.station.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Stations and only return the `id`
     * const stationWithIdOnly = await prisma.station.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StationUpdateManyAndReturnArgs>(args: SelectSubset<T, StationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Station.
     * @param {StationUpsertArgs} args - Arguments to update or create a Station.
     * @example
     * // Update or create a Station
     * const station = await prisma.station.upsert({
     *   create: {
     *     // ... data to create a Station
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Station we want to update
     *   }
     * })
     */
    upsert<T extends StationUpsertArgs>(args: SelectSubset<T, StationUpsertArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Stations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationCountArgs} args - Arguments to filter Stations to count.
     * @example
     * // Count the number of Stations
     * const count = await prisma.station.count({
     *   where: {
     *     // ... the filter for the Stations we want to count
     *   }
     * })
    **/
    count<T extends StationCountArgs>(
      args?: Subset<T, StationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Station.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StationAggregateArgs>(args: Subset<T, StationAggregateArgs>): Prisma.PrismaPromise<GetStationAggregateType<T>>

    /**
     * Group by Station.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StationGroupByArgs['orderBy'] }
        : { orderBy?: StationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Station model
   */
  readonly fields: StationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Station.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    stationMasters<T extends Station$stationMastersArgs<ExtArgs> = {}>(args?: Subset<T, Station$stationMastersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StationMasterDetailsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    bookings<T extends Station$bookingsArgs<ExtArgs> = {}>(args?: Subset<T, Station$bookingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    chargingSlots<T extends Station$chargingSlotsArgs<ExtArgs> = {}>(args?: Subset<T, Station$chargingSlotsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChargingSlotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviews<T extends Station$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, Station$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    chargingHistories<T extends Station$chargingHistoriesArgs<ExtArgs> = {}>(args?: Subset<T, Station$chargingHistoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChargingHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Station model
   */
  interface StationFieldRefs {
    readonly id: FieldRef<"Station", 'String'>
    readonly name: FieldRef<"Station", 'String'>
    readonly companyName: FieldRef<"Station", 'String'>
    readonly ownerType: FieldRef<"Station", 'OwnerType'>
    readonly ownerId: FieldRef<"Station", 'String'>
    readonly address: FieldRef<"Station", 'String'>
    readonly latitude: FieldRef<"Station", 'Float'>
    readonly longitude: FieldRef<"Station", 'Float'>
    readonly totalSlots: FieldRef<"Station", 'Int'>
    readonly availableSlots: FieldRef<"Station", 'Int'>
    readonly contact: FieldRef<"Station", 'String'>
    readonly createdAt: FieldRef<"Station", 'DateTime'>
    readonly updatedAt: FieldRef<"Station", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Station findUnique
   */
  export type StationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Station
     */
    omit?: StationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    /**
     * Filter, which Station to fetch.
     */
    where: StationWhereUniqueInput
  }

  /**
   * Station findUniqueOrThrow
   */
  export type StationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Station
     */
    omit?: StationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    /**
     * Filter, which Station to fetch.
     */
    where: StationWhereUniqueInput
  }

  /**
   * Station findFirst
   */
  export type StationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Station
     */
    omit?: StationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    /**
     * Filter, which Station to fetch.
     */
    where?: StationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stations to fetch.
     */
    orderBy?: StationOrderByWithRelationInput | StationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stations.
     */
    cursor?: StationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stations.
     */
    distinct?: StationScalarFieldEnum | StationScalarFieldEnum[]
  }

  /**
   * Station findFirstOrThrow
   */
  export type StationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Station
     */
    omit?: StationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    /**
     * Filter, which Station to fetch.
     */
    where?: StationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stations to fetch.
     */
    orderBy?: StationOrderByWithRelationInput | StationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stations.
     */
    cursor?: StationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stations.
     */
    distinct?: StationScalarFieldEnum | StationScalarFieldEnum[]
  }

  /**
   * Station findMany
   */
  export type StationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Station
     */
    omit?: StationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    /**
     * Filter, which Stations to fetch.
     */
    where?: StationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stations to fetch.
     */
    orderBy?: StationOrderByWithRelationInput | StationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stations.
     */
    cursor?: StationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stations.
     */
    skip?: number
    distinct?: StationScalarFieldEnum | StationScalarFieldEnum[]
  }

  /**
   * Station create
   */
  export type StationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Station
     */
    omit?: StationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    /**
     * The data needed to create a Station.
     */
    data: XOR<StationCreateInput, StationUncheckedCreateInput>
  }

  /**
   * Station createMany
   */
  export type StationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stations.
     */
    data: StationCreateManyInput | StationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Station createManyAndReturn
   */
  export type StationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Station
     */
    omit?: StationOmit<ExtArgs> | null
    /**
     * The data used to create many Stations.
     */
    data: StationCreateManyInput | StationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Station update
   */
  export type StationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Station
     */
    omit?: StationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    /**
     * The data needed to update a Station.
     */
    data: XOR<StationUpdateInput, StationUncheckedUpdateInput>
    /**
     * Choose, which Station to update.
     */
    where: StationWhereUniqueInput
  }

  /**
   * Station updateMany
   */
  export type StationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stations.
     */
    data: XOR<StationUpdateManyMutationInput, StationUncheckedUpdateManyInput>
    /**
     * Filter which Stations to update
     */
    where?: StationWhereInput
    /**
     * Limit how many Stations to update.
     */
    limit?: number
  }

  /**
   * Station updateManyAndReturn
   */
  export type StationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Station
     */
    omit?: StationOmit<ExtArgs> | null
    /**
     * The data used to update Stations.
     */
    data: XOR<StationUpdateManyMutationInput, StationUncheckedUpdateManyInput>
    /**
     * Filter which Stations to update
     */
    where?: StationWhereInput
    /**
     * Limit how many Stations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Station upsert
   */
  export type StationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Station
     */
    omit?: StationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    /**
     * The filter to search for the Station to update in case it exists.
     */
    where: StationWhereUniqueInput
    /**
     * In case the Station found by the `where` argument doesn't exist, create a new Station with this data.
     */
    create: XOR<StationCreateInput, StationUncheckedCreateInput>
    /**
     * In case the Station was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StationUpdateInput, StationUncheckedUpdateInput>
  }

  /**
   * Station delete
   */
  export type StationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Station
     */
    omit?: StationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    /**
     * Filter which Station to delete.
     */
    where: StationWhereUniqueInput
  }

  /**
   * Station deleteMany
   */
  export type StationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stations to delete
     */
    where?: StationWhereInput
    /**
     * Limit how many Stations to delete.
     */
    limit?: number
  }

  /**
   * Station.stationMasters
   */
  export type Station$stationMastersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationMasterDetails
     */
    select?: StationMasterDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StationMasterDetails
     */
    omit?: StationMasterDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationMasterDetailsInclude<ExtArgs> | null
    where?: StationMasterDetailsWhereInput
    orderBy?: StationMasterDetailsOrderByWithRelationInput | StationMasterDetailsOrderByWithRelationInput[]
    cursor?: StationMasterDetailsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StationMasterDetailsScalarFieldEnum | StationMasterDetailsScalarFieldEnum[]
  }

  /**
   * Station.bookings
   */
  export type Station$bookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    where?: BookingWhereInput
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    cursor?: BookingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * Station.chargingSlots
   */
  export type Station$chargingSlotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingSlot
     */
    select?: ChargingSlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingSlot
     */
    omit?: ChargingSlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingSlotInclude<ExtArgs> | null
    where?: ChargingSlotWhereInput
    orderBy?: ChargingSlotOrderByWithRelationInput | ChargingSlotOrderByWithRelationInput[]
    cursor?: ChargingSlotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChargingSlotScalarFieldEnum | ChargingSlotScalarFieldEnum[]
  }

  /**
   * Station.reviews
   */
  export type Station$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Station.chargingHistories
   */
  export type Station$chargingHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingHistory
     */
    select?: ChargingHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingHistory
     */
    omit?: ChargingHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingHistoryInclude<ExtArgs> | null
    where?: ChargingHistoryWhereInput
    orderBy?: ChargingHistoryOrderByWithRelationInput | ChargingHistoryOrderByWithRelationInput[]
    cursor?: ChargingHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChargingHistoryScalarFieldEnum | ChargingHistoryScalarFieldEnum[]
  }

  /**
   * Station without action
   */
  export type StationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Station
     */
    omit?: StationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
  }


  /**
   * Model Booking
   */

  export type AggregateBooking = {
    _count: BookingCountAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  export type BookingMinAggregateOutputType = {
    id: string | null
    userId: string | null
    stationId: string | null
    evId: string | null
    startTime: Date | null
    endTime: Date | null
    status: $Enums.BookingStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookingMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    stationId: string | null
    evId: string | null
    startTime: Date | null
    endTime: Date | null
    status: $Enums.BookingStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookingCountAggregateOutputType = {
    id: number
    userId: number
    stationId: number
    evId: number
    startTime: number
    endTime: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BookingMinAggregateInputType = {
    id?: true
    userId?: true
    stationId?: true
    evId?: true
    startTime?: true
    endTime?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookingMaxAggregateInputType = {
    id?: true
    userId?: true
    stationId?: true
    evId?: true
    startTime?: true
    endTime?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookingCountAggregateInputType = {
    id?: true
    userId?: true
    stationId?: true
    evId?: true
    startTime?: true
    endTime?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BookingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Booking to aggregate.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bookings
    **/
    _count?: true | BookingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookingMaxAggregateInputType
  }

  export type GetBookingAggregateType<T extends BookingAggregateArgs> = {
        [P in keyof T & keyof AggregateBooking]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBooking[P]>
      : GetScalarType<T[P], AggregateBooking[P]>
  }




  export type BookingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingWhereInput
    orderBy?: BookingOrderByWithAggregationInput | BookingOrderByWithAggregationInput[]
    by: BookingScalarFieldEnum[] | BookingScalarFieldEnum
    having?: BookingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookingCountAggregateInputType | true
    _min?: BookingMinAggregateInputType
    _max?: BookingMaxAggregateInputType
  }

  export type BookingGroupByOutputType = {
    id: string
    userId: string
    stationId: string
    evId: string
    startTime: Date
    endTime: Date
    status: $Enums.BookingStatus
    createdAt: Date
    updatedAt: Date
    _count: BookingCountAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  type GetBookingGroupByPayload<T extends BookingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookingGroupByOutputType[P]>
            : GetScalarType<T[P], BookingGroupByOutputType[P]>
        }
      >
    >


  export type BookingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    stationId?: boolean
    evId?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
    transaction?: boolean | Booking$transactionArgs<ExtArgs>
    chargingHistory?: boolean | Booking$chargingHistoryArgs<ExtArgs>
  }, ExtArgs["result"]["booking"]>

  export type BookingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    stationId?: boolean
    evId?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["booking"]>

  export type BookingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    stationId?: boolean
    evId?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["booking"]>

  export type BookingSelectScalar = {
    id?: boolean
    userId?: boolean
    stationId?: boolean
    evId?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BookingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "stationId" | "evId" | "startTime" | "endTime" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["booking"]>
  export type BookingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
    transaction?: boolean | Booking$transactionArgs<ExtArgs>
    chargingHistory?: boolean | Booking$chargingHistoryArgs<ExtArgs>
  }
  export type BookingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
  }
  export type BookingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
  }

  export type $BookingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Booking"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      station: Prisma.$StationPayload<ExtArgs>
      transaction: Prisma.$TransactionPayload<ExtArgs> | null
      chargingHistory: Prisma.$ChargingHistoryPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      stationId: string
      evId: string
      startTime: Date
      endTime: Date
      status: $Enums.BookingStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["booking"]>
    composites: {}
  }

  type BookingGetPayload<S extends boolean | null | undefined | BookingDefaultArgs> = $Result.GetResult<Prisma.$BookingPayload, S>

  type BookingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BookingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BookingCountAggregateInputType | true
    }

  export interface BookingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Booking'], meta: { name: 'Booking' } }
    /**
     * Find zero or one Booking that matches the filter.
     * @param {BookingFindUniqueArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookingFindUniqueArgs>(args: SelectSubset<T, BookingFindUniqueArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Booking that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BookingFindUniqueOrThrowArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookingFindUniqueOrThrowArgs>(args: SelectSubset<T, BookingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Booking that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindFirstArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookingFindFirstArgs>(args?: SelectSubset<T, BookingFindFirstArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Booking that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindFirstOrThrowArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookingFindFirstOrThrowArgs>(args?: SelectSubset<T, BookingFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Bookings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bookings
     * const bookings = await prisma.booking.findMany()
     * 
     * // Get first 10 Bookings
     * const bookings = await prisma.booking.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookingWithIdOnly = await prisma.booking.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BookingFindManyArgs>(args?: SelectSubset<T, BookingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Booking.
     * @param {BookingCreateArgs} args - Arguments to create a Booking.
     * @example
     * // Create one Booking
     * const Booking = await prisma.booking.create({
     *   data: {
     *     // ... data to create a Booking
     *   }
     * })
     * 
     */
    create<T extends BookingCreateArgs>(args: SelectSubset<T, BookingCreateArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Bookings.
     * @param {BookingCreateManyArgs} args - Arguments to create many Bookings.
     * @example
     * // Create many Bookings
     * const booking = await prisma.booking.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookingCreateManyArgs>(args?: SelectSubset<T, BookingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Bookings and returns the data saved in the database.
     * @param {BookingCreateManyAndReturnArgs} args - Arguments to create many Bookings.
     * @example
     * // Create many Bookings
     * const booking = await prisma.booking.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Bookings and only return the `id`
     * const bookingWithIdOnly = await prisma.booking.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BookingCreateManyAndReturnArgs>(args?: SelectSubset<T, BookingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Booking.
     * @param {BookingDeleteArgs} args - Arguments to delete one Booking.
     * @example
     * // Delete one Booking
     * const Booking = await prisma.booking.delete({
     *   where: {
     *     // ... filter to delete one Booking
     *   }
     * })
     * 
     */
    delete<T extends BookingDeleteArgs>(args: SelectSubset<T, BookingDeleteArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Booking.
     * @param {BookingUpdateArgs} args - Arguments to update one Booking.
     * @example
     * // Update one Booking
     * const booking = await prisma.booking.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookingUpdateArgs>(args: SelectSubset<T, BookingUpdateArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Bookings.
     * @param {BookingDeleteManyArgs} args - Arguments to filter Bookings to delete.
     * @example
     * // Delete a few Bookings
     * const { count } = await prisma.booking.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookingDeleteManyArgs>(args?: SelectSubset<T, BookingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bookings
     * const booking = await prisma.booking.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookingUpdateManyArgs>(args: SelectSubset<T, BookingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bookings and returns the data updated in the database.
     * @param {BookingUpdateManyAndReturnArgs} args - Arguments to update many Bookings.
     * @example
     * // Update many Bookings
     * const booking = await prisma.booking.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Bookings and only return the `id`
     * const bookingWithIdOnly = await prisma.booking.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BookingUpdateManyAndReturnArgs>(args: SelectSubset<T, BookingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Booking.
     * @param {BookingUpsertArgs} args - Arguments to update or create a Booking.
     * @example
     * // Update or create a Booking
     * const booking = await prisma.booking.upsert({
     *   create: {
     *     // ... data to create a Booking
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Booking we want to update
     *   }
     * })
     */
    upsert<T extends BookingUpsertArgs>(args: SelectSubset<T, BookingUpsertArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingCountArgs} args - Arguments to filter Bookings to count.
     * @example
     * // Count the number of Bookings
     * const count = await prisma.booking.count({
     *   where: {
     *     // ... the filter for the Bookings we want to count
     *   }
     * })
    **/
    count<T extends BookingCountArgs>(
      args?: Subset<T, BookingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookingAggregateArgs>(args: Subset<T, BookingAggregateArgs>): Prisma.PrismaPromise<GetBookingAggregateType<T>>

    /**
     * Group by Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookingGroupByArgs['orderBy'] }
        : { orderBy?: BookingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Booking model
   */
  readonly fields: BookingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Booking.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    station<T extends StationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StationDefaultArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    transaction<T extends Booking$transactionArgs<ExtArgs> = {}>(args?: Subset<T, Booking$transactionArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    chargingHistory<T extends Booking$chargingHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Booking$chargingHistoryArgs<ExtArgs>>): Prisma__ChargingHistoryClient<$Result.GetResult<Prisma.$ChargingHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Booking model
   */
  interface BookingFieldRefs {
    readonly id: FieldRef<"Booking", 'String'>
    readonly userId: FieldRef<"Booking", 'String'>
    readonly stationId: FieldRef<"Booking", 'String'>
    readonly evId: FieldRef<"Booking", 'String'>
    readonly startTime: FieldRef<"Booking", 'DateTime'>
    readonly endTime: FieldRef<"Booking", 'DateTime'>
    readonly status: FieldRef<"Booking", 'BookingStatus'>
    readonly createdAt: FieldRef<"Booking", 'DateTime'>
    readonly updatedAt: FieldRef<"Booking", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Booking findUnique
   */
  export type BookingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where: BookingWhereUniqueInput
  }

  /**
   * Booking findUniqueOrThrow
   */
  export type BookingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where: BookingWhereUniqueInput
  }

  /**
   * Booking findFirst
   */
  export type BookingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookings.
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookings.
     */
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * Booking findFirstOrThrow
   */
  export type BookingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookings.
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookings.
     */
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * Booking findMany
   */
  export type BookingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Bookings to fetch.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bookings.
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * Booking create
   */
  export type BookingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * The data needed to create a Booking.
     */
    data: XOR<BookingCreateInput, BookingUncheckedCreateInput>
  }

  /**
   * Booking createMany
   */
  export type BookingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bookings.
     */
    data: BookingCreateManyInput | BookingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Booking createManyAndReturn
   */
  export type BookingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * The data used to create many Bookings.
     */
    data: BookingCreateManyInput | BookingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Booking update
   */
  export type BookingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * The data needed to update a Booking.
     */
    data: XOR<BookingUpdateInput, BookingUncheckedUpdateInput>
    /**
     * Choose, which Booking to update.
     */
    where: BookingWhereUniqueInput
  }

  /**
   * Booking updateMany
   */
  export type BookingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bookings.
     */
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyInput>
    /**
     * Filter which Bookings to update
     */
    where?: BookingWhereInput
    /**
     * Limit how many Bookings to update.
     */
    limit?: number
  }

  /**
   * Booking updateManyAndReturn
   */
  export type BookingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * The data used to update Bookings.
     */
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyInput>
    /**
     * Filter which Bookings to update
     */
    where?: BookingWhereInput
    /**
     * Limit how many Bookings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Booking upsert
   */
  export type BookingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * The filter to search for the Booking to update in case it exists.
     */
    where: BookingWhereUniqueInput
    /**
     * In case the Booking found by the `where` argument doesn't exist, create a new Booking with this data.
     */
    create: XOR<BookingCreateInput, BookingUncheckedCreateInput>
    /**
     * In case the Booking was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookingUpdateInput, BookingUncheckedUpdateInput>
  }

  /**
   * Booking delete
   */
  export type BookingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter which Booking to delete.
     */
    where: BookingWhereUniqueInput
  }

  /**
   * Booking deleteMany
   */
  export type BookingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bookings to delete
     */
    where?: BookingWhereInput
    /**
     * Limit how many Bookings to delete.
     */
    limit?: number
  }

  /**
   * Booking.transaction
   */
  export type Booking$transactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
  }

  /**
   * Booking.chargingHistory
   */
  export type Booking$chargingHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingHistory
     */
    select?: ChargingHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingHistory
     */
    omit?: ChargingHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingHistoryInclude<ExtArgs> | null
    where?: ChargingHistoryWhereInput
  }

  /**
   * Booking without action
   */
  export type BookingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
  }


  /**
   * Model Transaction
   */

  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    amount: number | null
  }

  export type TransactionSumAggregateOutputType = {
    amount: number | null
  }

  export type TransactionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    amount: number | null
    type: $Enums.TransactionType | null
    status: $Enums.TransactionStatus | null
    bookingId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    amount: number | null
    type: $Enums.TransactionType | null
    status: $Enums.TransactionStatus | null
    bookingId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionCountAggregateOutputType = {
    id: number
    userId: number
    amount: number
    type: number
    status: number
    bookingId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    amount?: true
  }

  export type TransactionSumAggregateInputType = {
    amount?: true
  }

  export type TransactionMinAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    type?: true
    status?: true
    bookingId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionMaxAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    type?: true
    status?: true
    bookingId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionCountAggregateInputType = {
    id?: true
    userId?: true
    amount?: true
    type?: true
    status?: true
    bookingId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaction to aggregate.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithAggregationInput | TransactionOrderByWithAggregationInput[]
    by: TransactionScalarFieldEnum[] | TransactionScalarFieldEnum
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }

  export type TransactionGroupByOutputType = {
    id: string
    userId: string
    amount: number
    type: $Enums.TransactionType
    status: $Enums.TransactionStatus
    bookingId: string | null
    createdAt: Date
    updatedAt: Date
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    amount?: boolean
    type?: boolean
    status?: boolean
    bookingId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    booking?: boolean | Transaction$bookingArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    amount?: boolean
    type?: boolean
    status?: boolean
    bookingId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    booking?: boolean | Transaction$bookingArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    amount?: boolean
    type?: boolean
    status?: boolean
    bookingId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    booking?: boolean | Transaction$bookingArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectScalar = {
    id?: boolean
    userId?: boolean
    amount?: boolean
    type?: boolean
    status?: boolean
    bookingId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TransactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "amount" | "type" | "status" | "bookingId" | "createdAt" | "updatedAt", ExtArgs["result"]["transaction"]>
  export type TransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    booking?: boolean | Transaction$bookingArgs<ExtArgs>
  }
  export type TransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    booking?: boolean | Transaction$bookingArgs<ExtArgs>
  }
  export type TransactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    booking?: boolean | Transaction$bookingArgs<ExtArgs>
  }

  export type $TransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transaction"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      booking: Prisma.$BookingPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      amount: number
      type: $Enums.TransactionType
      status: $Enums.TransactionStatus
      bookingId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["transaction"]>
    composites: {}
  }

  type TransactionGetPayload<S extends boolean | null | undefined | TransactionDefaultArgs> = $Result.GetResult<Prisma.$TransactionPayload, S>

  type TransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TransactionCountAggregateInputType | true
    }

  export interface TransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaction'], meta: { name: 'Transaction' } }
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionFindUniqueArgs>(args: SelectSubset<T, TransactionFindUniqueArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Transaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionFindFirstArgs>(args?: SelectSubset<T, TransactionFindFirstArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionFindManyArgs>(args?: SelectSubset<T, TransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
     */
    create<T extends TransactionCreateArgs>(args: SelectSubset<T, TransactionCreateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Transactions.
     * @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionCreateManyArgs>(args?: SelectSubset<T, TransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transactions and returns the data saved in the database.
     * @param {TransactionCreateManyAndReturnArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transactions and only return the `id`
     * const transactionWithIdOnly = await prisma.transaction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, TransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
     */
    delete<T extends TransactionDeleteArgs>(args: SelectSubset<T, TransactionDeleteArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionUpdateArgs>(args: SelectSubset<T, TransactionUpdateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionDeleteManyArgs>(args?: SelectSubset<T, TransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionUpdateManyArgs>(args: SelectSubset<T, TransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions and returns the data updated in the database.
     * @param {TransactionUpdateManyAndReturnArgs} args - Arguments to update many Transactions.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Transactions and only return the `id`
     * const transactionWithIdOnly = await prisma.transaction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TransactionUpdateManyAndReturnArgs>(args: SelectSubset<T, TransactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
     */
    upsert<T extends TransactionUpsertArgs>(args: SelectSubset<T, TransactionUpsertArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): Prisma.PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transaction model
   */
  readonly fields: TransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    booking<T extends Transaction$bookingArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$bookingArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transaction model
   */
  interface TransactionFieldRefs {
    readonly id: FieldRef<"Transaction", 'String'>
    readonly userId: FieldRef<"Transaction", 'String'>
    readonly amount: FieldRef<"Transaction", 'Float'>
    readonly type: FieldRef<"Transaction", 'TransactionType'>
    readonly status: FieldRef<"Transaction", 'TransactionStatus'>
    readonly bookingId: FieldRef<"Transaction", 'String'>
    readonly createdAt: FieldRef<"Transaction", 'DateTime'>
    readonly updatedAt: FieldRef<"Transaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Transaction findUnique
   */
  export type TransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findUniqueOrThrow
   */
  export type TransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findFirst
   */
  export type TransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findFirstOrThrow
   */
  export type TransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction create
   */
  export type TransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaction.
     */
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }

  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transaction createManyAndReturn
   */
  export type TransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction update
   */
  export type TransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaction.
     */
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to update.
     */
    limit?: number
  }

  /**
   * Transaction updateManyAndReturn
   */
  export type TransactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     */
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     */
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }

  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter which Transaction to delete.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to delete.
     */
    limit?: number
  }

  /**
   * Transaction.booking
   */
  export type Transaction$bookingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    where?: BookingWhereInput
  }

  /**
   * Transaction without action
   */
  export type TransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
  }


  /**
   * Model ChargingSlot
   */

  export type AggregateChargingSlot = {
    _count: ChargingSlotCountAggregateOutputType | null
    _avg: ChargingSlotAvgAggregateOutputType | null
    _sum: ChargingSlotSumAggregateOutputType | null
    _min: ChargingSlotMinAggregateOutputType | null
    _max: ChargingSlotMaxAggregateOutputType | null
  }

  export type ChargingSlotAvgAggregateOutputType = {
    powerLevel: number | null
  }

  export type ChargingSlotSumAggregateOutputType = {
    powerLevel: number | null
  }

  export type ChargingSlotMinAggregateOutputType = {
    id: string | null
    stationId: string | null
    isOccupied: boolean | null
    powerLevel: number | null
    type: $Enums.SlotType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChargingSlotMaxAggregateOutputType = {
    id: string | null
    stationId: string | null
    isOccupied: boolean | null
    powerLevel: number | null
    type: $Enums.SlotType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChargingSlotCountAggregateOutputType = {
    id: number
    stationId: number
    isOccupied: number
    powerLevel: number
    type: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChargingSlotAvgAggregateInputType = {
    powerLevel?: true
  }

  export type ChargingSlotSumAggregateInputType = {
    powerLevel?: true
  }

  export type ChargingSlotMinAggregateInputType = {
    id?: true
    stationId?: true
    isOccupied?: true
    powerLevel?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChargingSlotMaxAggregateInputType = {
    id?: true
    stationId?: true
    isOccupied?: true
    powerLevel?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChargingSlotCountAggregateInputType = {
    id?: true
    stationId?: true
    isOccupied?: true
    powerLevel?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChargingSlotAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChargingSlot to aggregate.
     */
    where?: ChargingSlotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChargingSlots to fetch.
     */
    orderBy?: ChargingSlotOrderByWithRelationInput | ChargingSlotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChargingSlotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChargingSlots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChargingSlots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChargingSlots
    **/
    _count?: true | ChargingSlotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChargingSlotAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChargingSlotSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChargingSlotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChargingSlotMaxAggregateInputType
  }

  export type GetChargingSlotAggregateType<T extends ChargingSlotAggregateArgs> = {
        [P in keyof T & keyof AggregateChargingSlot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChargingSlot[P]>
      : GetScalarType<T[P], AggregateChargingSlot[P]>
  }




  export type ChargingSlotGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChargingSlotWhereInput
    orderBy?: ChargingSlotOrderByWithAggregationInput | ChargingSlotOrderByWithAggregationInput[]
    by: ChargingSlotScalarFieldEnum[] | ChargingSlotScalarFieldEnum
    having?: ChargingSlotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChargingSlotCountAggregateInputType | true
    _avg?: ChargingSlotAvgAggregateInputType
    _sum?: ChargingSlotSumAggregateInputType
    _min?: ChargingSlotMinAggregateInputType
    _max?: ChargingSlotMaxAggregateInputType
  }

  export type ChargingSlotGroupByOutputType = {
    id: string
    stationId: string
    isOccupied: boolean
    powerLevel: number
    type: $Enums.SlotType
    createdAt: Date
    updatedAt: Date
    _count: ChargingSlotCountAggregateOutputType | null
    _avg: ChargingSlotAvgAggregateOutputType | null
    _sum: ChargingSlotSumAggregateOutputType | null
    _min: ChargingSlotMinAggregateOutputType | null
    _max: ChargingSlotMaxAggregateOutputType | null
  }

  type GetChargingSlotGroupByPayload<T extends ChargingSlotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChargingSlotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChargingSlotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChargingSlotGroupByOutputType[P]>
            : GetScalarType<T[P], ChargingSlotGroupByOutputType[P]>
        }
      >
    >


  export type ChargingSlotSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stationId?: boolean
    isOccupied?: boolean
    powerLevel?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    station?: boolean | StationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chargingSlot"]>

  export type ChargingSlotSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stationId?: boolean
    isOccupied?: boolean
    powerLevel?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    station?: boolean | StationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chargingSlot"]>

  export type ChargingSlotSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stationId?: boolean
    isOccupied?: boolean
    powerLevel?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    station?: boolean | StationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chargingSlot"]>

  export type ChargingSlotSelectScalar = {
    id?: boolean
    stationId?: boolean
    isOccupied?: boolean
    powerLevel?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChargingSlotOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "stationId" | "isOccupied" | "powerLevel" | "type" | "createdAt" | "updatedAt", ExtArgs["result"]["chargingSlot"]>
  export type ChargingSlotInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    station?: boolean | StationDefaultArgs<ExtArgs>
  }
  export type ChargingSlotIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    station?: boolean | StationDefaultArgs<ExtArgs>
  }
  export type ChargingSlotIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    station?: boolean | StationDefaultArgs<ExtArgs>
  }

  export type $ChargingSlotPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChargingSlot"
    objects: {
      station: Prisma.$StationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      stationId: string
      isOccupied: boolean
      powerLevel: number
      type: $Enums.SlotType
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["chargingSlot"]>
    composites: {}
  }

  type ChargingSlotGetPayload<S extends boolean | null | undefined | ChargingSlotDefaultArgs> = $Result.GetResult<Prisma.$ChargingSlotPayload, S>

  type ChargingSlotCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChargingSlotFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChargingSlotCountAggregateInputType | true
    }

  export interface ChargingSlotDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChargingSlot'], meta: { name: 'ChargingSlot' } }
    /**
     * Find zero or one ChargingSlot that matches the filter.
     * @param {ChargingSlotFindUniqueArgs} args - Arguments to find a ChargingSlot
     * @example
     * // Get one ChargingSlot
     * const chargingSlot = await prisma.chargingSlot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChargingSlotFindUniqueArgs>(args: SelectSubset<T, ChargingSlotFindUniqueArgs<ExtArgs>>): Prisma__ChargingSlotClient<$Result.GetResult<Prisma.$ChargingSlotPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChargingSlot that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChargingSlotFindUniqueOrThrowArgs} args - Arguments to find a ChargingSlot
     * @example
     * // Get one ChargingSlot
     * const chargingSlot = await prisma.chargingSlot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChargingSlotFindUniqueOrThrowArgs>(args: SelectSubset<T, ChargingSlotFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChargingSlotClient<$Result.GetResult<Prisma.$ChargingSlotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChargingSlot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChargingSlotFindFirstArgs} args - Arguments to find a ChargingSlot
     * @example
     * // Get one ChargingSlot
     * const chargingSlot = await prisma.chargingSlot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChargingSlotFindFirstArgs>(args?: SelectSubset<T, ChargingSlotFindFirstArgs<ExtArgs>>): Prisma__ChargingSlotClient<$Result.GetResult<Prisma.$ChargingSlotPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChargingSlot that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChargingSlotFindFirstOrThrowArgs} args - Arguments to find a ChargingSlot
     * @example
     * // Get one ChargingSlot
     * const chargingSlot = await prisma.chargingSlot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChargingSlotFindFirstOrThrowArgs>(args?: SelectSubset<T, ChargingSlotFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChargingSlotClient<$Result.GetResult<Prisma.$ChargingSlotPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChargingSlots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChargingSlotFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChargingSlots
     * const chargingSlots = await prisma.chargingSlot.findMany()
     * 
     * // Get first 10 ChargingSlots
     * const chargingSlots = await prisma.chargingSlot.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chargingSlotWithIdOnly = await prisma.chargingSlot.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChargingSlotFindManyArgs>(args?: SelectSubset<T, ChargingSlotFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChargingSlotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChargingSlot.
     * @param {ChargingSlotCreateArgs} args - Arguments to create a ChargingSlot.
     * @example
     * // Create one ChargingSlot
     * const ChargingSlot = await prisma.chargingSlot.create({
     *   data: {
     *     // ... data to create a ChargingSlot
     *   }
     * })
     * 
     */
    create<T extends ChargingSlotCreateArgs>(args: SelectSubset<T, ChargingSlotCreateArgs<ExtArgs>>): Prisma__ChargingSlotClient<$Result.GetResult<Prisma.$ChargingSlotPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChargingSlots.
     * @param {ChargingSlotCreateManyArgs} args - Arguments to create many ChargingSlots.
     * @example
     * // Create many ChargingSlots
     * const chargingSlot = await prisma.chargingSlot.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChargingSlotCreateManyArgs>(args?: SelectSubset<T, ChargingSlotCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChargingSlots and returns the data saved in the database.
     * @param {ChargingSlotCreateManyAndReturnArgs} args - Arguments to create many ChargingSlots.
     * @example
     * // Create many ChargingSlots
     * const chargingSlot = await prisma.chargingSlot.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChargingSlots and only return the `id`
     * const chargingSlotWithIdOnly = await prisma.chargingSlot.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChargingSlotCreateManyAndReturnArgs>(args?: SelectSubset<T, ChargingSlotCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChargingSlotPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChargingSlot.
     * @param {ChargingSlotDeleteArgs} args - Arguments to delete one ChargingSlot.
     * @example
     * // Delete one ChargingSlot
     * const ChargingSlot = await prisma.chargingSlot.delete({
     *   where: {
     *     // ... filter to delete one ChargingSlot
     *   }
     * })
     * 
     */
    delete<T extends ChargingSlotDeleteArgs>(args: SelectSubset<T, ChargingSlotDeleteArgs<ExtArgs>>): Prisma__ChargingSlotClient<$Result.GetResult<Prisma.$ChargingSlotPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChargingSlot.
     * @param {ChargingSlotUpdateArgs} args - Arguments to update one ChargingSlot.
     * @example
     * // Update one ChargingSlot
     * const chargingSlot = await prisma.chargingSlot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChargingSlotUpdateArgs>(args: SelectSubset<T, ChargingSlotUpdateArgs<ExtArgs>>): Prisma__ChargingSlotClient<$Result.GetResult<Prisma.$ChargingSlotPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChargingSlots.
     * @param {ChargingSlotDeleteManyArgs} args - Arguments to filter ChargingSlots to delete.
     * @example
     * // Delete a few ChargingSlots
     * const { count } = await prisma.chargingSlot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChargingSlotDeleteManyArgs>(args?: SelectSubset<T, ChargingSlotDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChargingSlots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChargingSlotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChargingSlots
     * const chargingSlot = await prisma.chargingSlot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChargingSlotUpdateManyArgs>(args: SelectSubset<T, ChargingSlotUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChargingSlots and returns the data updated in the database.
     * @param {ChargingSlotUpdateManyAndReturnArgs} args - Arguments to update many ChargingSlots.
     * @example
     * // Update many ChargingSlots
     * const chargingSlot = await prisma.chargingSlot.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChargingSlots and only return the `id`
     * const chargingSlotWithIdOnly = await prisma.chargingSlot.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChargingSlotUpdateManyAndReturnArgs>(args: SelectSubset<T, ChargingSlotUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChargingSlotPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChargingSlot.
     * @param {ChargingSlotUpsertArgs} args - Arguments to update or create a ChargingSlot.
     * @example
     * // Update or create a ChargingSlot
     * const chargingSlot = await prisma.chargingSlot.upsert({
     *   create: {
     *     // ... data to create a ChargingSlot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChargingSlot we want to update
     *   }
     * })
     */
    upsert<T extends ChargingSlotUpsertArgs>(args: SelectSubset<T, ChargingSlotUpsertArgs<ExtArgs>>): Prisma__ChargingSlotClient<$Result.GetResult<Prisma.$ChargingSlotPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChargingSlots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChargingSlotCountArgs} args - Arguments to filter ChargingSlots to count.
     * @example
     * // Count the number of ChargingSlots
     * const count = await prisma.chargingSlot.count({
     *   where: {
     *     // ... the filter for the ChargingSlots we want to count
     *   }
     * })
    **/
    count<T extends ChargingSlotCountArgs>(
      args?: Subset<T, ChargingSlotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChargingSlotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChargingSlot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChargingSlotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChargingSlotAggregateArgs>(args: Subset<T, ChargingSlotAggregateArgs>): Prisma.PrismaPromise<GetChargingSlotAggregateType<T>>

    /**
     * Group by ChargingSlot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChargingSlotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChargingSlotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChargingSlotGroupByArgs['orderBy'] }
        : { orderBy?: ChargingSlotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChargingSlotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChargingSlotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChargingSlot model
   */
  readonly fields: ChargingSlotFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChargingSlot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChargingSlotClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    station<T extends StationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StationDefaultArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChargingSlot model
   */
  interface ChargingSlotFieldRefs {
    readonly id: FieldRef<"ChargingSlot", 'String'>
    readonly stationId: FieldRef<"ChargingSlot", 'String'>
    readonly isOccupied: FieldRef<"ChargingSlot", 'Boolean'>
    readonly powerLevel: FieldRef<"ChargingSlot", 'Int'>
    readonly type: FieldRef<"ChargingSlot", 'SlotType'>
    readonly createdAt: FieldRef<"ChargingSlot", 'DateTime'>
    readonly updatedAt: FieldRef<"ChargingSlot", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChargingSlot findUnique
   */
  export type ChargingSlotFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingSlot
     */
    select?: ChargingSlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingSlot
     */
    omit?: ChargingSlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingSlotInclude<ExtArgs> | null
    /**
     * Filter, which ChargingSlot to fetch.
     */
    where: ChargingSlotWhereUniqueInput
  }

  /**
   * ChargingSlot findUniqueOrThrow
   */
  export type ChargingSlotFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingSlot
     */
    select?: ChargingSlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingSlot
     */
    omit?: ChargingSlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingSlotInclude<ExtArgs> | null
    /**
     * Filter, which ChargingSlot to fetch.
     */
    where: ChargingSlotWhereUniqueInput
  }

  /**
   * ChargingSlot findFirst
   */
  export type ChargingSlotFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingSlot
     */
    select?: ChargingSlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingSlot
     */
    omit?: ChargingSlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingSlotInclude<ExtArgs> | null
    /**
     * Filter, which ChargingSlot to fetch.
     */
    where?: ChargingSlotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChargingSlots to fetch.
     */
    orderBy?: ChargingSlotOrderByWithRelationInput | ChargingSlotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChargingSlots.
     */
    cursor?: ChargingSlotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChargingSlots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChargingSlots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChargingSlots.
     */
    distinct?: ChargingSlotScalarFieldEnum | ChargingSlotScalarFieldEnum[]
  }

  /**
   * ChargingSlot findFirstOrThrow
   */
  export type ChargingSlotFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingSlot
     */
    select?: ChargingSlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingSlot
     */
    omit?: ChargingSlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingSlotInclude<ExtArgs> | null
    /**
     * Filter, which ChargingSlot to fetch.
     */
    where?: ChargingSlotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChargingSlots to fetch.
     */
    orderBy?: ChargingSlotOrderByWithRelationInput | ChargingSlotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChargingSlots.
     */
    cursor?: ChargingSlotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChargingSlots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChargingSlots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChargingSlots.
     */
    distinct?: ChargingSlotScalarFieldEnum | ChargingSlotScalarFieldEnum[]
  }

  /**
   * ChargingSlot findMany
   */
  export type ChargingSlotFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingSlot
     */
    select?: ChargingSlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingSlot
     */
    omit?: ChargingSlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingSlotInclude<ExtArgs> | null
    /**
     * Filter, which ChargingSlots to fetch.
     */
    where?: ChargingSlotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChargingSlots to fetch.
     */
    orderBy?: ChargingSlotOrderByWithRelationInput | ChargingSlotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChargingSlots.
     */
    cursor?: ChargingSlotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChargingSlots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChargingSlots.
     */
    skip?: number
    distinct?: ChargingSlotScalarFieldEnum | ChargingSlotScalarFieldEnum[]
  }

  /**
   * ChargingSlot create
   */
  export type ChargingSlotCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingSlot
     */
    select?: ChargingSlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingSlot
     */
    omit?: ChargingSlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingSlotInclude<ExtArgs> | null
    /**
     * The data needed to create a ChargingSlot.
     */
    data: XOR<ChargingSlotCreateInput, ChargingSlotUncheckedCreateInput>
  }

  /**
   * ChargingSlot createMany
   */
  export type ChargingSlotCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChargingSlots.
     */
    data: ChargingSlotCreateManyInput | ChargingSlotCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChargingSlot createManyAndReturn
   */
  export type ChargingSlotCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingSlot
     */
    select?: ChargingSlotSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingSlot
     */
    omit?: ChargingSlotOmit<ExtArgs> | null
    /**
     * The data used to create many ChargingSlots.
     */
    data: ChargingSlotCreateManyInput | ChargingSlotCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingSlotIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChargingSlot update
   */
  export type ChargingSlotUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingSlot
     */
    select?: ChargingSlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingSlot
     */
    omit?: ChargingSlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingSlotInclude<ExtArgs> | null
    /**
     * The data needed to update a ChargingSlot.
     */
    data: XOR<ChargingSlotUpdateInput, ChargingSlotUncheckedUpdateInput>
    /**
     * Choose, which ChargingSlot to update.
     */
    where: ChargingSlotWhereUniqueInput
  }

  /**
   * ChargingSlot updateMany
   */
  export type ChargingSlotUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChargingSlots.
     */
    data: XOR<ChargingSlotUpdateManyMutationInput, ChargingSlotUncheckedUpdateManyInput>
    /**
     * Filter which ChargingSlots to update
     */
    where?: ChargingSlotWhereInput
    /**
     * Limit how many ChargingSlots to update.
     */
    limit?: number
  }

  /**
   * ChargingSlot updateManyAndReturn
   */
  export type ChargingSlotUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingSlot
     */
    select?: ChargingSlotSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingSlot
     */
    omit?: ChargingSlotOmit<ExtArgs> | null
    /**
     * The data used to update ChargingSlots.
     */
    data: XOR<ChargingSlotUpdateManyMutationInput, ChargingSlotUncheckedUpdateManyInput>
    /**
     * Filter which ChargingSlots to update
     */
    where?: ChargingSlotWhereInput
    /**
     * Limit how many ChargingSlots to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingSlotIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChargingSlot upsert
   */
  export type ChargingSlotUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingSlot
     */
    select?: ChargingSlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingSlot
     */
    omit?: ChargingSlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingSlotInclude<ExtArgs> | null
    /**
     * The filter to search for the ChargingSlot to update in case it exists.
     */
    where: ChargingSlotWhereUniqueInput
    /**
     * In case the ChargingSlot found by the `where` argument doesn't exist, create a new ChargingSlot with this data.
     */
    create: XOR<ChargingSlotCreateInput, ChargingSlotUncheckedCreateInput>
    /**
     * In case the ChargingSlot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChargingSlotUpdateInput, ChargingSlotUncheckedUpdateInput>
  }

  /**
   * ChargingSlot delete
   */
  export type ChargingSlotDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingSlot
     */
    select?: ChargingSlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingSlot
     */
    omit?: ChargingSlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingSlotInclude<ExtArgs> | null
    /**
     * Filter which ChargingSlot to delete.
     */
    where: ChargingSlotWhereUniqueInput
  }

  /**
   * ChargingSlot deleteMany
   */
  export type ChargingSlotDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChargingSlots to delete
     */
    where?: ChargingSlotWhereInput
    /**
     * Limit how many ChargingSlots to delete.
     */
    limit?: number
  }

  /**
   * ChargingSlot without action
   */
  export type ChargingSlotDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingSlot
     */
    select?: ChargingSlotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingSlot
     */
    omit?: ChargingSlotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingSlotInclude<ExtArgs> | null
  }


  /**
   * Model Review
   */

  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewAvgAggregateOutputType = {
    rating: number | null
  }

  export type ReviewSumAggregateOutputType = {
    rating: number | null
  }

  export type ReviewMinAggregateOutputType = {
    id: string | null
    userId: string | null
    stationId: string | null
    rating: number | null
    comment: string | null
    createdAt: Date | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    stationId: string | null
    rating: number | null
    comment: string | null
    createdAt: Date | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    userId: number
    stationId: number
    rating: number
    comment: number
    createdAt: number
    _all: number
  }


  export type ReviewAvgAggregateInputType = {
    rating?: true
  }

  export type ReviewSumAggregateInputType = {
    rating?: true
  }

  export type ReviewMinAggregateInputType = {
    id?: true
    userId?: true
    stationId?: true
    rating?: true
    comment?: true
    createdAt?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    userId?: true
    stationId?: true
    rating?: true
    comment?: true
    createdAt?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    userId?: true
    stationId?: true
    rating?: true
    comment?: true
    createdAt?: true
    _all?: true
  }

  export type ReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Review to aggregate.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithAggregationInput | ReviewOrderByWithAggregationInput[]
    by: ReviewScalarFieldEnum[] | ReviewScalarFieldEnum
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _avg?: ReviewAvgAggregateInputType
    _sum?: ReviewSumAggregateInputType
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }

  export type ReviewGroupByOutputType = {
    id: string
    userId: string
    stationId: string
    rating: number
    comment: string | null
    createdAt: Date
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    stationId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    stationId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    stationId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectScalar = {
    id?: boolean
    userId?: boolean
    stationId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
  }

  export type ReviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "stationId" | "rating" | "comment" | "createdAt", ExtArgs["result"]["review"]>
  export type ReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
  }
  export type ReviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
  }
  export type ReviewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
  }

  export type $ReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Review"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      station: Prisma.$StationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      stationId: string
      rating: number
      comment: string | null
      createdAt: Date
    }, ExtArgs["result"]["review"]>
    composites: {}
  }

  type ReviewGetPayload<S extends boolean | null | undefined | ReviewDefaultArgs> = $Result.GetResult<Prisma.$ReviewPayload, S>

  type ReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface ReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Review'], meta: { name: 'Review' } }
    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReviewFindUniqueArgs>(args: SelectSubset<T, ReviewFindUniqueArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Review that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, ReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReviewFindFirstArgs>(args?: SelectSubset<T, ReviewFindFirstArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, ReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReviewFindManyArgs>(args?: SelectSubset<T, ReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
     */
    create<T extends ReviewCreateArgs>(args: SelectSubset<T, ReviewCreateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reviews.
     * @param {ReviewCreateManyArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReviewCreateManyArgs>(args?: SelectSubset<T, ReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reviews and returns the data saved in the database.
     * @param {ReviewCreateManyAndReturnArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReviewCreateManyAndReturnArgs>(args?: SelectSubset<T, ReviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
     */
    delete<T extends ReviewDeleteArgs>(args: SelectSubset<T, ReviewDeleteArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReviewUpdateArgs>(args: SelectSubset<T, ReviewUpdateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReviewDeleteManyArgs>(args?: SelectSubset<T, ReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReviewUpdateManyArgs>(args: SelectSubset<T, ReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews and returns the data updated in the database.
     * @param {ReviewUpdateManyAndReturnArgs} args - Arguments to update many Reviews.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReviewUpdateManyAndReturnArgs>(args: SelectSubset<T, ReviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
     */
    upsert<T extends ReviewUpsertArgs>(args: SelectSubset<T, ReviewUpsertArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Review model
   */
  readonly fields: ReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    station<T extends StationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StationDefaultArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Review model
   */
  interface ReviewFieldRefs {
    readonly id: FieldRef<"Review", 'String'>
    readonly userId: FieldRef<"Review", 'String'>
    readonly stationId: FieldRef<"Review", 'String'>
    readonly rating: FieldRef<"Review", 'Int'>
    readonly comment: FieldRef<"Review", 'String'>
    readonly createdAt: FieldRef<"Review", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Review findUnique
   */
  export type ReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findUniqueOrThrow
   */
  export type ReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findFirst
   */
  export type ReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findFirstOrThrow
   */
  export type ReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findMany
   */
  export type ReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review create
   */
  export type ReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a Review.
     */
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }

  /**
   * Review createMany
   */
  export type ReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Review createManyAndReturn
   */
  export type ReviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Review update
   */
  export type ReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a Review.
     */
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to update.
     */
    limit?: number
  }

  /**
   * Review updateManyAndReturn
   */
  export type ReviewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Review upsert
   */
  export type ReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the Review to update in case it exists.
     */
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     */
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }

  /**
   * Review delete
   */
  export type ReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter which Review to delete.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reviews to delete
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to delete.
     */
    limit?: number
  }

  /**
   * Review without action
   */
  export type ReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
  }


  /**
   * Model ChargingHistory
   */

  export type AggregateChargingHistory = {
    _count: ChargingHistoryCountAggregateOutputType | null
    _avg: ChargingHistoryAvgAggregateOutputType | null
    _sum: ChargingHistorySumAggregateOutputType | null
    _min: ChargingHistoryMinAggregateOutputType | null
    _max: ChargingHistoryMaxAggregateOutputType | null
  }

  export type ChargingHistoryAvgAggregateOutputType = {
    energyUsed: number | null
    cost: number | null
    duration: number | null
  }

  export type ChargingHistorySumAggregateOutputType = {
    energyUsed: number | null
    cost: number | null
    duration: number | null
  }

  export type ChargingHistoryMinAggregateOutputType = {
    id: string | null
    userId: string | null
    stationId: string | null
    bookingId: string | null
    evId: string | null
    energyUsed: number | null
    cost: number | null
    duration: number | null
    createdAt: Date | null
  }

  export type ChargingHistoryMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    stationId: string | null
    bookingId: string | null
    evId: string | null
    energyUsed: number | null
    cost: number | null
    duration: number | null
    createdAt: Date | null
  }

  export type ChargingHistoryCountAggregateOutputType = {
    id: number
    userId: number
    stationId: number
    bookingId: number
    evId: number
    energyUsed: number
    cost: number
    duration: number
    createdAt: number
    _all: number
  }


  export type ChargingHistoryAvgAggregateInputType = {
    energyUsed?: true
    cost?: true
    duration?: true
  }

  export type ChargingHistorySumAggregateInputType = {
    energyUsed?: true
    cost?: true
    duration?: true
  }

  export type ChargingHistoryMinAggregateInputType = {
    id?: true
    userId?: true
    stationId?: true
    bookingId?: true
    evId?: true
    energyUsed?: true
    cost?: true
    duration?: true
    createdAt?: true
  }

  export type ChargingHistoryMaxAggregateInputType = {
    id?: true
    userId?: true
    stationId?: true
    bookingId?: true
    evId?: true
    energyUsed?: true
    cost?: true
    duration?: true
    createdAt?: true
  }

  export type ChargingHistoryCountAggregateInputType = {
    id?: true
    userId?: true
    stationId?: true
    bookingId?: true
    evId?: true
    energyUsed?: true
    cost?: true
    duration?: true
    createdAt?: true
    _all?: true
  }

  export type ChargingHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChargingHistory to aggregate.
     */
    where?: ChargingHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChargingHistories to fetch.
     */
    orderBy?: ChargingHistoryOrderByWithRelationInput | ChargingHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChargingHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChargingHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChargingHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChargingHistories
    **/
    _count?: true | ChargingHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChargingHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChargingHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChargingHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChargingHistoryMaxAggregateInputType
  }

  export type GetChargingHistoryAggregateType<T extends ChargingHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateChargingHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChargingHistory[P]>
      : GetScalarType<T[P], AggregateChargingHistory[P]>
  }




  export type ChargingHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChargingHistoryWhereInput
    orderBy?: ChargingHistoryOrderByWithAggregationInput | ChargingHistoryOrderByWithAggregationInput[]
    by: ChargingHistoryScalarFieldEnum[] | ChargingHistoryScalarFieldEnum
    having?: ChargingHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChargingHistoryCountAggregateInputType | true
    _avg?: ChargingHistoryAvgAggregateInputType
    _sum?: ChargingHistorySumAggregateInputType
    _min?: ChargingHistoryMinAggregateInputType
    _max?: ChargingHistoryMaxAggregateInputType
  }

  export type ChargingHistoryGroupByOutputType = {
    id: string
    userId: string
    stationId: string
    bookingId: string | null
    evId: string
    energyUsed: number
    cost: number
    duration: number
    createdAt: Date
    _count: ChargingHistoryCountAggregateOutputType | null
    _avg: ChargingHistoryAvgAggregateOutputType | null
    _sum: ChargingHistorySumAggregateOutputType | null
    _min: ChargingHistoryMinAggregateOutputType | null
    _max: ChargingHistoryMaxAggregateOutputType | null
  }

  type GetChargingHistoryGroupByPayload<T extends ChargingHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChargingHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChargingHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChargingHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], ChargingHistoryGroupByOutputType[P]>
        }
      >
    >


  export type ChargingHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    stationId?: boolean
    bookingId?: boolean
    evId?: boolean
    energyUsed?: boolean
    cost?: boolean
    duration?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
    booking?: boolean | ChargingHistory$bookingArgs<ExtArgs>
  }, ExtArgs["result"]["chargingHistory"]>

  export type ChargingHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    stationId?: boolean
    bookingId?: boolean
    evId?: boolean
    energyUsed?: boolean
    cost?: boolean
    duration?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
    booking?: boolean | ChargingHistory$bookingArgs<ExtArgs>
  }, ExtArgs["result"]["chargingHistory"]>

  export type ChargingHistorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    stationId?: boolean
    bookingId?: boolean
    evId?: boolean
    energyUsed?: boolean
    cost?: boolean
    duration?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
    booking?: boolean | ChargingHistory$bookingArgs<ExtArgs>
  }, ExtArgs["result"]["chargingHistory"]>

  export type ChargingHistorySelectScalar = {
    id?: boolean
    userId?: boolean
    stationId?: boolean
    bookingId?: boolean
    evId?: boolean
    energyUsed?: boolean
    cost?: boolean
    duration?: boolean
    createdAt?: boolean
  }

  export type ChargingHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "stationId" | "bookingId" | "evId" | "energyUsed" | "cost" | "duration" | "createdAt", ExtArgs["result"]["chargingHistory"]>
  export type ChargingHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
    booking?: boolean | ChargingHistory$bookingArgs<ExtArgs>
  }
  export type ChargingHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
    booking?: boolean | ChargingHistory$bookingArgs<ExtArgs>
  }
  export type ChargingHistoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
    booking?: boolean | ChargingHistory$bookingArgs<ExtArgs>
  }

  export type $ChargingHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChargingHistory"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      station: Prisma.$StationPayload<ExtArgs>
      booking: Prisma.$BookingPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      stationId: string
      bookingId: string | null
      evId: string
      energyUsed: number
      cost: number
      duration: number
      createdAt: Date
    }, ExtArgs["result"]["chargingHistory"]>
    composites: {}
  }

  type ChargingHistoryGetPayload<S extends boolean | null | undefined | ChargingHistoryDefaultArgs> = $Result.GetResult<Prisma.$ChargingHistoryPayload, S>

  type ChargingHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChargingHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChargingHistoryCountAggregateInputType | true
    }

  export interface ChargingHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChargingHistory'], meta: { name: 'ChargingHistory' } }
    /**
     * Find zero or one ChargingHistory that matches the filter.
     * @param {ChargingHistoryFindUniqueArgs} args - Arguments to find a ChargingHistory
     * @example
     * // Get one ChargingHistory
     * const chargingHistory = await prisma.chargingHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChargingHistoryFindUniqueArgs>(args: SelectSubset<T, ChargingHistoryFindUniqueArgs<ExtArgs>>): Prisma__ChargingHistoryClient<$Result.GetResult<Prisma.$ChargingHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChargingHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChargingHistoryFindUniqueOrThrowArgs} args - Arguments to find a ChargingHistory
     * @example
     * // Get one ChargingHistory
     * const chargingHistory = await prisma.chargingHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChargingHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ChargingHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChargingHistoryClient<$Result.GetResult<Prisma.$ChargingHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChargingHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChargingHistoryFindFirstArgs} args - Arguments to find a ChargingHistory
     * @example
     * // Get one ChargingHistory
     * const chargingHistory = await prisma.chargingHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChargingHistoryFindFirstArgs>(args?: SelectSubset<T, ChargingHistoryFindFirstArgs<ExtArgs>>): Prisma__ChargingHistoryClient<$Result.GetResult<Prisma.$ChargingHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChargingHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChargingHistoryFindFirstOrThrowArgs} args - Arguments to find a ChargingHistory
     * @example
     * // Get one ChargingHistory
     * const chargingHistory = await prisma.chargingHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChargingHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ChargingHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChargingHistoryClient<$Result.GetResult<Prisma.$ChargingHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChargingHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChargingHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChargingHistories
     * const chargingHistories = await prisma.chargingHistory.findMany()
     * 
     * // Get first 10 ChargingHistories
     * const chargingHistories = await prisma.chargingHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chargingHistoryWithIdOnly = await prisma.chargingHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChargingHistoryFindManyArgs>(args?: SelectSubset<T, ChargingHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChargingHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChargingHistory.
     * @param {ChargingHistoryCreateArgs} args - Arguments to create a ChargingHistory.
     * @example
     * // Create one ChargingHistory
     * const ChargingHistory = await prisma.chargingHistory.create({
     *   data: {
     *     // ... data to create a ChargingHistory
     *   }
     * })
     * 
     */
    create<T extends ChargingHistoryCreateArgs>(args: SelectSubset<T, ChargingHistoryCreateArgs<ExtArgs>>): Prisma__ChargingHistoryClient<$Result.GetResult<Prisma.$ChargingHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChargingHistories.
     * @param {ChargingHistoryCreateManyArgs} args - Arguments to create many ChargingHistories.
     * @example
     * // Create many ChargingHistories
     * const chargingHistory = await prisma.chargingHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChargingHistoryCreateManyArgs>(args?: SelectSubset<T, ChargingHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChargingHistories and returns the data saved in the database.
     * @param {ChargingHistoryCreateManyAndReturnArgs} args - Arguments to create many ChargingHistories.
     * @example
     * // Create many ChargingHistories
     * const chargingHistory = await prisma.chargingHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChargingHistories and only return the `id`
     * const chargingHistoryWithIdOnly = await prisma.chargingHistory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChargingHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, ChargingHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChargingHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChargingHistory.
     * @param {ChargingHistoryDeleteArgs} args - Arguments to delete one ChargingHistory.
     * @example
     * // Delete one ChargingHistory
     * const ChargingHistory = await prisma.chargingHistory.delete({
     *   where: {
     *     // ... filter to delete one ChargingHistory
     *   }
     * })
     * 
     */
    delete<T extends ChargingHistoryDeleteArgs>(args: SelectSubset<T, ChargingHistoryDeleteArgs<ExtArgs>>): Prisma__ChargingHistoryClient<$Result.GetResult<Prisma.$ChargingHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChargingHistory.
     * @param {ChargingHistoryUpdateArgs} args - Arguments to update one ChargingHistory.
     * @example
     * // Update one ChargingHistory
     * const chargingHistory = await prisma.chargingHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChargingHistoryUpdateArgs>(args: SelectSubset<T, ChargingHistoryUpdateArgs<ExtArgs>>): Prisma__ChargingHistoryClient<$Result.GetResult<Prisma.$ChargingHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChargingHistories.
     * @param {ChargingHistoryDeleteManyArgs} args - Arguments to filter ChargingHistories to delete.
     * @example
     * // Delete a few ChargingHistories
     * const { count } = await prisma.chargingHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChargingHistoryDeleteManyArgs>(args?: SelectSubset<T, ChargingHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChargingHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChargingHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChargingHistories
     * const chargingHistory = await prisma.chargingHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChargingHistoryUpdateManyArgs>(args: SelectSubset<T, ChargingHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChargingHistories and returns the data updated in the database.
     * @param {ChargingHistoryUpdateManyAndReturnArgs} args - Arguments to update many ChargingHistories.
     * @example
     * // Update many ChargingHistories
     * const chargingHistory = await prisma.chargingHistory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChargingHistories and only return the `id`
     * const chargingHistoryWithIdOnly = await prisma.chargingHistory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChargingHistoryUpdateManyAndReturnArgs>(args: SelectSubset<T, ChargingHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChargingHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChargingHistory.
     * @param {ChargingHistoryUpsertArgs} args - Arguments to update or create a ChargingHistory.
     * @example
     * // Update or create a ChargingHistory
     * const chargingHistory = await prisma.chargingHistory.upsert({
     *   create: {
     *     // ... data to create a ChargingHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChargingHistory we want to update
     *   }
     * })
     */
    upsert<T extends ChargingHistoryUpsertArgs>(args: SelectSubset<T, ChargingHistoryUpsertArgs<ExtArgs>>): Prisma__ChargingHistoryClient<$Result.GetResult<Prisma.$ChargingHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChargingHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChargingHistoryCountArgs} args - Arguments to filter ChargingHistories to count.
     * @example
     * // Count the number of ChargingHistories
     * const count = await prisma.chargingHistory.count({
     *   where: {
     *     // ... the filter for the ChargingHistories we want to count
     *   }
     * })
    **/
    count<T extends ChargingHistoryCountArgs>(
      args?: Subset<T, ChargingHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChargingHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChargingHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChargingHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChargingHistoryAggregateArgs>(args: Subset<T, ChargingHistoryAggregateArgs>): Prisma.PrismaPromise<GetChargingHistoryAggregateType<T>>

    /**
     * Group by ChargingHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChargingHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChargingHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChargingHistoryGroupByArgs['orderBy'] }
        : { orderBy?: ChargingHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChargingHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChargingHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChargingHistory model
   */
  readonly fields: ChargingHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChargingHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChargingHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    station<T extends StationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StationDefaultArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    booking<T extends ChargingHistory$bookingArgs<ExtArgs> = {}>(args?: Subset<T, ChargingHistory$bookingArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChargingHistory model
   */
  interface ChargingHistoryFieldRefs {
    readonly id: FieldRef<"ChargingHistory", 'String'>
    readonly userId: FieldRef<"ChargingHistory", 'String'>
    readonly stationId: FieldRef<"ChargingHistory", 'String'>
    readonly bookingId: FieldRef<"ChargingHistory", 'String'>
    readonly evId: FieldRef<"ChargingHistory", 'String'>
    readonly energyUsed: FieldRef<"ChargingHistory", 'Float'>
    readonly cost: FieldRef<"ChargingHistory", 'Float'>
    readonly duration: FieldRef<"ChargingHistory", 'Int'>
    readonly createdAt: FieldRef<"ChargingHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChargingHistory findUnique
   */
  export type ChargingHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingHistory
     */
    select?: ChargingHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingHistory
     */
    omit?: ChargingHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ChargingHistory to fetch.
     */
    where: ChargingHistoryWhereUniqueInput
  }

  /**
   * ChargingHistory findUniqueOrThrow
   */
  export type ChargingHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingHistory
     */
    select?: ChargingHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingHistory
     */
    omit?: ChargingHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ChargingHistory to fetch.
     */
    where: ChargingHistoryWhereUniqueInput
  }

  /**
   * ChargingHistory findFirst
   */
  export type ChargingHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingHistory
     */
    select?: ChargingHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingHistory
     */
    omit?: ChargingHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ChargingHistory to fetch.
     */
    where?: ChargingHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChargingHistories to fetch.
     */
    orderBy?: ChargingHistoryOrderByWithRelationInput | ChargingHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChargingHistories.
     */
    cursor?: ChargingHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChargingHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChargingHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChargingHistories.
     */
    distinct?: ChargingHistoryScalarFieldEnum | ChargingHistoryScalarFieldEnum[]
  }

  /**
   * ChargingHistory findFirstOrThrow
   */
  export type ChargingHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingHistory
     */
    select?: ChargingHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingHistory
     */
    omit?: ChargingHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ChargingHistory to fetch.
     */
    where?: ChargingHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChargingHistories to fetch.
     */
    orderBy?: ChargingHistoryOrderByWithRelationInput | ChargingHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChargingHistories.
     */
    cursor?: ChargingHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChargingHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChargingHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChargingHistories.
     */
    distinct?: ChargingHistoryScalarFieldEnum | ChargingHistoryScalarFieldEnum[]
  }

  /**
   * ChargingHistory findMany
   */
  export type ChargingHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingHistory
     */
    select?: ChargingHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingHistory
     */
    omit?: ChargingHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ChargingHistories to fetch.
     */
    where?: ChargingHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChargingHistories to fetch.
     */
    orderBy?: ChargingHistoryOrderByWithRelationInput | ChargingHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChargingHistories.
     */
    cursor?: ChargingHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChargingHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChargingHistories.
     */
    skip?: number
    distinct?: ChargingHistoryScalarFieldEnum | ChargingHistoryScalarFieldEnum[]
  }

  /**
   * ChargingHistory create
   */
  export type ChargingHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingHistory
     */
    select?: ChargingHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingHistory
     */
    omit?: ChargingHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ChargingHistory.
     */
    data: XOR<ChargingHistoryCreateInput, ChargingHistoryUncheckedCreateInput>
  }

  /**
   * ChargingHistory createMany
   */
  export type ChargingHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChargingHistories.
     */
    data: ChargingHistoryCreateManyInput | ChargingHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChargingHistory createManyAndReturn
   */
  export type ChargingHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingHistory
     */
    select?: ChargingHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingHistory
     */
    omit?: ChargingHistoryOmit<ExtArgs> | null
    /**
     * The data used to create many ChargingHistories.
     */
    data: ChargingHistoryCreateManyInput | ChargingHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChargingHistory update
   */
  export type ChargingHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingHistory
     */
    select?: ChargingHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingHistory
     */
    omit?: ChargingHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ChargingHistory.
     */
    data: XOR<ChargingHistoryUpdateInput, ChargingHistoryUncheckedUpdateInput>
    /**
     * Choose, which ChargingHistory to update.
     */
    where: ChargingHistoryWhereUniqueInput
  }

  /**
   * ChargingHistory updateMany
   */
  export type ChargingHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChargingHistories.
     */
    data: XOR<ChargingHistoryUpdateManyMutationInput, ChargingHistoryUncheckedUpdateManyInput>
    /**
     * Filter which ChargingHistories to update
     */
    where?: ChargingHistoryWhereInput
    /**
     * Limit how many ChargingHistories to update.
     */
    limit?: number
  }

  /**
   * ChargingHistory updateManyAndReturn
   */
  export type ChargingHistoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingHistory
     */
    select?: ChargingHistorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingHistory
     */
    omit?: ChargingHistoryOmit<ExtArgs> | null
    /**
     * The data used to update ChargingHistories.
     */
    data: XOR<ChargingHistoryUpdateManyMutationInput, ChargingHistoryUncheckedUpdateManyInput>
    /**
     * Filter which ChargingHistories to update
     */
    where?: ChargingHistoryWhereInput
    /**
     * Limit how many ChargingHistories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChargingHistory upsert
   */
  export type ChargingHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingHistory
     */
    select?: ChargingHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingHistory
     */
    omit?: ChargingHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ChargingHistory to update in case it exists.
     */
    where: ChargingHistoryWhereUniqueInput
    /**
     * In case the ChargingHistory found by the `where` argument doesn't exist, create a new ChargingHistory with this data.
     */
    create: XOR<ChargingHistoryCreateInput, ChargingHistoryUncheckedCreateInput>
    /**
     * In case the ChargingHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChargingHistoryUpdateInput, ChargingHistoryUncheckedUpdateInput>
  }

  /**
   * ChargingHistory delete
   */
  export type ChargingHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingHistory
     */
    select?: ChargingHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingHistory
     */
    omit?: ChargingHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingHistoryInclude<ExtArgs> | null
    /**
     * Filter which ChargingHistory to delete.
     */
    where: ChargingHistoryWhereUniqueInput
  }

  /**
   * ChargingHistory deleteMany
   */
  export type ChargingHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChargingHistories to delete
     */
    where?: ChargingHistoryWhereInput
    /**
     * Limit how many ChargingHistories to delete.
     */
    limit?: number
  }

  /**
   * ChargingHistory.booking
   */
  export type ChargingHistory$bookingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    where?: BookingWhereInput
  }

  /**
   * ChargingHistory without action
   */
  export type ChargingHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChargingHistory
     */
    select?: ChargingHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChargingHistory
     */
    omit?: ChargingHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChargingHistoryInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    message: string | null
    type: $Enums.NotificationType | null
    isRead: boolean | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    message: string | null
    type: $Enums.NotificationType | null
    isRead: boolean | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    message: number
    type: number
    isRead: number
    createdAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    message?: true
    type?: true
    isRead?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    message?: true
    type?: true
    isRead?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    message?: true
    type?: true
    isRead?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    userId: string
    message: string
    type: $Enums.NotificationType
    isRead: boolean
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    createdAt?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "message" | "type" | "isRead" | "createdAt", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      message: string
      type: $Enums.NotificationType
      isRead: boolean
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'NotificationType'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model OTP
   */

  export type AggregateOTP = {
    _count: OTPCountAggregateOutputType | null
    _min: OTPMinAggregateOutputType | null
    _max: OTPMaxAggregateOutputType | null
  }

  export type OTPMinAggregateOutputType = {
    id: string | null
    userId: string | null
    otp: string | null
    createdAt: Date | null
    expiresAt: Date | null
    isUsed: boolean | null
  }

  export type OTPMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    otp: string | null
    createdAt: Date | null
    expiresAt: Date | null
    isUsed: boolean | null
  }

  export type OTPCountAggregateOutputType = {
    id: number
    userId: number
    otp: number
    createdAt: number
    expiresAt: number
    isUsed: number
    _all: number
  }


  export type OTPMinAggregateInputType = {
    id?: true
    userId?: true
    otp?: true
    createdAt?: true
    expiresAt?: true
    isUsed?: true
  }

  export type OTPMaxAggregateInputType = {
    id?: true
    userId?: true
    otp?: true
    createdAt?: true
    expiresAt?: true
    isUsed?: true
  }

  export type OTPCountAggregateInputType = {
    id?: true
    userId?: true
    otp?: true
    createdAt?: true
    expiresAt?: true
    isUsed?: true
    _all?: true
  }

  export type OTPAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OTP to aggregate.
     */
    where?: OTPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OTPS to fetch.
     */
    orderBy?: OTPOrderByWithRelationInput | OTPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OTPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OTPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OTPS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OTPS
    **/
    _count?: true | OTPCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OTPMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OTPMaxAggregateInputType
  }

  export type GetOTPAggregateType<T extends OTPAggregateArgs> = {
        [P in keyof T & keyof AggregateOTP]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOTP[P]>
      : GetScalarType<T[P], AggregateOTP[P]>
  }




  export type OTPGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OTPWhereInput
    orderBy?: OTPOrderByWithAggregationInput | OTPOrderByWithAggregationInput[]
    by: OTPScalarFieldEnum[] | OTPScalarFieldEnum
    having?: OTPScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OTPCountAggregateInputType | true
    _min?: OTPMinAggregateInputType
    _max?: OTPMaxAggregateInputType
  }

  export type OTPGroupByOutputType = {
    id: string
    userId: string
    otp: string
    createdAt: Date
    expiresAt: Date
    isUsed: boolean
    _count: OTPCountAggregateOutputType | null
    _min: OTPMinAggregateOutputType | null
    _max: OTPMaxAggregateOutputType | null
  }

  type GetOTPGroupByPayload<T extends OTPGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OTPGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OTPGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OTPGroupByOutputType[P]>
            : GetScalarType<T[P], OTPGroupByOutputType[P]>
        }
      >
    >


  export type OTPSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    otp?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    isUsed?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["oTP"]>

  export type OTPSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    otp?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    isUsed?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["oTP"]>

  export type OTPSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    otp?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    isUsed?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["oTP"]>

  export type OTPSelectScalar = {
    id?: boolean
    userId?: boolean
    otp?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    isUsed?: boolean
  }

  export type OTPOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "otp" | "createdAt" | "expiresAt" | "isUsed", ExtArgs["result"]["oTP"]>
  export type OTPInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OTPIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OTPIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OTPPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OTP"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      otp: string
      createdAt: Date
      expiresAt: Date
      isUsed: boolean
    }, ExtArgs["result"]["oTP"]>
    composites: {}
  }

  type OTPGetPayload<S extends boolean | null | undefined | OTPDefaultArgs> = $Result.GetResult<Prisma.$OTPPayload, S>

  type OTPCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OTPFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OTPCountAggregateInputType | true
    }

  export interface OTPDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OTP'], meta: { name: 'OTP' } }
    /**
     * Find zero or one OTP that matches the filter.
     * @param {OTPFindUniqueArgs} args - Arguments to find a OTP
     * @example
     * // Get one OTP
     * const oTP = await prisma.oTP.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OTPFindUniqueArgs>(args: SelectSubset<T, OTPFindUniqueArgs<ExtArgs>>): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OTP that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OTPFindUniqueOrThrowArgs} args - Arguments to find a OTP
     * @example
     * // Get one OTP
     * const oTP = await prisma.oTP.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OTPFindUniqueOrThrowArgs>(args: SelectSubset<T, OTPFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OTP that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPFindFirstArgs} args - Arguments to find a OTP
     * @example
     * // Get one OTP
     * const oTP = await prisma.oTP.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OTPFindFirstArgs>(args?: SelectSubset<T, OTPFindFirstArgs<ExtArgs>>): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OTP that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPFindFirstOrThrowArgs} args - Arguments to find a OTP
     * @example
     * // Get one OTP
     * const oTP = await prisma.oTP.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OTPFindFirstOrThrowArgs>(args?: SelectSubset<T, OTPFindFirstOrThrowArgs<ExtArgs>>): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OTPS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OTPS
     * const oTPS = await prisma.oTP.findMany()
     * 
     * // Get first 10 OTPS
     * const oTPS = await prisma.oTP.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const oTPWithIdOnly = await prisma.oTP.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OTPFindManyArgs>(args?: SelectSubset<T, OTPFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OTP.
     * @param {OTPCreateArgs} args - Arguments to create a OTP.
     * @example
     * // Create one OTP
     * const OTP = await prisma.oTP.create({
     *   data: {
     *     // ... data to create a OTP
     *   }
     * })
     * 
     */
    create<T extends OTPCreateArgs>(args: SelectSubset<T, OTPCreateArgs<ExtArgs>>): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OTPS.
     * @param {OTPCreateManyArgs} args - Arguments to create many OTPS.
     * @example
     * // Create many OTPS
     * const oTP = await prisma.oTP.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OTPCreateManyArgs>(args?: SelectSubset<T, OTPCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OTPS and returns the data saved in the database.
     * @param {OTPCreateManyAndReturnArgs} args - Arguments to create many OTPS.
     * @example
     * // Create many OTPS
     * const oTP = await prisma.oTP.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OTPS and only return the `id`
     * const oTPWithIdOnly = await prisma.oTP.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OTPCreateManyAndReturnArgs>(args?: SelectSubset<T, OTPCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OTP.
     * @param {OTPDeleteArgs} args - Arguments to delete one OTP.
     * @example
     * // Delete one OTP
     * const OTP = await prisma.oTP.delete({
     *   where: {
     *     // ... filter to delete one OTP
     *   }
     * })
     * 
     */
    delete<T extends OTPDeleteArgs>(args: SelectSubset<T, OTPDeleteArgs<ExtArgs>>): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OTP.
     * @param {OTPUpdateArgs} args - Arguments to update one OTP.
     * @example
     * // Update one OTP
     * const oTP = await prisma.oTP.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OTPUpdateArgs>(args: SelectSubset<T, OTPUpdateArgs<ExtArgs>>): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OTPS.
     * @param {OTPDeleteManyArgs} args - Arguments to filter OTPS to delete.
     * @example
     * // Delete a few OTPS
     * const { count } = await prisma.oTP.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OTPDeleteManyArgs>(args?: SelectSubset<T, OTPDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OTPS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OTPS
     * const oTP = await prisma.oTP.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OTPUpdateManyArgs>(args: SelectSubset<T, OTPUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OTPS and returns the data updated in the database.
     * @param {OTPUpdateManyAndReturnArgs} args - Arguments to update many OTPS.
     * @example
     * // Update many OTPS
     * const oTP = await prisma.oTP.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OTPS and only return the `id`
     * const oTPWithIdOnly = await prisma.oTP.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OTPUpdateManyAndReturnArgs>(args: SelectSubset<T, OTPUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OTP.
     * @param {OTPUpsertArgs} args - Arguments to update or create a OTP.
     * @example
     * // Update or create a OTP
     * const oTP = await prisma.oTP.upsert({
     *   create: {
     *     // ... data to create a OTP
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OTP we want to update
     *   }
     * })
     */
    upsert<T extends OTPUpsertArgs>(args: SelectSubset<T, OTPUpsertArgs<ExtArgs>>): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OTPS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPCountArgs} args - Arguments to filter OTPS to count.
     * @example
     * // Count the number of OTPS
     * const count = await prisma.oTP.count({
     *   where: {
     *     // ... the filter for the OTPS we want to count
     *   }
     * })
    **/
    count<T extends OTPCountArgs>(
      args?: Subset<T, OTPCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OTPCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OTP.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OTPAggregateArgs>(args: Subset<T, OTPAggregateArgs>): Prisma.PrismaPromise<GetOTPAggregateType<T>>

    /**
     * Group by OTP.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OTPGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OTPGroupByArgs['orderBy'] }
        : { orderBy?: OTPGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OTPGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOTPGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OTP model
   */
  readonly fields: OTPFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OTP.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OTPClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OTP model
   */
  interface OTPFieldRefs {
    readonly id: FieldRef<"OTP", 'String'>
    readonly userId: FieldRef<"OTP", 'String'>
    readonly otp: FieldRef<"OTP", 'String'>
    readonly createdAt: FieldRef<"OTP", 'DateTime'>
    readonly expiresAt: FieldRef<"OTP", 'DateTime'>
    readonly isUsed: FieldRef<"OTP", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * OTP findUnique
   */
  export type OTPFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTP
     */
    omit?: OTPOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OTPInclude<ExtArgs> | null
    /**
     * Filter, which OTP to fetch.
     */
    where: OTPWhereUniqueInput
  }

  /**
   * OTP findUniqueOrThrow
   */
  export type OTPFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTP
     */
    omit?: OTPOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OTPInclude<ExtArgs> | null
    /**
     * Filter, which OTP to fetch.
     */
    where: OTPWhereUniqueInput
  }

  /**
   * OTP findFirst
   */
  export type OTPFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTP
     */
    omit?: OTPOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OTPInclude<ExtArgs> | null
    /**
     * Filter, which OTP to fetch.
     */
    where?: OTPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OTPS to fetch.
     */
    orderBy?: OTPOrderByWithRelationInput | OTPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OTPS.
     */
    cursor?: OTPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OTPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OTPS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OTPS.
     */
    distinct?: OTPScalarFieldEnum | OTPScalarFieldEnum[]
  }

  /**
   * OTP findFirstOrThrow
   */
  export type OTPFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTP
     */
    omit?: OTPOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OTPInclude<ExtArgs> | null
    /**
     * Filter, which OTP to fetch.
     */
    where?: OTPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OTPS to fetch.
     */
    orderBy?: OTPOrderByWithRelationInput | OTPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OTPS.
     */
    cursor?: OTPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OTPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OTPS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OTPS.
     */
    distinct?: OTPScalarFieldEnum | OTPScalarFieldEnum[]
  }

  /**
   * OTP findMany
   */
  export type OTPFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTP
     */
    omit?: OTPOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OTPInclude<ExtArgs> | null
    /**
     * Filter, which OTPS to fetch.
     */
    where?: OTPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OTPS to fetch.
     */
    orderBy?: OTPOrderByWithRelationInput | OTPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OTPS.
     */
    cursor?: OTPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OTPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OTPS.
     */
    skip?: number
    distinct?: OTPScalarFieldEnum | OTPScalarFieldEnum[]
  }

  /**
   * OTP create
   */
  export type OTPCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTP
     */
    omit?: OTPOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OTPInclude<ExtArgs> | null
    /**
     * The data needed to create a OTP.
     */
    data: XOR<OTPCreateInput, OTPUncheckedCreateInput>
  }

  /**
   * OTP createMany
   */
  export type OTPCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OTPS.
     */
    data: OTPCreateManyInput | OTPCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OTP createManyAndReturn
   */
  export type OTPCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OTP
     */
    omit?: OTPOmit<ExtArgs> | null
    /**
     * The data used to create many OTPS.
     */
    data: OTPCreateManyInput | OTPCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OTPIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OTP update
   */
  export type OTPUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTP
     */
    omit?: OTPOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OTPInclude<ExtArgs> | null
    /**
     * The data needed to update a OTP.
     */
    data: XOR<OTPUpdateInput, OTPUncheckedUpdateInput>
    /**
     * Choose, which OTP to update.
     */
    where: OTPWhereUniqueInput
  }

  /**
   * OTP updateMany
   */
  export type OTPUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OTPS.
     */
    data: XOR<OTPUpdateManyMutationInput, OTPUncheckedUpdateManyInput>
    /**
     * Filter which OTPS to update
     */
    where?: OTPWhereInput
    /**
     * Limit how many OTPS to update.
     */
    limit?: number
  }

  /**
   * OTP updateManyAndReturn
   */
  export type OTPUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OTP
     */
    omit?: OTPOmit<ExtArgs> | null
    /**
     * The data used to update OTPS.
     */
    data: XOR<OTPUpdateManyMutationInput, OTPUncheckedUpdateManyInput>
    /**
     * Filter which OTPS to update
     */
    where?: OTPWhereInput
    /**
     * Limit how many OTPS to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OTPIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OTP upsert
   */
  export type OTPUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTP
     */
    omit?: OTPOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OTPInclude<ExtArgs> | null
    /**
     * The filter to search for the OTP to update in case it exists.
     */
    where: OTPWhereUniqueInput
    /**
     * In case the OTP found by the `where` argument doesn't exist, create a new OTP with this data.
     */
    create: XOR<OTPCreateInput, OTPUncheckedCreateInput>
    /**
     * In case the OTP was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OTPUpdateInput, OTPUncheckedUpdateInput>
  }

  /**
   * OTP delete
   */
  export type OTPDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTP
     */
    omit?: OTPOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OTPInclude<ExtArgs> | null
    /**
     * Filter which OTP to delete.
     */
    where: OTPWhereUniqueInput
  }

  /**
   * OTP deleteMany
   */
  export type OTPDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OTPS to delete
     */
    where?: OTPWhereInput
    /**
     * Limit how many OTPS to delete.
     */
    limit?: number
  }

  /**
   * OTP without action
   */
  export type OTPDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTP
     */
    omit?: OTPOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OTPInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    accountType: 'accountType',
    image: 'image',
    gender: 'gender',
    dateOfBirth: 'dateOfBirth',
    about: 'about',
    contactNumber: 'contactNumber',
    token: 'token',
    tokenExpires: 'tokenExpires',
    resetPasswordExpires: 'resetPasswordExpires',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserDetailsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    address: 'address',
    preferences: 'preferences',
    city: 'city',
    state: 'state',
    zipCode: 'zipCode',
    createdAt: 'createdAt'
  };

  export type UserDetailsScalarFieldEnum = (typeof UserDetailsScalarFieldEnum)[keyof typeof UserDetailsScalarFieldEnum]


  export const OwnerDetailsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    companyName: 'companyName',
    companyRegNo: 'companyRegNo',
    companyDocs: 'companyDocs',
    address: 'address',
    contactEmail: 'contactEmail',
    createdAt: 'createdAt'
  };

  export type OwnerDetailsScalarFieldEnum = (typeof OwnerDetailsScalarFieldEnum)[keyof typeof OwnerDetailsScalarFieldEnum]


  export const AdminDetailsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    employeeId: 'employeeId',
    department: 'department',
    accessLevel: 'accessLevel',
    assignedZone: 'assignedZone',
    createdAt: 'createdAt'
  };

  export type AdminDetailsScalarFieldEnum = (typeof AdminDetailsScalarFieldEnum)[keyof typeof AdminDetailsScalarFieldEnum]


  export const StationMasterDetailsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    stationId: 'stationId',
    ownerId: 'ownerId',
    shift: 'shift',
    experience: 'experience',
    certification: 'certification',
    createdAt: 'createdAt'
  };

  export type StationMasterDetailsScalarFieldEnum = (typeof StationMasterDetailsScalarFieldEnum)[keyof typeof StationMasterDetailsScalarFieldEnum]


  export const EVScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    brand: 'brand',
    model: 'model',
    licensePlate: 'licensePlate',
    batteryCapacity: 'batteryCapacity',
    batteryPercentage: 'batteryPercentage',
    isDefault: 'isDefault',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EVScalarFieldEnum = (typeof EVScalarFieldEnum)[keyof typeof EVScalarFieldEnum]


  export const StationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    companyName: 'companyName',
    ownerType: 'ownerType',
    ownerId: 'ownerId',
    address: 'address',
    latitude: 'latitude',
    longitude: 'longitude',
    totalSlots: 'totalSlots',
    availableSlots: 'availableSlots',
    contact: 'contact',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StationScalarFieldEnum = (typeof StationScalarFieldEnum)[keyof typeof StationScalarFieldEnum]


  export const BookingScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    stationId: 'stationId',
    evId: 'evId',
    startTime: 'startTime',
    endTime: 'endTime',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BookingScalarFieldEnum = (typeof BookingScalarFieldEnum)[keyof typeof BookingScalarFieldEnum]


  export const TransactionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    amount: 'amount',
    type: 'type',
    status: 'status',
    bookingId: 'bookingId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const ChargingSlotScalarFieldEnum: {
    id: 'id',
    stationId: 'stationId',
    isOccupied: 'isOccupied',
    powerLevel: 'powerLevel',
    type: 'type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChargingSlotScalarFieldEnum = (typeof ChargingSlotScalarFieldEnum)[keyof typeof ChargingSlotScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    stationId: 'stationId',
    rating: 'rating',
    comment: 'comment',
    createdAt: 'createdAt'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const ChargingHistoryScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    stationId: 'stationId',
    bookingId: 'bookingId',
    evId: 'evId',
    energyUsed: 'energyUsed',
    cost: 'cost',
    duration: 'duration',
    createdAt: 'createdAt'
  };

  export type ChargingHistoryScalarFieldEnum = (typeof ChargingHistoryScalarFieldEnum)[keyof typeof ChargingHistoryScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    message: 'message',
    type: 'type',
    isRead: 'isRead',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const OTPScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    otp: 'otp',
    createdAt: 'createdAt',
    expiresAt: 'expiresAt',
    isUsed: 'isUsed'
  };

  export type OTPScalarFieldEnum = (typeof OTPScalarFieldEnum)[keyof typeof OTPScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'AccountType'
   */
  export type EnumAccountTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccountType'>
    


  /**
   * Reference to a field of type 'AccountType[]'
   */
  export type ListEnumAccountTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccountType[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'OwnerType'
   */
  export type EnumOwnerTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OwnerType'>
    


  /**
   * Reference to a field of type 'OwnerType[]'
   */
  export type ListEnumOwnerTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OwnerType[]'>
    


  /**
   * Reference to a field of type 'BookingStatus'
   */
  export type EnumBookingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BookingStatus'>
    


  /**
   * Reference to a field of type 'BookingStatus[]'
   */
  export type ListEnumBookingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BookingStatus[]'>
    


  /**
   * Reference to a field of type 'TransactionType'
   */
  export type EnumTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionType'>
    


  /**
   * Reference to a field of type 'TransactionType[]'
   */
  export type ListEnumTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionType[]'>
    


  /**
   * Reference to a field of type 'TransactionStatus'
   */
  export type EnumTransactionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionStatus'>
    


  /**
   * Reference to a field of type 'TransactionStatus[]'
   */
  export type ListEnumTransactionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionStatus[]'>
    


  /**
   * Reference to a field of type 'SlotType'
   */
  export type EnumSlotTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SlotType'>
    


  /**
   * Reference to a field of type 'SlotType[]'
   */
  export type ListEnumSlotTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SlotType[]'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    accountType?: EnumAccountTypeFilter<"User"> | $Enums.AccountType
    image?: StringNullableFilter<"User"> | string | null
    gender?: StringNullableFilter<"User"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    about?: StringNullableFilter<"User"> | string | null
    contactNumber?: StringNullableFilter<"User"> | string | null
    token?: StringNullableFilter<"User"> | string | null
    tokenExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    resetPasswordExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    otps?: OTPListRelationFilter
    evs?: EVListRelationFilter
    bookings?: BookingListRelationFilter
    stations?: StationListRelationFilter
    transactions?: TransactionListRelationFilter
    reviews?: ReviewListRelationFilter
    notifications?: NotificationListRelationFilter
    chargingHistories?: ChargingHistoryListRelationFilter
    stationMastersUnderMe?: StationMasterDetailsListRelationFilter
    userDetails?: XOR<UserDetailsNullableScalarRelationFilter, UserDetailsWhereInput> | null
    ownerDetails?: XOR<OwnerDetailsNullableScalarRelationFilter, OwnerDetailsWhereInput> | null
    adminDetails?: XOR<AdminDetailsNullableScalarRelationFilter, AdminDetailsWhereInput> | null
    stationMasterDetails?: XOR<StationMasterDetailsNullableScalarRelationFilter, StationMasterDetailsWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    accountType?: SortOrder
    image?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    about?: SortOrderInput | SortOrder
    contactNumber?: SortOrderInput | SortOrder
    token?: SortOrderInput | SortOrder
    tokenExpires?: SortOrderInput | SortOrder
    resetPasswordExpires?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    otps?: OTPOrderByRelationAggregateInput
    evs?: EVOrderByRelationAggregateInput
    bookings?: BookingOrderByRelationAggregateInput
    stations?: StationOrderByRelationAggregateInput
    transactions?: TransactionOrderByRelationAggregateInput
    reviews?: ReviewOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    chargingHistories?: ChargingHistoryOrderByRelationAggregateInput
    stationMastersUnderMe?: StationMasterDetailsOrderByRelationAggregateInput
    userDetails?: UserDetailsOrderByWithRelationInput
    ownerDetails?: OwnerDetailsOrderByWithRelationInput
    adminDetails?: AdminDetailsOrderByWithRelationInput
    stationMasterDetails?: StationMasterDetailsOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    contactNumber?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    accountType?: EnumAccountTypeFilter<"User"> | $Enums.AccountType
    image?: StringNullableFilter<"User"> | string | null
    gender?: StringNullableFilter<"User"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    about?: StringNullableFilter<"User"> | string | null
    token?: StringNullableFilter<"User"> | string | null
    tokenExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    resetPasswordExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    otps?: OTPListRelationFilter
    evs?: EVListRelationFilter
    bookings?: BookingListRelationFilter
    stations?: StationListRelationFilter
    transactions?: TransactionListRelationFilter
    reviews?: ReviewListRelationFilter
    notifications?: NotificationListRelationFilter
    chargingHistories?: ChargingHistoryListRelationFilter
    stationMastersUnderMe?: StationMasterDetailsListRelationFilter
    userDetails?: XOR<UserDetailsNullableScalarRelationFilter, UserDetailsWhereInput> | null
    ownerDetails?: XOR<OwnerDetailsNullableScalarRelationFilter, OwnerDetailsWhereInput> | null
    adminDetails?: XOR<AdminDetailsNullableScalarRelationFilter, AdminDetailsWhereInput> | null
    stationMasterDetails?: XOR<StationMasterDetailsNullableScalarRelationFilter, StationMasterDetailsWhereInput> | null
  }, "id" | "email" | "contactNumber">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    accountType?: SortOrder
    image?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    about?: SortOrderInput | SortOrder
    contactNumber?: SortOrderInput | SortOrder
    token?: SortOrderInput | SortOrder
    tokenExpires?: SortOrderInput | SortOrder
    resetPasswordExpires?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    accountType?: EnumAccountTypeWithAggregatesFilter<"User"> | $Enums.AccountType
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    gender?: StringNullableWithAggregatesFilter<"User"> | string | null
    dateOfBirth?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    about?: StringNullableWithAggregatesFilter<"User"> | string | null
    contactNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    token?: StringNullableWithAggregatesFilter<"User"> | string | null
    tokenExpires?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    resetPasswordExpires?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type UserDetailsWhereInput = {
    AND?: UserDetailsWhereInput | UserDetailsWhereInput[]
    OR?: UserDetailsWhereInput[]
    NOT?: UserDetailsWhereInput | UserDetailsWhereInput[]
    id?: StringFilter<"UserDetails"> | string
    userId?: StringFilter<"UserDetails"> | string
    address?: StringNullableFilter<"UserDetails"> | string | null
    preferences?: StringNullableFilter<"UserDetails"> | string | null
    city?: StringNullableFilter<"UserDetails"> | string | null
    state?: StringNullableFilter<"UserDetails"> | string | null
    zipCode?: StringNullableFilter<"UserDetails"> | string | null
    createdAt?: DateTimeFilter<"UserDetails"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserDetailsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    address?: SortOrderInput | SortOrder
    preferences?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    zipCode?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserDetailsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: UserDetailsWhereInput | UserDetailsWhereInput[]
    OR?: UserDetailsWhereInput[]
    NOT?: UserDetailsWhereInput | UserDetailsWhereInput[]
    address?: StringNullableFilter<"UserDetails"> | string | null
    preferences?: StringNullableFilter<"UserDetails"> | string | null
    city?: StringNullableFilter<"UserDetails"> | string | null
    state?: StringNullableFilter<"UserDetails"> | string | null
    zipCode?: StringNullableFilter<"UserDetails"> | string | null
    createdAt?: DateTimeFilter<"UserDetails"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type UserDetailsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    address?: SortOrderInput | SortOrder
    preferences?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    zipCode?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: UserDetailsCountOrderByAggregateInput
    _max?: UserDetailsMaxOrderByAggregateInput
    _min?: UserDetailsMinOrderByAggregateInput
  }

  export type UserDetailsScalarWhereWithAggregatesInput = {
    AND?: UserDetailsScalarWhereWithAggregatesInput | UserDetailsScalarWhereWithAggregatesInput[]
    OR?: UserDetailsScalarWhereWithAggregatesInput[]
    NOT?: UserDetailsScalarWhereWithAggregatesInput | UserDetailsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserDetails"> | string
    userId?: StringWithAggregatesFilter<"UserDetails"> | string
    address?: StringNullableWithAggregatesFilter<"UserDetails"> | string | null
    preferences?: StringNullableWithAggregatesFilter<"UserDetails"> | string | null
    city?: StringNullableWithAggregatesFilter<"UserDetails"> | string | null
    state?: StringNullableWithAggregatesFilter<"UserDetails"> | string | null
    zipCode?: StringNullableWithAggregatesFilter<"UserDetails"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserDetails"> | Date | string
  }

  export type OwnerDetailsWhereInput = {
    AND?: OwnerDetailsWhereInput | OwnerDetailsWhereInput[]
    OR?: OwnerDetailsWhereInput[]
    NOT?: OwnerDetailsWhereInput | OwnerDetailsWhereInput[]
    id?: StringFilter<"OwnerDetails"> | string
    userId?: StringFilter<"OwnerDetails"> | string
    companyName?: StringFilter<"OwnerDetails"> | string
    companyRegNo?: StringFilter<"OwnerDetails"> | string
    companyDocs?: StringFilter<"OwnerDetails"> | string
    address?: StringNullableFilter<"OwnerDetails"> | string | null
    contactEmail?: StringNullableFilter<"OwnerDetails"> | string | null
    createdAt?: DateTimeFilter<"OwnerDetails"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type OwnerDetailsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    companyName?: SortOrder
    companyRegNo?: SortOrder
    companyDocs?: SortOrder
    address?: SortOrderInput | SortOrder
    contactEmail?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type OwnerDetailsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: OwnerDetailsWhereInput | OwnerDetailsWhereInput[]
    OR?: OwnerDetailsWhereInput[]
    NOT?: OwnerDetailsWhereInput | OwnerDetailsWhereInput[]
    companyName?: StringFilter<"OwnerDetails"> | string
    companyRegNo?: StringFilter<"OwnerDetails"> | string
    companyDocs?: StringFilter<"OwnerDetails"> | string
    address?: StringNullableFilter<"OwnerDetails"> | string | null
    contactEmail?: StringNullableFilter<"OwnerDetails"> | string | null
    createdAt?: DateTimeFilter<"OwnerDetails"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type OwnerDetailsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    companyName?: SortOrder
    companyRegNo?: SortOrder
    companyDocs?: SortOrder
    address?: SortOrderInput | SortOrder
    contactEmail?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: OwnerDetailsCountOrderByAggregateInput
    _max?: OwnerDetailsMaxOrderByAggregateInput
    _min?: OwnerDetailsMinOrderByAggregateInput
  }

  export type OwnerDetailsScalarWhereWithAggregatesInput = {
    AND?: OwnerDetailsScalarWhereWithAggregatesInput | OwnerDetailsScalarWhereWithAggregatesInput[]
    OR?: OwnerDetailsScalarWhereWithAggregatesInput[]
    NOT?: OwnerDetailsScalarWhereWithAggregatesInput | OwnerDetailsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OwnerDetails"> | string
    userId?: StringWithAggregatesFilter<"OwnerDetails"> | string
    companyName?: StringWithAggregatesFilter<"OwnerDetails"> | string
    companyRegNo?: StringWithAggregatesFilter<"OwnerDetails"> | string
    companyDocs?: StringWithAggregatesFilter<"OwnerDetails"> | string
    address?: StringNullableWithAggregatesFilter<"OwnerDetails"> | string | null
    contactEmail?: StringNullableWithAggregatesFilter<"OwnerDetails"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"OwnerDetails"> | Date | string
  }

  export type AdminDetailsWhereInput = {
    AND?: AdminDetailsWhereInput | AdminDetailsWhereInput[]
    OR?: AdminDetailsWhereInput[]
    NOT?: AdminDetailsWhereInput | AdminDetailsWhereInput[]
    id?: StringFilter<"AdminDetails"> | string
    userId?: StringFilter<"AdminDetails"> | string
    employeeId?: StringFilter<"AdminDetails"> | string
    department?: StringFilter<"AdminDetails"> | string
    accessLevel?: IntFilter<"AdminDetails"> | number
    assignedZone?: StringNullableFilter<"AdminDetails"> | string | null
    createdAt?: DateTimeFilter<"AdminDetails"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AdminDetailsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    employeeId?: SortOrder
    department?: SortOrder
    accessLevel?: SortOrder
    assignedZone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AdminDetailsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: AdminDetailsWhereInput | AdminDetailsWhereInput[]
    OR?: AdminDetailsWhereInput[]
    NOT?: AdminDetailsWhereInput | AdminDetailsWhereInput[]
    employeeId?: StringFilter<"AdminDetails"> | string
    department?: StringFilter<"AdminDetails"> | string
    accessLevel?: IntFilter<"AdminDetails"> | number
    assignedZone?: StringNullableFilter<"AdminDetails"> | string | null
    createdAt?: DateTimeFilter<"AdminDetails"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type AdminDetailsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    employeeId?: SortOrder
    department?: SortOrder
    accessLevel?: SortOrder
    assignedZone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AdminDetailsCountOrderByAggregateInput
    _avg?: AdminDetailsAvgOrderByAggregateInput
    _max?: AdminDetailsMaxOrderByAggregateInput
    _min?: AdminDetailsMinOrderByAggregateInput
    _sum?: AdminDetailsSumOrderByAggregateInput
  }

  export type AdminDetailsScalarWhereWithAggregatesInput = {
    AND?: AdminDetailsScalarWhereWithAggregatesInput | AdminDetailsScalarWhereWithAggregatesInput[]
    OR?: AdminDetailsScalarWhereWithAggregatesInput[]
    NOT?: AdminDetailsScalarWhereWithAggregatesInput | AdminDetailsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AdminDetails"> | string
    userId?: StringWithAggregatesFilter<"AdminDetails"> | string
    employeeId?: StringWithAggregatesFilter<"AdminDetails"> | string
    department?: StringWithAggregatesFilter<"AdminDetails"> | string
    accessLevel?: IntWithAggregatesFilter<"AdminDetails"> | number
    assignedZone?: StringNullableWithAggregatesFilter<"AdminDetails"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AdminDetails"> | Date | string
  }

  export type StationMasterDetailsWhereInput = {
    AND?: StationMasterDetailsWhereInput | StationMasterDetailsWhereInput[]
    OR?: StationMasterDetailsWhereInput[]
    NOT?: StationMasterDetailsWhereInput | StationMasterDetailsWhereInput[]
    id?: StringFilter<"StationMasterDetails"> | string
    userId?: StringFilter<"StationMasterDetails"> | string
    stationId?: StringFilter<"StationMasterDetails"> | string
    ownerId?: StringFilter<"StationMasterDetails"> | string
    shift?: StringFilter<"StationMasterDetails"> | string
    experience?: IntNullableFilter<"StationMasterDetails"> | number | null
    certification?: StringNullableFilter<"StationMasterDetails"> | string | null
    createdAt?: DateTimeFilter<"StationMasterDetails"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    station?: XOR<StationScalarRelationFilter, StationWhereInput>
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type StationMasterDetailsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    stationId?: SortOrder
    ownerId?: SortOrder
    shift?: SortOrder
    experience?: SortOrderInput | SortOrder
    certification?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    station?: StationOrderByWithRelationInput
    owner?: UserOrderByWithRelationInput
  }

  export type StationMasterDetailsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: StationMasterDetailsWhereInput | StationMasterDetailsWhereInput[]
    OR?: StationMasterDetailsWhereInput[]
    NOT?: StationMasterDetailsWhereInput | StationMasterDetailsWhereInput[]
    stationId?: StringFilter<"StationMasterDetails"> | string
    ownerId?: StringFilter<"StationMasterDetails"> | string
    shift?: StringFilter<"StationMasterDetails"> | string
    experience?: IntNullableFilter<"StationMasterDetails"> | number | null
    certification?: StringNullableFilter<"StationMasterDetails"> | string | null
    createdAt?: DateTimeFilter<"StationMasterDetails"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    station?: XOR<StationScalarRelationFilter, StationWhereInput>
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type StationMasterDetailsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    stationId?: SortOrder
    ownerId?: SortOrder
    shift?: SortOrder
    experience?: SortOrderInput | SortOrder
    certification?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: StationMasterDetailsCountOrderByAggregateInput
    _avg?: StationMasterDetailsAvgOrderByAggregateInput
    _max?: StationMasterDetailsMaxOrderByAggregateInput
    _min?: StationMasterDetailsMinOrderByAggregateInput
    _sum?: StationMasterDetailsSumOrderByAggregateInput
  }

  export type StationMasterDetailsScalarWhereWithAggregatesInput = {
    AND?: StationMasterDetailsScalarWhereWithAggregatesInput | StationMasterDetailsScalarWhereWithAggregatesInput[]
    OR?: StationMasterDetailsScalarWhereWithAggregatesInput[]
    NOT?: StationMasterDetailsScalarWhereWithAggregatesInput | StationMasterDetailsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StationMasterDetails"> | string
    userId?: StringWithAggregatesFilter<"StationMasterDetails"> | string
    stationId?: StringWithAggregatesFilter<"StationMasterDetails"> | string
    ownerId?: StringWithAggregatesFilter<"StationMasterDetails"> | string
    shift?: StringWithAggregatesFilter<"StationMasterDetails"> | string
    experience?: IntNullableWithAggregatesFilter<"StationMasterDetails"> | number | null
    certification?: StringNullableWithAggregatesFilter<"StationMasterDetails"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"StationMasterDetails"> | Date | string
  }

  export type EVWhereInput = {
    AND?: EVWhereInput | EVWhereInput[]
    OR?: EVWhereInput[]
    NOT?: EVWhereInput | EVWhereInput[]
    id?: StringFilter<"EV"> | string
    userId?: StringFilter<"EV"> | string
    brand?: StringFilter<"EV"> | string
    model?: StringFilter<"EV"> | string
    licensePlate?: StringFilter<"EV"> | string
    batteryCapacity?: FloatFilter<"EV"> | number
    batteryPercentage?: FloatFilter<"EV"> | number
    isDefault?: BoolFilter<"EV"> | boolean
    createdAt?: DateTimeFilter<"EV"> | Date | string
    updatedAt?: DateTimeFilter<"EV"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type EVOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    licensePlate?: SortOrder
    batteryCapacity?: SortOrder
    batteryPercentage?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type EVWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    licensePlate?: string
    AND?: EVWhereInput | EVWhereInput[]
    OR?: EVWhereInput[]
    NOT?: EVWhereInput | EVWhereInput[]
    userId?: StringFilter<"EV"> | string
    brand?: StringFilter<"EV"> | string
    model?: StringFilter<"EV"> | string
    batteryCapacity?: FloatFilter<"EV"> | number
    batteryPercentage?: FloatFilter<"EV"> | number
    isDefault?: BoolFilter<"EV"> | boolean
    createdAt?: DateTimeFilter<"EV"> | Date | string
    updatedAt?: DateTimeFilter<"EV"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "licensePlate">

  export type EVOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    licensePlate?: SortOrder
    batteryCapacity?: SortOrder
    batteryPercentage?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EVCountOrderByAggregateInput
    _avg?: EVAvgOrderByAggregateInput
    _max?: EVMaxOrderByAggregateInput
    _min?: EVMinOrderByAggregateInput
    _sum?: EVSumOrderByAggregateInput
  }

  export type EVScalarWhereWithAggregatesInput = {
    AND?: EVScalarWhereWithAggregatesInput | EVScalarWhereWithAggregatesInput[]
    OR?: EVScalarWhereWithAggregatesInput[]
    NOT?: EVScalarWhereWithAggregatesInput | EVScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EV"> | string
    userId?: StringWithAggregatesFilter<"EV"> | string
    brand?: StringWithAggregatesFilter<"EV"> | string
    model?: StringWithAggregatesFilter<"EV"> | string
    licensePlate?: StringWithAggregatesFilter<"EV"> | string
    batteryCapacity?: FloatWithAggregatesFilter<"EV"> | number
    batteryPercentage?: FloatWithAggregatesFilter<"EV"> | number
    isDefault?: BoolWithAggregatesFilter<"EV"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"EV"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EV"> | Date | string
  }

  export type StationWhereInput = {
    AND?: StationWhereInput | StationWhereInput[]
    OR?: StationWhereInput[]
    NOT?: StationWhereInput | StationWhereInput[]
    id?: StringFilter<"Station"> | string
    name?: StringFilter<"Station"> | string
    companyName?: StringNullableFilter<"Station"> | string | null
    ownerType?: EnumOwnerTypeFilter<"Station"> | $Enums.OwnerType
    ownerId?: StringFilter<"Station"> | string
    address?: StringFilter<"Station"> | string
    latitude?: FloatFilter<"Station"> | number
    longitude?: FloatFilter<"Station"> | number
    totalSlots?: IntFilter<"Station"> | number
    availableSlots?: IntFilter<"Station"> | number
    contact?: StringNullableFilter<"Station"> | string | null
    createdAt?: DateTimeFilter<"Station"> | Date | string
    updatedAt?: DateTimeFilter<"Station"> | Date | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    stationMasters?: StationMasterDetailsListRelationFilter
    bookings?: BookingListRelationFilter
    chargingSlots?: ChargingSlotListRelationFilter
    reviews?: ReviewListRelationFilter
    chargingHistories?: ChargingHistoryListRelationFilter
  }

  export type StationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    companyName?: SortOrderInput | SortOrder
    ownerType?: SortOrder
    ownerId?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    totalSlots?: SortOrder
    availableSlots?: SortOrder
    contact?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    owner?: UserOrderByWithRelationInput
    stationMasters?: StationMasterDetailsOrderByRelationAggregateInput
    bookings?: BookingOrderByRelationAggregateInput
    chargingSlots?: ChargingSlotOrderByRelationAggregateInput
    reviews?: ReviewOrderByRelationAggregateInput
    chargingHistories?: ChargingHistoryOrderByRelationAggregateInput
  }

  export type StationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StationWhereInput | StationWhereInput[]
    OR?: StationWhereInput[]
    NOT?: StationWhereInput | StationWhereInput[]
    name?: StringFilter<"Station"> | string
    companyName?: StringNullableFilter<"Station"> | string | null
    ownerType?: EnumOwnerTypeFilter<"Station"> | $Enums.OwnerType
    ownerId?: StringFilter<"Station"> | string
    address?: StringFilter<"Station"> | string
    latitude?: FloatFilter<"Station"> | number
    longitude?: FloatFilter<"Station"> | number
    totalSlots?: IntFilter<"Station"> | number
    availableSlots?: IntFilter<"Station"> | number
    contact?: StringNullableFilter<"Station"> | string | null
    createdAt?: DateTimeFilter<"Station"> | Date | string
    updatedAt?: DateTimeFilter<"Station"> | Date | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    stationMasters?: StationMasterDetailsListRelationFilter
    bookings?: BookingListRelationFilter
    chargingSlots?: ChargingSlotListRelationFilter
    reviews?: ReviewListRelationFilter
    chargingHistories?: ChargingHistoryListRelationFilter
  }, "id">

  export type StationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    companyName?: SortOrderInput | SortOrder
    ownerType?: SortOrder
    ownerId?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    totalSlots?: SortOrder
    availableSlots?: SortOrder
    contact?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StationCountOrderByAggregateInput
    _avg?: StationAvgOrderByAggregateInput
    _max?: StationMaxOrderByAggregateInput
    _min?: StationMinOrderByAggregateInput
    _sum?: StationSumOrderByAggregateInput
  }

  export type StationScalarWhereWithAggregatesInput = {
    AND?: StationScalarWhereWithAggregatesInput | StationScalarWhereWithAggregatesInput[]
    OR?: StationScalarWhereWithAggregatesInput[]
    NOT?: StationScalarWhereWithAggregatesInput | StationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Station"> | string
    name?: StringWithAggregatesFilter<"Station"> | string
    companyName?: StringNullableWithAggregatesFilter<"Station"> | string | null
    ownerType?: EnumOwnerTypeWithAggregatesFilter<"Station"> | $Enums.OwnerType
    ownerId?: StringWithAggregatesFilter<"Station"> | string
    address?: StringWithAggregatesFilter<"Station"> | string
    latitude?: FloatWithAggregatesFilter<"Station"> | number
    longitude?: FloatWithAggregatesFilter<"Station"> | number
    totalSlots?: IntWithAggregatesFilter<"Station"> | number
    availableSlots?: IntWithAggregatesFilter<"Station"> | number
    contact?: StringNullableWithAggregatesFilter<"Station"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Station"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Station"> | Date | string
  }

  export type BookingWhereInput = {
    AND?: BookingWhereInput | BookingWhereInput[]
    OR?: BookingWhereInput[]
    NOT?: BookingWhereInput | BookingWhereInput[]
    id?: StringFilter<"Booking"> | string
    userId?: StringFilter<"Booking"> | string
    stationId?: StringFilter<"Booking"> | string
    evId?: StringFilter<"Booking"> | string
    startTime?: DateTimeFilter<"Booking"> | Date | string
    endTime?: DateTimeFilter<"Booking"> | Date | string
    status?: EnumBookingStatusFilter<"Booking"> | $Enums.BookingStatus
    createdAt?: DateTimeFilter<"Booking"> | Date | string
    updatedAt?: DateTimeFilter<"Booking"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    station?: XOR<StationScalarRelationFilter, StationWhereInput>
    transaction?: XOR<TransactionNullableScalarRelationFilter, TransactionWhereInput> | null
    chargingHistory?: XOR<ChargingHistoryNullableScalarRelationFilter, ChargingHistoryWhereInput> | null
  }

  export type BookingOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    stationId?: SortOrder
    evId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    station?: StationOrderByWithRelationInput
    transaction?: TransactionOrderByWithRelationInput
    chargingHistory?: ChargingHistoryOrderByWithRelationInput
  }

  export type BookingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BookingWhereInput | BookingWhereInput[]
    OR?: BookingWhereInput[]
    NOT?: BookingWhereInput | BookingWhereInput[]
    userId?: StringFilter<"Booking"> | string
    stationId?: StringFilter<"Booking"> | string
    evId?: StringFilter<"Booking"> | string
    startTime?: DateTimeFilter<"Booking"> | Date | string
    endTime?: DateTimeFilter<"Booking"> | Date | string
    status?: EnumBookingStatusFilter<"Booking"> | $Enums.BookingStatus
    createdAt?: DateTimeFilter<"Booking"> | Date | string
    updatedAt?: DateTimeFilter<"Booking"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    station?: XOR<StationScalarRelationFilter, StationWhereInput>
    transaction?: XOR<TransactionNullableScalarRelationFilter, TransactionWhereInput> | null
    chargingHistory?: XOR<ChargingHistoryNullableScalarRelationFilter, ChargingHistoryWhereInput> | null
  }, "id">

  export type BookingOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    stationId?: SortOrder
    evId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BookingCountOrderByAggregateInput
    _max?: BookingMaxOrderByAggregateInput
    _min?: BookingMinOrderByAggregateInput
  }

  export type BookingScalarWhereWithAggregatesInput = {
    AND?: BookingScalarWhereWithAggregatesInput | BookingScalarWhereWithAggregatesInput[]
    OR?: BookingScalarWhereWithAggregatesInput[]
    NOT?: BookingScalarWhereWithAggregatesInput | BookingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Booking"> | string
    userId?: StringWithAggregatesFilter<"Booking"> | string
    stationId?: StringWithAggregatesFilter<"Booking"> | string
    evId?: StringWithAggregatesFilter<"Booking"> | string
    startTime?: DateTimeWithAggregatesFilter<"Booking"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"Booking"> | Date | string
    status?: EnumBookingStatusWithAggregatesFilter<"Booking"> | $Enums.BookingStatus
    createdAt?: DateTimeWithAggregatesFilter<"Booking"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Booking"> | Date | string
  }

  export type TransactionWhereInput = {
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    id?: StringFilter<"Transaction"> | string
    userId?: StringFilter<"Transaction"> | string
    amount?: FloatFilter<"Transaction"> | number
    type?: EnumTransactionTypeFilter<"Transaction"> | $Enums.TransactionType
    status?: EnumTransactionStatusFilter<"Transaction"> | $Enums.TransactionStatus
    bookingId?: StringNullableFilter<"Transaction"> | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    booking?: XOR<BookingNullableScalarRelationFilter, BookingWhereInput> | null
  }

  export type TransactionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    status?: SortOrder
    bookingId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    booking?: BookingOrderByWithRelationInput
  }

  export type TransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    bookingId?: string
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    userId?: StringFilter<"Transaction"> | string
    amount?: FloatFilter<"Transaction"> | number
    type?: EnumTransactionTypeFilter<"Transaction"> | $Enums.TransactionType
    status?: EnumTransactionStatusFilter<"Transaction"> | $Enums.TransactionStatus
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    booking?: XOR<BookingNullableScalarRelationFilter, BookingWhereInput> | null
  }, "id" | "bookingId">

  export type TransactionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    status?: SortOrder
    bookingId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _avg?: TransactionAvgOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
    _sum?: TransactionSumOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    OR?: TransactionScalarWhereWithAggregatesInput[]
    NOT?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Transaction"> | string
    userId?: StringWithAggregatesFilter<"Transaction"> | string
    amount?: FloatWithAggregatesFilter<"Transaction"> | number
    type?: EnumTransactionTypeWithAggregatesFilter<"Transaction"> | $Enums.TransactionType
    status?: EnumTransactionStatusWithAggregatesFilter<"Transaction"> | $Enums.TransactionStatus
    bookingId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
  }

  export type ChargingSlotWhereInput = {
    AND?: ChargingSlotWhereInput | ChargingSlotWhereInput[]
    OR?: ChargingSlotWhereInput[]
    NOT?: ChargingSlotWhereInput | ChargingSlotWhereInput[]
    id?: StringFilter<"ChargingSlot"> | string
    stationId?: StringFilter<"ChargingSlot"> | string
    isOccupied?: BoolFilter<"ChargingSlot"> | boolean
    powerLevel?: IntFilter<"ChargingSlot"> | number
    type?: EnumSlotTypeFilter<"ChargingSlot"> | $Enums.SlotType
    createdAt?: DateTimeFilter<"ChargingSlot"> | Date | string
    updatedAt?: DateTimeFilter<"ChargingSlot"> | Date | string
    station?: XOR<StationScalarRelationFilter, StationWhereInput>
  }

  export type ChargingSlotOrderByWithRelationInput = {
    id?: SortOrder
    stationId?: SortOrder
    isOccupied?: SortOrder
    powerLevel?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    station?: StationOrderByWithRelationInput
  }

  export type ChargingSlotWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChargingSlotWhereInput | ChargingSlotWhereInput[]
    OR?: ChargingSlotWhereInput[]
    NOT?: ChargingSlotWhereInput | ChargingSlotWhereInput[]
    stationId?: StringFilter<"ChargingSlot"> | string
    isOccupied?: BoolFilter<"ChargingSlot"> | boolean
    powerLevel?: IntFilter<"ChargingSlot"> | number
    type?: EnumSlotTypeFilter<"ChargingSlot"> | $Enums.SlotType
    createdAt?: DateTimeFilter<"ChargingSlot"> | Date | string
    updatedAt?: DateTimeFilter<"ChargingSlot"> | Date | string
    station?: XOR<StationScalarRelationFilter, StationWhereInput>
  }, "id">

  export type ChargingSlotOrderByWithAggregationInput = {
    id?: SortOrder
    stationId?: SortOrder
    isOccupied?: SortOrder
    powerLevel?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChargingSlotCountOrderByAggregateInput
    _avg?: ChargingSlotAvgOrderByAggregateInput
    _max?: ChargingSlotMaxOrderByAggregateInput
    _min?: ChargingSlotMinOrderByAggregateInput
    _sum?: ChargingSlotSumOrderByAggregateInput
  }

  export type ChargingSlotScalarWhereWithAggregatesInput = {
    AND?: ChargingSlotScalarWhereWithAggregatesInput | ChargingSlotScalarWhereWithAggregatesInput[]
    OR?: ChargingSlotScalarWhereWithAggregatesInput[]
    NOT?: ChargingSlotScalarWhereWithAggregatesInput | ChargingSlotScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChargingSlot"> | string
    stationId?: StringWithAggregatesFilter<"ChargingSlot"> | string
    isOccupied?: BoolWithAggregatesFilter<"ChargingSlot"> | boolean
    powerLevel?: IntWithAggregatesFilter<"ChargingSlot"> | number
    type?: EnumSlotTypeWithAggregatesFilter<"ChargingSlot"> | $Enums.SlotType
    createdAt?: DateTimeWithAggregatesFilter<"ChargingSlot"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ChargingSlot"> | Date | string
  }

  export type ReviewWhereInput = {
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    id?: StringFilter<"Review"> | string
    userId?: StringFilter<"Review"> | string
    stationId?: StringFilter<"Review"> | string
    rating?: IntFilter<"Review"> | number
    comment?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    station?: XOR<StationScalarRelationFilter, StationWhereInput>
  }

  export type ReviewOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    stationId?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    station?: StationOrderByWithRelationInput
  }

  export type ReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    userId?: StringFilter<"Review"> | string
    stationId?: StringFilter<"Review"> | string
    rating?: IntFilter<"Review"> | number
    comment?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    station?: XOR<StationScalarRelationFilter, StationWhereInput>
  }, "id">

  export type ReviewOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    stationId?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _avg?: ReviewAvgOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
    _sum?: ReviewSumOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    OR?: ReviewScalarWhereWithAggregatesInput[]
    NOT?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Review"> | string
    userId?: StringWithAggregatesFilter<"Review"> | string
    stationId?: StringWithAggregatesFilter<"Review"> | string
    rating?: IntWithAggregatesFilter<"Review"> | number
    comment?: StringNullableWithAggregatesFilter<"Review"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Review"> | Date | string
  }

  export type ChargingHistoryWhereInput = {
    AND?: ChargingHistoryWhereInput | ChargingHistoryWhereInput[]
    OR?: ChargingHistoryWhereInput[]
    NOT?: ChargingHistoryWhereInput | ChargingHistoryWhereInput[]
    id?: StringFilter<"ChargingHistory"> | string
    userId?: StringFilter<"ChargingHistory"> | string
    stationId?: StringFilter<"ChargingHistory"> | string
    bookingId?: StringNullableFilter<"ChargingHistory"> | string | null
    evId?: StringFilter<"ChargingHistory"> | string
    energyUsed?: FloatFilter<"ChargingHistory"> | number
    cost?: FloatFilter<"ChargingHistory"> | number
    duration?: IntFilter<"ChargingHistory"> | number
    createdAt?: DateTimeFilter<"ChargingHistory"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    station?: XOR<StationScalarRelationFilter, StationWhereInput>
    booking?: XOR<BookingNullableScalarRelationFilter, BookingWhereInput> | null
  }

  export type ChargingHistoryOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    stationId?: SortOrder
    bookingId?: SortOrderInput | SortOrder
    evId?: SortOrder
    energyUsed?: SortOrder
    cost?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    station?: StationOrderByWithRelationInput
    booking?: BookingOrderByWithRelationInput
  }

  export type ChargingHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    bookingId?: string
    AND?: ChargingHistoryWhereInput | ChargingHistoryWhereInput[]
    OR?: ChargingHistoryWhereInput[]
    NOT?: ChargingHistoryWhereInput | ChargingHistoryWhereInput[]
    userId?: StringFilter<"ChargingHistory"> | string
    stationId?: StringFilter<"ChargingHistory"> | string
    evId?: StringFilter<"ChargingHistory"> | string
    energyUsed?: FloatFilter<"ChargingHistory"> | number
    cost?: FloatFilter<"ChargingHistory"> | number
    duration?: IntFilter<"ChargingHistory"> | number
    createdAt?: DateTimeFilter<"ChargingHistory"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    station?: XOR<StationScalarRelationFilter, StationWhereInput>
    booking?: XOR<BookingNullableScalarRelationFilter, BookingWhereInput> | null
  }, "id" | "bookingId">

  export type ChargingHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    stationId?: SortOrder
    bookingId?: SortOrderInput | SortOrder
    evId?: SortOrder
    energyUsed?: SortOrder
    cost?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    _count?: ChargingHistoryCountOrderByAggregateInput
    _avg?: ChargingHistoryAvgOrderByAggregateInput
    _max?: ChargingHistoryMaxOrderByAggregateInput
    _min?: ChargingHistoryMinOrderByAggregateInput
    _sum?: ChargingHistorySumOrderByAggregateInput
  }

  export type ChargingHistoryScalarWhereWithAggregatesInput = {
    AND?: ChargingHistoryScalarWhereWithAggregatesInput | ChargingHistoryScalarWhereWithAggregatesInput[]
    OR?: ChargingHistoryScalarWhereWithAggregatesInput[]
    NOT?: ChargingHistoryScalarWhereWithAggregatesInput | ChargingHistoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChargingHistory"> | string
    userId?: StringWithAggregatesFilter<"ChargingHistory"> | string
    stationId?: StringWithAggregatesFilter<"ChargingHistory"> | string
    bookingId?: StringNullableWithAggregatesFilter<"ChargingHistory"> | string | null
    evId?: StringWithAggregatesFilter<"ChargingHistory"> | string
    energyUsed?: FloatWithAggregatesFilter<"ChargingHistory"> | number
    cost?: FloatWithAggregatesFilter<"ChargingHistory"> | number
    duration?: IntWithAggregatesFilter<"ChargingHistory"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ChargingHistory"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    userId?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    type?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type OTPWhereInput = {
    AND?: OTPWhereInput | OTPWhereInput[]
    OR?: OTPWhereInput[]
    NOT?: OTPWhereInput | OTPWhereInput[]
    id?: StringFilter<"OTP"> | string
    userId?: StringFilter<"OTP"> | string
    otp?: StringFilter<"OTP"> | string
    createdAt?: DateTimeFilter<"OTP"> | Date | string
    expiresAt?: DateTimeFilter<"OTP"> | Date | string
    isUsed?: BoolFilter<"OTP"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type OTPOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    otp?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    isUsed?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type OTPWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OTPWhereInput | OTPWhereInput[]
    OR?: OTPWhereInput[]
    NOT?: OTPWhereInput | OTPWhereInput[]
    userId?: StringFilter<"OTP"> | string
    otp?: StringFilter<"OTP"> | string
    createdAt?: DateTimeFilter<"OTP"> | Date | string
    expiresAt?: DateTimeFilter<"OTP"> | Date | string
    isUsed?: BoolFilter<"OTP"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type OTPOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    otp?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    isUsed?: SortOrder
    _count?: OTPCountOrderByAggregateInput
    _max?: OTPMaxOrderByAggregateInput
    _min?: OTPMinOrderByAggregateInput
  }

  export type OTPScalarWhereWithAggregatesInput = {
    AND?: OTPScalarWhereWithAggregatesInput | OTPScalarWhereWithAggregatesInput[]
    OR?: OTPScalarWhereWithAggregatesInput[]
    NOT?: OTPScalarWhereWithAggregatesInput | OTPScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OTP"> | string
    userId?: StringWithAggregatesFilter<"OTP"> | string
    otp?: StringWithAggregatesFilter<"OTP"> | string
    createdAt?: DateTimeWithAggregatesFilter<"OTP"> | Date | string
    expiresAt?: DateTimeWithAggregatesFilter<"OTP"> | Date | string
    isUsed?: BoolWithAggregatesFilter<"OTP"> | boolean
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otps?: OTPCreateNestedManyWithoutUserInput
    evs?: EVCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    stations?: StationCreateNestedManyWithoutOwnerInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    chargingHistories?: ChargingHistoryCreateNestedManyWithoutUserInput
    stationMastersUnderMe?: StationMasterDetailsCreateNestedManyWithoutOwnerInput
    userDetails?: UserDetailsCreateNestedOneWithoutUserInput
    ownerDetails?: OwnerDetailsCreateNestedOneWithoutUserInput
    adminDetails?: AdminDetailsCreateNestedOneWithoutUserInput
    stationMasterDetails?: StationMasterDetailsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otps?: OTPUncheckedCreateNestedManyWithoutUserInput
    evs?: EVUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    stations?: StationUncheckedCreateNestedManyWithoutOwnerInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    chargingHistories?: ChargingHistoryUncheckedCreateNestedManyWithoutUserInput
    stationMastersUnderMe?: StationMasterDetailsUncheckedCreateNestedManyWithoutOwnerInput
    userDetails?: UserDetailsUncheckedCreateNestedOneWithoutUserInput
    ownerDetails?: OwnerDetailsUncheckedCreateNestedOneWithoutUserInput
    adminDetails?: AdminDetailsUncheckedCreateNestedOneWithoutUserInput
    stationMasterDetails?: StationMasterDetailsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otps?: OTPUpdateManyWithoutUserNestedInput
    evs?: EVUpdateManyWithoutUserNestedInput
    bookings?: BookingUpdateManyWithoutUserNestedInput
    stations?: StationUpdateManyWithoutOwnerNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    chargingHistories?: ChargingHistoryUpdateManyWithoutUserNestedInput
    stationMastersUnderMe?: StationMasterDetailsUpdateManyWithoutOwnerNestedInput
    userDetails?: UserDetailsUpdateOneWithoutUserNestedInput
    ownerDetails?: OwnerDetailsUpdateOneWithoutUserNestedInput
    adminDetails?: AdminDetailsUpdateOneWithoutUserNestedInput
    stationMasterDetails?: StationMasterDetailsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otps?: OTPUncheckedUpdateManyWithoutUserNestedInput
    evs?: EVUncheckedUpdateManyWithoutUserNestedInput
    bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    stations?: StationUncheckedUpdateManyWithoutOwnerNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    chargingHistories?: ChargingHistoryUncheckedUpdateManyWithoutUserNestedInput
    stationMastersUnderMe?: StationMasterDetailsUncheckedUpdateManyWithoutOwnerNestedInput
    userDetails?: UserDetailsUncheckedUpdateOneWithoutUserNestedInput
    ownerDetails?: OwnerDetailsUncheckedUpdateOneWithoutUserNestedInput
    adminDetails?: AdminDetailsUncheckedUpdateOneWithoutUserNestedInput
    stationMasterDetails?: StationMasterDetailsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserDetailsCreateInput = {
    id?: string
    address?: string | null
    preferences?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutUserDetailsInput
  }

  export type UserDetailsUncheckedCreateInput = {
    id?: string
    userId: string
    address?: string | null
    preferences?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    createdAt?: Date | string
  }

  export type UserDetailsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserDetailsNestedInput
  }

  export type UserDetailsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserDetailsCreateManyInput = {
    id?: string
    userId: string
    address?: string | null
    preferences?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    createdAt?: Date | string
  }

  export type UserDetailsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserDetailsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OwnerDetailsCreateInput = {
    id?: string
    companyName: string
    companyRegNo: string
    companyDocs: string
    address?: string | null
    contactEmail?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutOwnerDetailsInput
  }

  export type OwnerDetailsUncheckedCreateInput = {
    id?: string
    userId: string
    companyName: string
    companyRegNo: string
    companyDocs: string
    address?: string | null
    contactEmail?: string | null
    createdAt?: Date | string
  }

  export type OwnerDetailsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    companyRegNo?: StringFieldUpdateOperationsInput | string
    companyDocs?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOwnerDetailsNestedInput
  }

  export type OwnerDetailsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    companyRegNo?: StringFieldUpdateOperationsInput | string
    companyDocs?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OwnerDetailsCreateManyInput = {
    id?: string
    userId: string
    companyName: string
    companyRegNo: string
    companyDocs: string
    address?: string | null
    contactEmail?: string | null
    createdAt?: Date | string
  }

  export type OwnerDetailsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    companyRegNo?: StringFieldUpdateOperationsInput | string
    companyDocs?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OwnerDetailsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    companyRegNo?: StringFieldUpdateOperationsInput | string
    companyDocs?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminDetailsCreateInput = {
    id?: string
    employeeId: string
    department: string
    accessLevel?: number
    assignedZone?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutAdminDetailsInput
  }

  export type AdminDetailsUncheckedCreateInput = {
    id?: string
    userId: string
    employeeId: string
    department: string
    accessLevel?: number
    assignedZone?: string | null
    createdAt?: Date | string
  }

  export type AdminDetailsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    accessLevel?: IntFieldUpdateOperationsInput | number
    assignedZone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAdminDetailsNestedInput
  }

  export type AdminDetailsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    accessLevel?: IntFieldUpdateOperationsInput | number
    assignedZone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminDetailsCreateManyInput = {
    id?: string
    userId: string
    employeeId: string
    department: string
    accessLevel?: number
    assignedZone?: string | null
    createdAt?: Date | string
  }

  export type AdminDetailsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    accessLevel?: IntFieldUpdateOperationsInput | number
    assignedZone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminDetailsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    accessLevel?: IntFieldUpdateOperationsInput | number
    assignedZone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StationMasterDetailsCreateInput = {
    id?: string
    shift: string
    experience?: number | null
    certification?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutStationMasterDetailsInput
    station: StationCreateNestedOneWithoutStationMastersInput
    owner: UserCreateNestedOneWithoutStationMastersUnderMeInput
  }

  export type StationMasterDetailsUncheckedCreateInput = {
    id?: string
    userId: string
    stationId: string
    ownerId: string
    shift: string
    experience?: number | null
    certification?: string | null
    createdAt?: Date | string
  }

  export type StationMasterDetailsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shift?: StringFieldUpdateOperationsInput | string
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    certification?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStationMasterDetailsNestedInput
    station?: StationUpdateOneRequiredWithoutStationMastersNestedInput
    owner?: UserUpdateOneRequiredWithoutStationMastersUnderMeNestedInput
  }

  export type StationMasterDetailsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    stationId?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    shift?: StringFieldUpdateOperationsInput | string
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    certification?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StationMasterDetailsCreateManyInput = {
    id?: string
    userId: string
    stationId: string
    ownerId: string
    shift: string
    experience?: number | null
    certification?: string | null
    createdAt?: Date | string
  }

  export type StationMasterDetailsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shift?: StringFieldUpdateOperationsInput | string
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    certification?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StationMasterDetailsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    stationId?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    shift?: StringFieldUpdateOperationsInput | string
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    certification?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EVCreateInput = {
    id?: string
    brand: string
    model: string
    licensePlate: string
    batteryCapacity: number
    batteryPercentage: number
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutEvsInput
  }

  export type EVUncheckedCreateInput = {
    id?: string
    userId: string
    brand: string
    model: string
    licensePlate: string
    batteryCapacity: number
    batteryPercentage: number
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EVUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    licensePlate?: StringFieldUpdateOperationsInput | string
    batteryCapacity?: FloatFieldUpdateOperationsInput | number
    batteryPercentage?: FloatFieldUpdateOperationsInput | number
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutEvsNestedInput
  }

  export type EVUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    licensePlate?: StringFieldUpdateOperationsInput | string
    batteryCapacity?: FloatFieldUpdateOperationsInput | number
    batteryPercentage?: FloatFieldUpdateOperationsInput | number
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EVCreateManyInput = {
    id?: string
    userId: string
    brand: string
    model: string
    licensePlate: string
    batteryCapacity: number
    batteryPercentage: number
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EVUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    licensePlate?: StringFieldUpdateOperationsInput | string
    batteryCapacity?: FloatFieldUpdateOperationsInput | number
    batteryPercentage?: FloatFieldUpdateOperationsInput | number
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EVUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    licensePlate?: StringFieldUpdateOperationsInput | string
    batteryCapacity?: FloatFieldUpdateOperationsInput | number
    batteryPercentage?: FloatFieldUpdateOperationsInput | number
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StationCreateInput = {
    id?: string
    name: string
    companyName?: string | null
    ownerType: $Enums.OwnerType
    address: string
    latitude: number
    longitude: number
    totalSlots: number
    availableSlots: number
    contact?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutStationsInput
    stationMasters?: StationMasterDetailsCreateNestedManyWithoutStationInput
    bookings?: BookingCreateNestedManyWithoutStationInput
    chargingSlots?: ChargingSlotCreateNestedManyWithoutStationInput
    reviews?: ReviewCreateNestedManyWithoutStationInput
    chargingHistories?: ChargingHistoryCreateNestedManyWithoutStationInput
  }

  export type StationUncheckedCreateInput = {
    id?: string
    name: string
    companyName?: string | null
    ownerType: $Enums.OwnerType
    ownerId: string
    address: string
    latitude: number
    longitude: number
    totalSlots: number
    availableSlots: number
    contact?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    stationMasters?: StationMasterDetailsUncheckedCreateNestedManyWithoutStationInput
    bookings?: BookingUncheckedCreateNestedManyWithoutStationInput
    chargingSlots?: ChargingSlotUncheckedCreateNestedManyWithoutStationInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutStationInput
    chargingHistories?: ChargingHistoryUncheckedCreateNestedManyWithoutStationInput
  }

  export type StationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerType?: EnumOwnerTypeFieldUpdateOperationsInput | $Enums.OwnerType
    address?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    totalSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutStationsNestedInput
    stationMasters?: StationMasterDetailsUpdateManyWithoutStationNestedInput
    bookings?: BookingUpdateManyWithoutStationNestedInput
    chargingSlots?: ChargingSlotUpdateManyWithoutStationNestedInput
    reviews?: ReviewUpdateManyWithoutStationNestedInput
    chargingHistories?: ChargingHistoryUpdateManyWithoutStationNestedInput
  }

  export type StationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerType?: EnumOwnerTypeFieldUpdateOperationsInput | $Enums.OwnerType
    ownerId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    totalSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stationMasters?: StationMasterDetailsUncheckedUpdateManyWithoutStationNestedInput
    bookings?: BookingUncheckedUpdateManyWithoutStationNestedInput
    chargingSlots?: ChargingSlotUncheckedUpdateManyWithoutStationNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutStationNestedInput
    chargingHistories?: ChargingHistoryUncheckedUpdateManyWithoutStationNestedInput
  }

  export type StationCreateManyInput = {
    id?: string
    name: string
    companyName?: string | null
    ownerType: $Enums.OwnerType
    ownerId: string
    address: string
    latitude: number
    longitude: number
    totalSlots: number
    availableSlots: number
    contact?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerType?: EnumOwnerTypeFieldUpdateOperationsInput | $Enums.OwnerType
    address?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    totalSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerType?: EnumOwnerTypeFieldUpdateOperationsInput | $Enums.OwnerType
    ownerId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    totalSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingCreateInput = {
    id?: string
    evId: string
    startTime: Date | string
    endTime: Date | string
    status?: $Enums.BookingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBookingsInput
    station: StationCreateNestedOneWithoutBookingsInput
    transaction?: TransactionCreateNestedOneWithoutBookingInput
    chargingHistory?: ChargingHistoryCreateNestedOneWithoutBookingInput
  }

  export type BookingUncheckedCreateInput = {
    id?: string
    userId: string
    stationId: string
    evId: string
    startTime: Date | string
    endTime: Date | string
    status?: $Enums.BookingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    transaction?: TransactionUncheckedCreateNestedOneWithoutBookingInput
    chargingHistory?: ChargingHistoryUncheckedCreateNestedOneWithoutBookingInput
  }

  export type BookingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    evId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBookingsNestedInput
    station?: StationUpdateOneRequiredWithoutBookingsNestedInput
    transaction?: TransactionUpdateOneWithoutBookingNestedInput
    chargingHistory?: ChargingHistoryUpdateOneWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    stationId?: StringFieldUpdateOperationsInput | string
    evId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transaction?: TransactionUncheckedUpdateOneWithoutBookingNestedInput
    chargingHistory?: ChargingHistoryUncheckedUpdateOneWithoutBookingNestedInput
  }

  export type BookingCreateManyInput = {
    id?: string
    userId: string
    stationId: string
    evId: string
    startTime: Date | string
    endTime: Date | string
    status?: $Enums.BookingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    evId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    stationId?: StringFieldUpdateOperationsInput | string
    evId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateInput = {
    id?: string
    amount: number
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTransactionsInput
    booking?: BookingCreateNestedOneWithoutTransactionInput
  }

  export type TransactionUncheckedCreateInput = {
    id?: string
    userId: string
    amount: number
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    bookingId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTransactionsNestedInput
    booking?: BookingUpdateOneWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    bookingId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateManyInput = {
    id?: string
    userId: string
    amount: number
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    bookingId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    bookingId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChargingSlotCreateInput = {
    id?: string
    isOccupied?: boolean
    powerLevel: number
    type: $Enums.SlotType
    createdAt?: Date | string
    updatedAt?: Date | string
    station: StationCreateNestedOneWithoutChargingSlotsInput
  }

  export type ChargingSlotUncheckedCreateInput = {
    id?: string
    stationId: string
    isOccupied?: boolean
    powerLevel: number
    type: $Enums.SlotType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChargingSlotUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isOccupied?: BoolFieldUpdateOperationsInput | boolean
    powerLevel?: IntFieldUpdateOperationsInput | number
    type?: EnumSlotTypeFieldUpdateOperationsInput | $Enums.SlotType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    station?: StationUpdateOneRequiredWithoutChargingSlotsNestedInput
  }

  export type ChargingSlotUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    stationId?: StringFieldUpdateOperationsInput | string
    isOccupied?: BoolFieldUpdateOperationsInput | boolean
    powerLevel?: IntFieldUpdateOperationsInput | number
    type?: EnumSlotTypeFieldUpdateOperationsInput | $Enums.SlotType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChargingSlotCreateManyInput = {
    id?: string
    stationId: string
    isOccupied?: boolean
    powerLevel: number
    type: $Enums.SlotType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChargingSlotUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isOccupied?: BoolFieldUpdateOperationsInput | boolean
    powerLevel?: IntFieldUpdateOperationsInput | number
    type?: EnumSlotTypeFieldUpdateOperationsInput | $Enums.SlotType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChargingSlotUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    stationId?: StringFieldUpdateOperationsInput | string
    isOccupied?: BoolFieldUpdateOperationsInput | boolean
    powerLevel?: IntFieldUpdateOperationsInput | number
    type?: EnumSlotTypeFieldUpdateOperationsInput | $Enums.SlotType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewCreateInput = {
    id?: string
    rating?: number
    comment?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReviewsInput
    station: StationCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateInput = {
    id?: string
    userId: string
    stationId: string
    rating?: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type ReviewUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
    station?: StationUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    stationId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewCreateManyInput = {
    id?: string
    userId: string
    stationId: string
    rating?: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type ReviewUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    stationId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChargingHistoryCreateInput = {
    id?: string
    evId: string
    energyUsed: number
    cost: number
    duration: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutChargingHistoriesInput
    station: StationCreateNestedOneWithoutChargingHistoriesInput
    booking?: BookingCreateNestedOneWithoutChargingHistoryInput
  }

  export type ChargingHistoryUncheckedCreateInput = {
    id?: string
    userId: string
    stationId: string
    bookingId?: string | null
    evId: string
    energyUsed: number
    cost: number
    duration: number
    createdAt?: Date | string
  }

  export type ChargingHistoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    evId?: StringFieldUpdateOperationsInput | string
    energyUsed?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutChargingHistoriesNestedInput
    station?: StationUpdateOneRequiredWithoutChargingHistoriesNestedInput
    booking?: BookingUpdateOneWithoutChargingHistoryNestedInput
  }

  export type ChargingHistoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    stationId?: StringFieldUpdateOperationsInput | string
    bookingId?: NullableStringFieldUpdateOperationsInput | string | null
    evId?: StringFieldUpdateOperationsInput | string
    energyUsed?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChargingHistoryCreateManyInput = {
    id?: string
    userId: string
    stationId: string
    bookingId?: string | null
    evId: string
    energyUsed: number
    cost: number
    duration: number
    createdAt?: Date | string
  }

  export type ChargingHistoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    evId?: StringFieldUpdateOperationsInput | string
    energyUsed?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChargingHistoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    stationId?: StringFieldUpdateOperationsInput | string
    bookingId?: NullableStringFieldUpdateOperationsInput | string | null
    evId?: StringFieldUpdateOperationsInput | string
    energyUsed?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    userId: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    userId: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OTPCreateInput = {
    id?: string
    otp: string
    createdAt?: Date | string
    expiresAt: Date | string
    isUsed?: boolean
    user: UserCreateNestedOneWithoutOtpsInput
  }

  export type OTPUncheckedCreateInput = {
    id?: string
    userId: string
    otp: string
    createdAt?: Date | string
    expiresAt: Date | string
    isUsed?: boolean
  }

  export type OTPUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutOtpsNestedInput
  }

  export type OTPUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OTPCreateManyInput = {
    id?: string
    userId: string
    otp: string
    createdAt?: Date | string
    expiresAt: Date | string
    isUsed?: boolean
  }

  export type OTPUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OTPUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumAccountTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountType | EnumAccountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountTypeFilter<$PrismaModel> | $Enums.AccountType
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type OTPListRelationFilter = {
    every?: OTPWhereInput
    some?: OTPWhereInput
    none?: OTPWhereInput
  }

  export type EVListRelationFilter = {
    every?: EVWhereInput
    some?: EVWhereInput
    none?: EVWhereInput
  }

  export type BookingListRelationFilter = {
    every?: BookingWhereInput
    some?: BookingWhereInput
    none?: BookingWhereInput
  }

  export type StationListRelationFilter = {
    every?: StationWhereInput
    some?: StationWhereInput
    none?: StationWhereInput
  }

  export type TransactionListRelationFilter = {
    every?: TransactionWhereInput
    some?: TransactionWhereInput
    none?: TransactionWhereInput
  }

  export type ReviewListRelationFilter = {
    every?: ReviewWhereInput
    some?: ReviewWhereInput
    none?: ReviewWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type ChargingHistoryListRelationFilter = {
    every?: ChargingHistoryWhereInput
    some?: ChargingHistoryWhereInput
    none?: ChargingHistoryWhereInput
  }

  export type StationMasterDetailsListRelationFilter = {
    every?: StationMasterDetailsWhereInput
    some?: StationMasterDetailsWhereInput
    none?: StationMasterDetailsWhereInput
  }

  export type UserDetailsNullableScalarRelationFilter = {
    is?: UserDetailsWhereInput | null
    isNot?: UserDetailsWhereInput | null
  }

  export type OwnerDetailsNullableScalarRelationFilter = {
    is?: OwnerDetailsWhereInput | null
    isNot?: OwnerDetailsWhereInput | null
  }

  export type AdminDetailsNullableScalarRelationFilter = {
    is?: AdminDetailsWhereInput | null
    isNot?: AdminDetailsWhereInput | null
  }

  export type StationMasterDetailsNullableScalarRelationFilter = {
    is?: StationMasterDetailsWhereInput | null
    isNot?: StationMasterDetailsWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type OTPOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EVOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChargingHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StationMasterDetailsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    accountType?: SortOrder
    image?: SortOrder
    gender?: SortOrder
    dateOfBirth?: SortOrder
    about?: SortOrder
    contactNumber?: SortOrder
    token?: SortOrder
    tokenExpires?: SortOrder
    resetPasswordExpires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    accountType?: SortOrder
    image?: SortOrder
    gender?: SortOrder
    dateOfBirth?: SortOrder
    about?: SortOrder
    contactNumber?: SortOrder
    token?: SortOrder
    tokenExpires?: SortOrder
    resetPasswordExpires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    accountType?: SortOrder
    image?: SortOrder
    gender?: SortOrder
    dateOfBirth?: SortOrder
    about?: SortOrder
    contactNumber?: SortOrder
    token?: SortOrder
    tokenExpires?: SortOrder
    resetPasswordExpires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumAccountTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountType | EnumAccountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountTypeWithAggregatesFilter<$PrismaModel> | $Enums.AccountType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccountTypeFilter<$PrismaModel>
    _max?: NestedEnumAccountTypeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserDetailsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    preferences?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    createdAt?: SortOrder
  }

  export type UserDetailsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    preferences?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    createdAt?: SortOrder
  }

  export type UserDetailsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    preferences?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    createdAt?: SortOrder
  }

  export type OwnerDetailsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyName?: SortOrder
    companyRegNo?: SortOrder
    companyDocs?: SortOrder
    address?: SortOrder
    contactEmail?: SortOrder
    createdAt?: SortOrder
  }

  export type OwnerDetailsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyName?: SortOrder
    companyRegNo?: SortOrder
    companyDocs?: SortOrder
    address?: SortOrder
    contactEmail?: SortOrder
    createdAt?: SortOrder
  }

  export type OwnerDetailsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyName?: SortOrder
    companyRegNo?: SortOrder
    companyDocs?: SortOrder
    address?: SortOrder
    contactEmail?: SortOrder
    createdAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type AdminDetailsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    employeeId?: SortOrder
    department?: SortOrder
    accessLevel?: SortOrder
    assignedZone?: SortOrder
    createdAt?: SortOrder
  }

  export type AdminDetailsAvgOrderByAggregateInput = {
    accessLevel?: SortOrder
  }

  export type AdminDetailsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    employeeId?: SortOrder
    department?: SortOrder
    accessLevel?: SortOrder
    assignedZone?: SortOrder
    createdAt?: SortOrder
  }

  export type AdminDetailsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    employeeId?: SortOrder
    department?: SortOrder
    accessLevel?: SortOrder
    assignedZone?: SortOrder
    createdAt?: SortOrder
  }

  export type AdminDetailsSumOrderByAggregateInput = {
    accessLevel?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StationScalarRelationFilter = {
    is?: StationWhereInput
    isNot?: StationWhereInput
  }

  export type StationMasterDetailsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    stationId?: SortOrder
    ownerId?: SortOrder
    shift?: SortOrder
    experience?: SortOrder
    certification?: SortOrder
    createdAt?: SortOrder
  }

  export type StationMasterDetailsAvgOrderByAggregateInput = {
    experience?: SortOrder
  }

  export type StationMasterDetailsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    stationId?: SortOrder
    ownerId?: SortOrder
    shift?: SortOrder
    experience?: SortOrder
    certification?: SortOrder
    createdAt?: SortOrder
  }

  export type StationMasterDetailsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    stationId?: SortOrder
    ownerId?: SortOrder
    shift?: SortOrder
    experience?: SortOrder
    certification?: SortOrder
    createdAt?: SortOrder
  }

  export type StationMasterDetailsSumOrderByAggregateInput = {
    experience?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EVCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    licensePlate?: SortOrder
    batteryCapacity?: SortOrder
    batteryPercentage?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EVAvgOrderByAggregateInput = {
    batteryCapacity?: SortOrder
    batteryPercentage?: SortOrder
  }

  export type EVMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    licensePlate?: SortOrder
    batteryCapacity?: SortOrder
    batteryPercentage?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EVMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    brand?: SortOrder
    model?: SortOrder
    licensePlate?: SortOrder
    batteryCapacity?: SortOrder
    batteryPercentage?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EVSumOrderByAggregateInput = {
    batteryCapacity?: SortOrder
    batteryPercentage?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumOwnerTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.OwnerType | EnumOwnerTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OwnerType[] | ListEnumOwnerTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OwnerType[] | ListEnumOwnerTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOwnerTypeFilter<$PrismaModel> | $Enums.OwnerType
  }

  export type ChargingSlotListRelationFilter = {
    every?: ChargingSlotWhereInput
    some?: ChargingSlotWhereInput
    none?: ChargingSlotWhereInput
  }

  export type ChargingSlotOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    companyName?: SortOrder
    ownerType?: SortOrder
    ownerId?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    totalSlots?: SortOrder
    availableSlots?: SortOrder
    contact?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StationAvgOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
    totalSlots?: SortOrder
    availableSlots?: SortOrder
  }

  export type StationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    companyName?: SortOrder
    ownerType?: SortOrder
    ownerId?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    totalSlots?: SortOrder
    availableSlots?: SortOrder
    contact?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    companyName?: SortOrder
    ownerType?: SortOrder
    ownerId?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    totalSlots?: SortOrder
    availableSlots?: SortOrder
    contact?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StationSumOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
    totalSlots?: SortOrder
    availableSlots?: SortOrder
  }

  export type EnumOwnerTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OwnerType | EnumOwnerTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OwnerType[] | ListEnumOwnerTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OwnerType[] | ListEnumOwnerTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOwnerTypeWithAggregatesFilter<$PrismaModel> | $Enums.OwnerType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOwnerTypeFilter<$PrismaModel>
    _max?: NestedEnumOwnerTypeFilter<$PrismaModel>
  }

  export type EnumBookingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BookingStatus | EnumBookingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBookingStatusFilter<$PrismaModel> | $Enums.BookingStatus
  }

  export type TransactionNullableScalarRelationFilter = {
    is?: TransactionWhereInput | null
    isNot?: TransactionWhereInput | null
  }

  export type ChargingHistoryNullableScalarRelationFilter = {
    is?: ChargingHistoryWhereInput | null
    isNot?: ChargingHistoryWhereInput | null
  }

  export type BookingCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    stationId?: SortOrder
    evId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookingMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    stationId?: SortOrder
    evId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookingMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    stationId?: SortOrder
    evId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumBookingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BookingStatus | EnumBookingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBookingStatusWithAggregatesFilter<$PrismaModel> | $Enums.BookingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBookingStatusFilter<$PrismaModel>
    _max?: NestedEnumBookingStatusFilter<$PrismaModel>
  }

  export type EnumTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeFilter<$PrismaModel> | $Enums.TransactionType
  }

  export type EnumTransactionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionStatusFilter<$PrismaModel> | $Enums.TransactionStatus
  }

  export type BookingNullableScalarRelationFilter = {
    is?: BookingWhereInput | null
    isNot?: BookingWhereInput | null
  }

  export type TransactionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    status?: SortOrder
    bookingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    status?: SortOrder
    bookingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    status?: SortOrder
    bookingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.TransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumTransactionTypeFilter<$PrismaModel>
  }

  export type EnumTransactionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionStatusWithAggregatesFilter<$PrismaModel> | $Enums.TransactionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionStatusFilter<$PrismaModel>
    _max?: NestedEnumTransactionStatusFilter<$PrismaModel>
  }

  export type EnumSlotTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SlotType | EnumSlotTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SlotType[] | ListEnumSlotTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SlotType[] | ListEnumSlotTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSlotTypeFilter<$PrismaModel> | $Enums.SlotType
  }

  export type ChargingSlotCountOrderByAggregateInput = {
    id?: SortOrder
    stationId?: SortOrder
    isOccupied?: SortOrder
    powerLevel?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChargingSlotAvgOrderByAggregateInput = {
    powerLevel?: SortOrder
  }

  export type ChargingSlotMaxOrderByAggregateInput = {
    id?: SortOrder
    stationId?: SortOrder
    isOccupied?: SortOrder
    powerLevel?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChargingSlotMinOrderByAggregateInput = {
    id?: SortOrder
    stationId?: SortOrder
    isOccupied?: SortOrder
    powerLevel?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChargingSlotSumOrderByAggregateInput = {
    powerLevel?: SortOrder
  }

  export type EnumSlotTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SlotType | EnumSlotTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SlotType[] | ListEnumSlotTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SlotType[] | ListEnumSlotTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSlotTypeWithAggregatesFilter<$PrismaModel> | $Enums.SlotType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSlotTypeFilter<$PrismaModel>
    _max?: NestedEnumSlotTypeFilter<$PrismaModel>
  }

  export type ReviewCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    stationId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    stationId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    stationId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type ChargingHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    stationId?: SortOrder
    bookingId?: SortOrder
    evId?: SortOrder
    energyUsed?: SortOrder
    cost?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
  }

  export type ChargingHistoryAvgOrderByAggregateInput = {
    energyUsed?: SortOrder
    cost?: SortOrder
    duration?: SortOrder
  }

  export type ChargingHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    stationId?: SortOrder
    bookingId?: SortOrder
    evId?: SortOrder
    energyUsed?: SortOrder
    cost?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
  }

  export type ChargingHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    stationId?: SortOrder
    bookingId?: SortOrder
    evId?: SortOrder
    energyUsed?: SortOrder
    cost?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
  }

  export type ChargingHistorySumOrderByAggregateInput = {
    energyUsed?: SortOrder
    cost?: SortOrder
    duration?: SortOrder
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type OTPCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    otp?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    isUsed?: SortOrder
  }

  export type OTPMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    otp?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    isUsed?: SortOrder
  }

  export type OTPMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    otp?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    isUsed?: SortOrder
  }

  export type OTPCreateNestedManyWithoutUserInput = {
    create?: XOR<OTPCreateWithoutUserInput, OTPUncheckedCreateWithoutUserInput> | OTPCreateWithoutUserInput[] | OTPUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OTPCreateOrConnectWithoutUserInput | OTPCreateOrConnectWithoutUserInput[]
    createMany?: OTPCreateManyUserInputEnvelope
    connect?: OTPWhereUniqueInput | OTPWhereUniqueInput[]
  }

  export type EVCreateNestedManyWithoutUserInput = {
    create?: XOR<EVCreateWithoutUserInput, EVUncheckedCreateWithoutUserInput> | EVCreateWithoutUserInput[] | EVUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EVCreateOrConnectWithoutUserInput | EVCreateOrConnectWithoutUserInput[]
    createMany?: EVCreateManyUserInputEnvelope
    connect?: EVWhereUniqueInput | EVWhereUniqueInput[]
  }

  export type BookingCreateNestedManyWithoutUserInput = {
    create?: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput> | BookingCreateWithoutUserInput[] | BookingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutUserInput | BookingCreateOrConnectWithoutUserInput[]
    createMany?: BookingCreateManyUserInputEnvelope
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
  }

  export type StationCreateNestedManyWithoutOwnerInput = {
    create?: XOR<StationCreateWithoutOwnerInput, StationUncheckedCreateWithoutOwnerInput> | StationCreateWithoutOwnerInput[] | StationUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: StationCreateOrConnectWithoutOwnerInput | StationCreateOrConnectWithoutOwnerInput[]
    createMany?: StationCreateManyOwnerInputEnvelope
    connect?: StationWhereUniqueInput | StationWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutUserInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ChargingHistoryCreateNestedManyWithoutUserInput = {
    create?: XOR<ChargingHistoryCreateWithoutUserInput, ChargingHistoryUncheckedCreateWithoutUserInput> | ChargingHistoryCreateWithoutUserInput[] | ChargingHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChargingHistoryCreateOrConnectWithoutUserInput | ChargingHistoryCreateOrConnectWithoutUserInput[]
    createMany?: ChargingHistoryCreateManyUserInputEnvelope
    connect?: ChargingHistoryWhereUniqueInput | ChargingHistoryWhereUniqueInput[]
  }

  export type StationMasterDetailsCreateNestedManyWithoutOwnerInput = {
    create?: XOR<StationMasterDetailsCreateWithoutOwnerInput, StationMasterDetailsUncheckedCreateWithoutOwnerInput> | StationMasterDetailsCreateWithoutOwnerInput[] | StationMasterDetailsUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: StationMasterDetailsCreateOrConnectWithoutOwnerInput | StationMasterDetailsCreateOrConnectWithoutOwnerInput[]
    createMany?: StationMasterDetailsCreateManyOwnerInputEnvelope
    connect?: StationMasterDetailsWhereUniqueInput | StationMasterDetailsWhereUniqueInput[]
  }

  export type UserDetailsCreateNestedOneWithoutUserInput = {
    create?: XOR<UserDetailsCreateWithoutUserInput, UserDetailsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserDetailsCreateOrConnectWithoutUserInput
    connect?: UserDetailsWhereUniqueInput
  }

  export type OwnerDetailsCreateNestedOneWithoutUserInput = {
    create?: XOR<OwnerDetailsCreateWithoutUserInput, OwnerDetailsUncheckedCreateWithoutUserInput>
    connectOrCreate?: OwnerDetailsCreateOrConnectWithoutUserInput
    connect?: OwnerDetailsWhereUniqueInput
  }

  export type AdminDetailsCreateNestedOneWithoutUserInput = {
    create?: XOR<AdminDetailsCreateWithoutUserInput, AdminDetailsUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminDetailsCreateOrConnectWithoutUserInput
    connect?: AdminDetailsWhereUniqueInput
  }

  export type StationMasterDetailsCreateNestedOneWithoutUserInput = {
    create?: XOR<StationMasterDetailsCreateWithoutUserInput, StationMasterDetailsUncheckedCreateWithoutUserInput>
    connectOrCreate?: StationMasterDetailsCreateOrConnectWithoutUserInput
    connect?: StationMasterDetailsWhereUniqueInput
  }

  export type OTPUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OTPCreateWithoutUserInput, OTPUncheckedCreateWithoutUserInput> | OTPCreateWithoutUserInput[] | OTPUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OTPCreateOrConnectWithoutUserInput | OTPCreateOrConnectWithoutUserInput[]
    createMany?: OTPCreateManyUserInputEnvelope
    connect?: OTPWhereUniqueInput | OTPWhereUniqueInput[]
  }

  export type EVUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EVCreateWithoutUserInput, EVUncheckedCreateWithoutUserInput> | EVCreateWithoutUserInput[] | EVUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EVCreateOrConnectWithoutUserInput | EVCreateOrConnectWithoutUserInput[]
    createMany?: EVCreateManyUserInputEnvelope
    connect?: EVWhereUniqueInput | EVWhereUniqueInput[]
  }

  export type BookingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput> | BookingCreateWithoutUserInput[] | BookingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutUserInput | BookingCreateOrConnectWithoutUserInput[]
    createMany?: BookingCreateManyUserInputEnvelope
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
  }

  export type StationUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<StationCreateWithoutOwnerInput, StationUncheckedCreateWithoutOwnerInput> | StationCreateWithoutOwnerInput[] | StationUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: StationCreateOrConnectWithoutOwnerInput | StationCreateOrConnectWithoutOwnerInput[]
    createMany?: StationCreateManyOwnerInputEnvelope
    connect?: StationWhereUniqueInput | StationWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ChargingHistoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ChargingHistoryCreateWithoutUserInput, ChargingHistoryUncheckedCreateWithoutUserInput> | ChargingHistoryCreateWithoutUserInput[] | ChargingHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChargingHistoryCreateOrConnectWithoutUserInput | ChargingHistoryCreateOrConnectWithoutUserInput[]
    createMany?: ChargingHistoryCreateManyUserInputEnvelope
    connect?: ChargingHistoryWhereUniqueInput | ChargingHistoryWhereUniqueInput[]
  }

  export type StationMasterDetailsUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<StationMasterDetailsCreateWithoutOwnerInput, StationMasterDetailsUncheckedCreateWithoutOwnerInput> | StationMasterDetailsCreateWithoutOwnerInput[] | StationMasterDetailsUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: StationMasterDetailsCreateOrConnectWithoutOwnerInput | StationMasterDetailsCreateOrConnectWithoutOwnerInput[]
    createMany?: StationMasterDetailsCreateManyOwnerInputEnvelope
    connect?: StationMasterDetailsWhereUniqueInput | StationMasterDetailsWhereUniqueInput[]
  }

  export type UserDetailsUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserDetailsCreateWithoutUserInput, UserDetailsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserDetailsCreateOrConnectWithoutUserInput
    connect?: UserDetailsWhereUniqueInput
  }

  export type OwnerDetailsUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<OwnerDetailsCreateWithoutUserInput, OwnerDetailsUncheckedCreateWithoutUserInput>
    connectOrCreate?: OwnerDetailsCreateOrConnectWithoutUserInput
    connect?: OwnerDetailsWhereUniqueInput
  }

  export type AdminDetailsUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<AdminDetailsCreateWithoutUserInput, AdminDetailsUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminDetailsCreateOrConnectWithoutUserInput
    connect?: AdminDetailsWhereUniqueInput
  }

  export type StationMasterDetailsUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<StationMasterDetailsCreateWithoutUserInput, StationMasterDetailsUncheckedCreateWithoutUserInput>
    connectOrCreate?: StationMasterDetailsCreateOrConnectWithoutUserInput
    connect?: StationMasterDetailsWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumAccountTypeFieldUpdateOperationsInput = {
    set?: $Enums.AccountType
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type OTPUpdateManyWithoutUserNestedInput = {
    create?: XOR<OTPCreateWithoutUserInput, OTPUncheckedCreateWithoutUserInput> | OTPCreateWithoutUserInput[] | OTPUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OTPCreateOrConnectWithoutUserInput | OTPCreateOrConnectWithoutUserInput[]
    upsert?: OTPUpsertWithWhereUniqueWithoutUserInput | OTPUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OTPCreateManyUserInputEnvelope
    set?: OTPWhereUniqueInput | OTPWhereUniqueInput[]
    disconnect?: OTPWhereUniqueInput | OTPWhereUniqueInput[]
    delete?: OTPWhereUniqueInput | OTPWhereUniqueInput[]
    connect?: OTPWhereUniqueInput | OTPWhereUniqueInput[]
    update?: OTPUpdateWithWhereUniqueWithoutUserInput | OTPUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OTPUpdateManyWithWhereWithoutUserInput | OTPUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OTPScalarWhereInput | OTPScalarWhereInput[]
  }

  export type EVUpdateManyWithoutUserNestedInput = {
    create?: XOR<EVCreateWithoutUserInput, EVUncheckedCreateWithoutUserInput> | EVCreateWithoutUserInput[] | EVUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EVCreateOrConnectWithoutUserInput | EVCreateOrConnectWithoutUserInput[]
    upsert?: EVUpsertWithWhereUniqueWithoutUserInput | EVUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EVCreateManyUserInputEnvelope
    set?: EVWhereUniqueInput | EVWhereUniqueInput[]
    disconnect?: EVWhereUniqueInput | EVWhereUniqueInput[]
    delete?: EVWhereUniqueInput | EVWhereUniqueInput[]
    connect?: EVWhereUniqueInput | EVWhereUniqueInput[]
    update?: EVUpdateWithWhereUniqueWithoutUserInput | EVUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EVUpdateManyWithWhereWithoutUserInput | EVUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EVScalarWhereInput | EVScalarWhereInput[]
  }

  export type BookingUpdateManyWithoutUserNestedInput = {
    create?: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput> | BookingCreateWithoutUserInput[] | BookingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutUserInput | BookingCreateOrConnectWithoutUserInput[]
    upsert?: BookingUpsertWithWhereUniqueWithoutUserInput | BookingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BookingCreateManyUserInputEnvelope
    set?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    disconnect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    delete?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    update?: BookingUpdateWithWhereUniqueWithoutUserInput | BookingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BookingUpdateManyWithWhereWithoutUserInput | BookingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BookingScalarWhereInput | BookingScalarWhereInput[]
  }

  export type StationUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<StationCreateWithoutOwnerInput, StationUncheckedCreateWithoutOwnerInput> | StationCreateWithoutOwnerInput[] | StationUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: StationCreateOrConnectWithoutOwnerInput | StationCreateOrConnectWithoutOwnerInput[]
    upsert?: StationUpsertWithWhereUniqueWithoutOwnerInput | StationUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: StationCreateManyOwnerInputEnvelope
    set?: StationWhereUniqueInput | StationWhereUniqueInput[]
    disconnect?: StationWhereUniqueInput | StationWhereUniqueInput[]
    delete?: StationWhereUniqueInput | StationWhereUniqueInput[]
    connect?: StationWhereUniqueInput | StationWhereUniqueInput[]
    update?: StationUpdateWithWhereUniqueWithoutOwnerInput | StationUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: StationUpdateManyWithWhereWithoutOwnerInput | StationUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: StationScalarWhereInput | StationScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutUserNestedInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutUserInput | TransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutUserInput | TransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutUserInput | TransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ChargingHistoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChargingHistoryCreateWithoutUserInput, ChargingHistoryUncheckedCreateWithoutUserInput> | ChargingHistoryCreateWithoutUserInput[] | ChargingHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChargingHistoryCreateOrConnectWithoutUserInput | ChargingHistoryCreateOrConnectWithoutUserInput[]
    upsert?: ChargingHistoryUpsertWithWhereUniqueWithoutUserInput | ChargingHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChargingHistoryCreateManyUserInputEnvelope
    set?: ChargingHistoryWhereUniqueInput | ChargingHistoryWhereUniqueInput[]
    disconnect?: ChargingHistoryWhereUniqueInput | ChargingHistoryWhereUniqueInput[]
    delete?: ChargingHistoryWhereUniqueInput | ChargingHistoryWhereUniqueInput[]
    connect?: ChargingHistoryWhereUniqueInput | ChargingHistoryWhereUniqueInput[]
    update?: ChargingHistoryUpdateWithWhereUniqueWithoutUserInput | ChargingHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChargingHistoryUpdateManyWithWhereWithoutUserInput | ChargingHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChargingHistoryScalarWhereInput | ChargingHistoryScalarWhereInput[]
  }

  export type StationMasterDetailsUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<StationMasterDetailsCreateWithoutOwnerInput, StationMasterDetailsUncheckedCreateWithoutOwnerInput> | StationMasterDetailsCreateWithoutOwnerInput[] | StationMasterDetailsUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: StationMasterDetailsCreateOrConnectWithoutOwnerInput | StationMasterDetailsCreateOrConnectWithoutOwnerInput[]
    upsert?: StationMasterDetailsUpsertWithWhereUniqueWithoutOwnerInput | StationMasterDetailsUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: StationMasterDetailsCreateManyOwnerInputEnvelope
    set?: StationMasterDetailsWhereUniqueInput | StationMasterDetailsWhereUniqueInput[]
    disconnect?: StationMasterDetailsWhereUniqueInput | StationMasterDetailsWhereUniqueInput[]
    delete?: StationMasterDetailsWhereUniqueInput | StationMasterDetailsWhereUniqueInput[]
    connect?: StationMasterDetailsWhereUniqueInput | StationMasterDetailsWhereUniqueInput[]
    update?: StationMasterDetailsUpdateWithWhereUniqueWithoutOwnerInput | StationMasterDetailsUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: StationMasterDetailsUpdateManyWithWhereWithoutOwnerInput | StationMasterDetailsUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: StationMasterDetailsScalarWhereInput | StationMasterDetailsScalarWhereInput[]
  }

  export type UserDetailsUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserDetailsCreateWithoutUserInput, UserDetailsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserDetailsCreateOrConnectWithoutUserInput
    upsert?: UserDetailsUpsertWithoutUserInput
    disconnect?: UserDetailsWhereInput | boolean
    delete?: UserDetailsWhereInput | boolean
    connect?: UserDetailsWhereUniqueInput
    update?: XOR<XOR<UserDetailsUpdateToOneWithWhereWithoutUserInput, UserDetailsUpdateWithoutUserInput>, UserDetailsUncheckedUpdateWithoutUserInput>
  }

  export type OwnerDetailsUpdateOneWithoutUserNestedInput = {
    create?: XOR<OwnerDetailsCreateWithoutUserInput, OwnerDetailsUncheckedCreateWithoutUserInput>
    connectOrCreate?: OwnerDetailsCreateOrConnectWithoutUserInput
    upsert?: OwnerDetailsUpsertWithoutUserInput
    disconnect?: OwnerDetailsWhereInput | boolean
    delete?: OwnerDetailsWhereInput | boolean
    connect?: OwnerDetailsWhereUniqueInput
    update?: XOR<XOR<OwnerDetailsUpdateToOneWithWhereWithoutUserInput, OwnerDetailsUpdateWithoutUserInput>, OwnerDetailsUncheckedUpdateWithoutUserInput>
  }

  export type AdminDetailsUpdateOneWithoutUserNestedInput = {
    create?: XOR<AdminDetailsCreateWithoutUserInput, AdminDetailsUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminDetailsCreateOrConnectWithoutUserInput
    upsert?: AdminDetailsUpsertWithoutUserInput
    disconnect?: AdminDetailsWhereInput | boolean
    delete?: AdminDetailsWhereInput | boolean
    connect?: AdminDetailsWhereUniqueInput
    update?: XOR<XOR<AdminDetailsUpdateToOneWithWhereWithoutUserInput, AdminDetailsUpdateWithoutUserInput>, AdminDetailsUncheckedUpdateWithoutUserInput>
  }

  export type StationMasterDetailsUpdateOneWithoutUserNestedInput = {
    create?: XOR<StationMasterDetailsCreateWithoutUserInput, StationMasterDetailsUncheckedCreateWithoutUserInput>
    connectOrCreate?: StationMasterDetailsCreateOrConnectWithoutUserInput
    upsert?: StationMasterDetailsUpsertWithoutUserInput
    disconnect?: StationMasterDetailsWhereInput | boolean
    delete?: StationMasterDetailsWhereInput | boolean
    connect?: StationMasterDetailsWhereUniqueInput
    update?: XOR<XOR<StationMasterDetailsUpdateToOneWithWhereWithoutUserInput, StationMasterDetailsUpdateWithoutUserInput>, StationMasterDetailsUncheckedUpdateWithoutUserInput>
  }

  export type OTPUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OTPCreateWithoutUserInput, OTPUncheckedCreateWithoutUserInput> | OTPCreateWithoutUserInput[] | OTPUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OTPCreateOrConnectWithoutUserInput | OTPCreateOrConnectWithoutUserInput[]
    upsert?: OTPUpsertWithWhereUniqueWithoutUserInput | OTPUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OTPCreateManyUserInputEnvelope
    set?: OTPWhereUniqueInput | OTPWhereUniqueInput[]
    disconnect?: OTPWhereUniqueInput | OTPWhereUniqueInput[]
    delete?: OTPWhereUniqueInput | OTPWhereUniqueInput[]
    connect?: OTPWhereUniqueInput | OTPWhereUniqueInput[]
    update?: OTPUpdateWithWhereUniqueWithoutUserInput | OTPUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OTPUpdateManyWithWhereWithoutUserInput | OTPUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OTPScalarWhereInput | OTPScalarWhereInput[]
  }

  export type EVUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EVCreateWithoutUserInput, EVUncheckedCreateWithoutUserInput> | EVCreateWithoutUserInput[] | EVUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EVCreateOrConnectWithoutUserInput | EVCreateOrConnectWithoutUserInput[]
    upsert?: EVUpsertWithWhereUniqueWithoutUserInput | EVUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EVCreateManyUserInputEnvelope
    set?: EVWhereUniqueInput | EVWhereUniqueInput[]
    disconnect?: EVWhereUniqueInput | EVWhereUniqueInput[]
    delete?: EVWhereUniqueInput | EVWhereUniqueInput[]
    connect?: EVWhereUniqueInput | EVWhereUniqueInput[]
    update?: EVUpdateWithWhereUniqueWithoutUserInput | EVUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EVUpdateManyWithWhereWithoutUserInput | EVUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EVScalarWhereInput | EVScalarWhereInput[]
  }

  export type BookingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput> | BookingCreateWithoutUserInput[] | BookingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutUserInput | BookingCreateOrConnectWithoutUserInput[]
    upsert?: BookingUpsertWithWhereUniqueWithoutUserInput | BookingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BookingCreateManyUserInputEnvelope
    set?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    disconnect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    delete?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    update?: BookingUpdateWithWhereUniqueWithoutUserInput | BookingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BookingUpdateManyWithWhereWithoutUserInput | BookingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BookingScalarWhereInput | BookingScalarWhereInput[]
  }

  export type StationUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<StationCreateWithoutOwnerInput, StationUncheckedCreateWithoutOwnerInput> | StationCreateWithoutOwnerInput[] | StationUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: StationCreateOrConnectWithoutOwnerInput | StationCreateOrConnectWithoutOwnerInput[]
    upsert?: StationUpsertWithWhereUniqueWithoutOwnerInput | StationUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: StationCreateManyOwnerInputEnvelope
    set?: StationWhereUniqueInput | StationWhereUniqueInput[]
    disconnect?: StationWhereUniqueInput | StationWhereUniqueInput[]
    delete?: StationWhereUniqueInput | StationWhereUniqueInput[]
    connect?: StationWhereUniqueInput | StationWhereUniqueInput[]
    update?: StationUpdateWithWhereUniqueWithoutOwnerInput | StationUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: StationUpdateManyWithWhereWithoutOwnerInput | StationUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: StationScalarWhereInput | StationScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput> | TransactionCreateWithoutUserInput[] | TransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutUserInput | TransactionCreateOrConnectWithoutUserInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutUserInput | TransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TransactionCreateManyUserInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutUserInput | TransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutUserInput | TransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ChargingHistoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChargingHistoryCreateWithoutUserInput, ChargingHistoryUncheckedCreateWithoutUserInput> | ChargingHistoryCreateWithoutUserInput[] | ChargingHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChargingHistoryCreateOrConnectWithoutUserInput | ChargingHistoryCreateOrConnectWithoutUserInput[]
    upsert?: ChargingHistoryUpsertWithWhereUniqueWithoutUserInput | ChargingHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChargingHistoryCreateManyUserInputEnvelope
    set?: ChargingHistoryWhereUniqueInput | ChargingHistoryWhereUniqueInput[]
    disconnect?: ChargingHistoryWhereUniqueInput | ChargingHistoryWhereUniqueInput[]
    delete?: ChargingHistoryWhereUniqueInput | ChargingHistoryWhereUniqueInput[]
    connect?: ChargingHistoryWhereUniqueInput | ChargingHistoryWhereUniqueInput[]
    update?: ChargingHistoryUpdateWithWhereUniqueWithoutUserInput | ChargingHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChargingHistoryUpdateManyWithWhereWithoutUserInput | ChargingHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChargingHistoryScalarWhereInput | ChargingHistoryScalarWhereInput[]
  }

  export type StationMasterDetailsUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<StationMasterDetailsCreateWithoutOwnerInput, StationMasterDetailsUncheckedCreateWithoutOwnerInput> | StationMasterDetailsCreateWithoutOwnerInput[] | StationMasterDetailsUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: StationMasterDetailsCreateOrConnectWithoutOwnerInput | StationMasterDetailsCreateOrConnectWithoutOwnerInput[]
    upsert?: StationMasterDetailsUpsertWithWhereUniqueWithoutOwnerInput | StationMasterDetailsUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: StationMasterDetailsCreateManyOwnerInputEnvelope
    set?: StationMasterDetailsWhereUniqueInput | StationMasterDetailsWhereUniqueInput[]
    disconnect?: StationMasterDetailsWhereUniqueInput | StationMasterDetailsWhereUniqueInput[]
    delete?: StationMasterDetailsWhereUniqueInput | StationMasterDetailsWhereUniqueInput[]
    connect?: StationMasterDetailsWhereUniqueInput | StationMasterDetailsWhereUniqueInput[]
    update?: StationMasterDetailsUpdateWithWhereUniqueWithoutOwnerInput | StationMasterDetailsUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: StationMasterDetailsUpdateManyWithWhereWithoutOwnerInput | StationMasterDetailsUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: StationMasterDetailsScalarWhereInput | StationMasterDetailsScalarWhereInput[]
  }

  export type UserDetailsUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserDetailsCreateWithoutUserInput, UserDetailsUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserDetailsCreateOrConnectWithoutUserInput
    upsert?: UserDetailsUpsertWithoutUserInput
    disconnect?: UserDetailsWhereInput | boolean
    delete?: UserDetailsWhereInput | boolean
    connect?: UserDetailsWhereUniqueInput
    update?: XOR<XOR<UserDetailsUpdateToOneWithWhereWithoutUserInput, UserDetailsUpdateWithoutUserInput>, UserDetailsUncheckedUpdateWithoutUserInput>
  }

  export type OwnerDetailsUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<OwnerDetailsCreateWithoutUserInput, OwnerDetailsUncheckedCreateWithoutUserInput>
    connectOrCreate?: OwnerDetailsCreateOrConnectWithoutUserInput
    upsert?: OwnerDetailsUpsertWithoutUserInput
    disconnect?: OwnerDetailsWhereInput | boolean
    delete?: OwnerDetailsWhereInput | boolean
    connect?: OwnerDetailsWhereUniqueInput
    update?: XOR<XOR<OwnerDetailsUpdateToOneWithWhereWithoutUserInput, OwnerDetailsUpdateWithoutUserInput>, OwnerDetailsUncheckedUpdateWithoutUserInput>
  }

  export type AdminDetailsUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<AdminDetailsCreateWithoutUserInput, AdminDetailsUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminDetailsCreateOrConnectWithoutUserInput
    upsert?: AdminDetailsUpsertWithoutUserInput
    disconnect?: AdminDetailsWhereInput | boolean
    delete?: AdminDetailsWhereInput | boolean
    connect?: AdminDetailsWhereUniqueInput
    update?: XOR<XOR<AdminDetailsUpdateToOneWithWhereWithoutUserInput, AdminDetailsUpdateWithoutUserInput>, AdminDetailsUncheckedUpdateWithoutUserInput>
  }

  export type StationMasterDetailsUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<StationMasterDetailsCreateWithoutUserInput, StationMasterDetailsUncheckedCreateWithoutUserInput>
    connectOrCreate?: StationMasterDetailsCreateOrConnectWithoutUserInput
    upsert?: StationMasterDetailsUpsertWithoutUserInput
    disconnect?: StationMasterDetailsWhereInput | boolean
    delete?: StationMasterDetailsWhereInput | boolean
    connect?: StationMasterDetailsWhereUniqueInput
    update?: XOR<XOR<StationMasterDetailsUpdateToOneWithWhereWithoutUserInput, StationMasterDetailsUpdateWithoutUserInput>, StationMasterDetailsUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutUserDetailsInput = {
    create?: XOR<UserCreateWithoutUserDetailsInput, UserUncheckedCreateWithoutUserDetailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserDetailsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserDetailsNestedInput = {
    create?: XOR<UserCreateWithoutUserDetailsInput, UserUncheckedCreateWithoutUserDetailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserDetailsInput
    upsert?: UserUpsertWithoutUserDetailsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserDetailsInput, UserUpdateWithoutUserDetailsInput>, UserUncheckedUpdateWithoutUserDetailsInput>
  }

  export type UserCreateNestedOneWithoutOwnerDetailsInput = {
    create?: XOR<UserCreateWithoutOwnerDetailsInput, UserUncheckedCreateWithoutOwnerDetailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnerDetailsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutOwnerDetailsNestedInput = {
    create?: XOR<UserCreateWithoutOwnerDetailsInput, UserUncheckedCreateWithoutOwnerDetailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnerDetailsInput
    upsert?: UserUpsertWithoutOwnerDetailsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOwnerDetailsInput, UserUpdateWithoutOwnerDetailsInput>, UserUncheckedUpdateWithoutOwnerDetailsInput>
  }

  export type UserCreateNestedOneWithoutAdminDetailsInput = {
    create?: XOR<UserCreateWithoutAdminDetailsInput, UserUncheckedCreateWithoutAdminDetailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminDetailsInput
    connect?: UserWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAdminDetailsNestedInput = {
    create?: XOR<UserCreateWithoutAdminDetailsInput, UserUncheckedCreateWithoutAdminDetailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminDetailsInput
    upsert?: UserUpsertWithoutAdminDetailsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAdminDetailsInput, UserUpdateWithoutAdminDetailsInput>, UserUncheckedUpdateWithoutAdminDetailsInput>
  }

  export type UserCreateNestedOneWithoutStationMasterDetailsInput = {
    create?: XOR<UserCreateWithoutStationMasterDetailsInput, UserUncheckedCreateWithoutStationMasterDetailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStationMasterDetailsInput
    connect?: UserWhereUniqueInput
  }

  export type StationCreateNestedOneWithoutStationMastersInput = {
    create?: XOR<StationCreateWithoutStationMastersInput, StationUncheckedCreateWithoutStationMastersInput>
    connectOrCreate?: StationCreateOrConnectWithoutStationMastersInput
    connect?: StationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutStationMastersUnderMeInput = {
    create?: XOR<UserCreateWithoutStationMastersUnderMeInput, UserUncheckedCreateWithoutStationMastersUnderMeInput>
    connectOrCreate?: UserCreateOrConnectWithoutStationMastersUnderMeInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutStationMasterDetailsNestedInput = {
    create?: XOR<UserCreateWithoutStationMasterDetailsInput, UserUncheckedCreateWithoutStationMasterDetailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStationMasterDetailsInput
    upsert?: UserUpsertWithoutStationMasterDetailsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStationMasterDetailsInput, UserUpdateWithoutStationMasterDetailsInput>, UserUncheckedUpdateWithoutStationMasterDetailsInput>
  }

  export type StationUpdateOneRequiredWithoutStationMastersNestedInput = {
    create?: XOR<StationCreateWithoutStationMastersInput, StationUncheckedCreateWithoutStationMastersInput>
    connectOrCreate?: StationCreateOrConnectWithoutStationMastersInput
    upsert?: StationUpsertWithoutStationMastersInput
    connect?: StationWhereUniqueInput
    update?: XOR<XOR<StationUpdateToOneWithWhereWithoutStationMastersInput, StationUpdateWithoutStationMastersInput>, StationUncheckedUpdateWithoutStationMastersInput>
  }

  export type UserUpdateOneRequiredWithoutStationMastersUnderMeNestedInput = {
    create?: XOR<UserCreateWithoutStationMastersUnderMeInput, UserUncheckedCreateWithoutStationMastersUnderMeInput>
    connectOrCreate?: UserCreateOrConnectWithoutStationMastersUnderMeInput
    upsert?: UserUpsertWithoutStationMastersUnderMeInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStationMastersUnderMeInput, UserUpdateWithoutStationMastersUnderMeInput>, UserUncheckedUpdateWithoutStationMastersUnderMeInput>
  }

  export type UserCreateNestedOneWithoutEvsInput = {
    create?: XOR<UserCreateWithoutEvsInput, UserUncheckedCreateWithoutEvsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEvsInput
    connect?: UserWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutEvsNestedInput = {
    create?: XOR<UserCreateWithoutEvsInput, UserUncheckedCreateWithoutEvsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEvsInput
    upsert?: UserUpsertWithoutEvsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEvsInput, UserUpdateWithoutEvsInput>, UserUncheckedUpdateWithoutEvsInput>
  }

  export type UserCreateNestedOneWithoutStationsInput = {
    create?: XOR<UserCreateWithoutStationsInput, UserUncheckedCreateWithoutStationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStationsInput
    connect?: UserWhereUniqueInput
  }

  export type StationMasterDetailsCreateNestedManyWithoutStationInput = {
    create?: XOR<StationMasterDetailsCreateWithoutStationInput, StationMasterDetailsUncheckedCreateWithoutStationInput> | StationMasterDetailsCreateWithoutStationInput[] | StationMasterDetailsUncheckedCreateWithoutStationInput[]
    connectOrCreate?: StationMasterDetailsCreateOrConnectWithoutStationInput | StationMasterDetailsCreateOrConnectWithoutStationInput[]
    createMany?: StationMasterDetailsCreateManyStationInputEnvelope
    connect?: StationMasterDetailsWhereUniqueInput | StationMasterDetailsWhereUniqueInput[]
  }

  export type BookingCreateNestedManyWithoutStationInput = {
    create?: XOR<BookingCreateWithoutStationInput, BookingUncheckedCreateWithoutStationInput> | BookingCreateWithoutStationInput[] | BookingUncheckedCreateWithoutStationInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutStationInput | BookingCreateOrConnectWithoutStationInput[]
    createMany?: BookingCreateManyStationInputEnvelope
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
  }

  export type ChargingSlotCreateNestedManyWithoutStationInput = {
    create?: XOR<ChargingSlotCreateWithoutStationInput, ChargingSlotUncheckedCreateWithoutStationInput> | ChargingSlotCreateWithoutStationInput[] | ChargingSlotUncheckedCreateWithoutStationInput[]
    connectOrCreate?: ChargingSlotCreateOrConnectWithoutStationInput | ChargingSlotCreateOrConnectWithoutStationInput[]
    createMany?: ChargingSlotCreateManyStationInputEnvelope
    connect?: ChargingSlotWhereUniqueInput | ChargingSlotWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutStationInput = {
    create?: XOR<ReviewCreateWithoutStationInput, ReviewUncheckedCreateWithoutStationInput> | ReviewCreateWithoutStationInput[] | ReviewUncheckedCreateWithoutStationInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutStationInput | ReviewCreateOrConnectWithoutStationInput[]
    createMany?: ReviewCreateManyStationInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ChargingHistoryCreateNestedManyWithoutStationInput = {
    create?: XOR<ChargingHistoryCreateWithoutStationInput, ChargingHistoryUncheckedCreateWithoutStationInput> | ChargingHistoryCreateWithoutStationInput[] | ChargingHistoryUncheckedCreateWithoutStationInput[]
    connectOrCreate?: ChargingHistoryCreateOrConnectWithoutStationInput | ChargingHistoryCreateOrConnectWithoutStationInput[]
    createMany?: ChargingHistoryCreateManyStationInputEnvelope
    connect?: ChargingHistoryWhereUniqueInput | ChargingHistoryWhereUniqueInput[]
  }

  export type StationMasterDetailsUncheckedCreateNestedManyWithoutStationInput = {
    create?: XOR<StationMasterDetailsCreateWithoutStationInput, StationMasterDetailsUncheckedCreateWithoutStationInput> | StationMasterDetailsCreateWithoutStationInput[] | StationMasterDetailsUncheckedCreateWithoutStationInput[]
    connectOrCreate?: StationMasterDetailsCreateOrConnectWithoutStationInput | StationMasterDetailsCreateOrConnectWithoutStationInput[]
    createMany?: StationMasterDetailsCreateManyStationInputEnvelope
    connect?: StationMasterDetailsWhereUniqueInput | StationMasterDetailsWhereUniqueInput[]
  }

  export type BookingUncheckedCreateNestedManyWithoutStationInput = {
    create?: XOR<BookingCreateWithoutStationInput, BookingUncheckedCreateWithoutStationInput> | BookingCreateWithoutStationInput[] | BookingUncheckedCreateWithoutStationInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutStationInput | BookingCreateOrConnectWithoutStationInput[]
    createMany?: BookingCreateManyStationInputEnvelope
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
  }

  export type ChargingSlotUncheckedCreateNestedManyWithoutStationInput = {
    create?: XOR<ChargingSlotCreateWithoutStationInput, ChargingSlotUncheckedCreateWithoutStationInput> | ChargingSlotCreateWithoutStationInput[] | ChargingSlotUncheckedCreateWithoutStationInput[]
    connectOrCreate?: ChargingSlotCreateOrConnectWithoutStationInput | ChargingSlotCreateOrConnectWithoutStationInput[]
    createMany?: ChargingSlotCreateManyStationInputEnvelope
    connect?: ChargingSlotWhereUniqueInput | ChargingSlotWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutStationInput = {
    create?: XOR<ReviewCreateWithoutStationInput, ReviewUncheckedCreateWithoutStationInput> | ReviewCreateWithoutStationInput[] | ReviewUncheckedCreateWithoutStationInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutStationInput | ReviewCreateOrConnectWithoutStationInput[]
    createMany?: ReviewCreateManyStationInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ChargingHistoryUncheckedCreateNestedManyWithoutStationInput = {
    create?: XOR<ChargingHistoryCreateWithoutStationInput, ChargingHistoryUncheckedCreateWithoutStationInput> | ChargingHistoryCreateWithoutStationInput[] | ChargingHistoryUncheckedCreateWithoutStationInput[]
    connectOrCreate?: ChargingHistoryCreateOrConnectWithoutStationInput | ChargingHistoryCreateOrConnectWithoutStationInput[]
    createMany?: ChargingHistoryCreateManyStationInputEnvelope
    connect?: ChargingHistoryWhereUniqueInput | ChargingHistoryWhereUniqueInput[]
  }

  export type EnumOwnerTypeFieldUpdateOperationsInput = {
    set?: $Enums.OwnerType
  }

  export type UserUpdateOneRequiredWithoutStationsNestedInput = {
    create?: XOR<UserCreateWithoutStationsInput, UserUncheckedCreateWithoutStationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStationsInput
    upsert?: UserUpsertWithoutStationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStationsInput, UserUpdateWithoutStationsInput>, UserUncheckedUpdateWithoutStationsInput>
  }

  export type StationMasterDetailsUpdateManyWithoutStationNestedInput = {
    create?: XOR<StationMasterDetailsCreateWithoutStationInput, StationMasterDetailsUncheckedCreateWithoutStationInput> | StationMasterDetailsCreateWithoutStationInput[] | StationMasterDetailsUncheckedCreateWithoutStationInput[]
    connectOrCreate?: StationMasterDetailsCreateOrConnectWithoutStationInput | StationMasterDetailsCreateOrConnectWithoutStationInput[]
    upsert?: StationMasterDetailsUpsertWithWhereUniqueWithoutStationInput | StationMasterDetailsUpsertWithWhereUniqueWithoutStationInput[]
    createMany?: StationMasterDetailsCreateManyStationInputEnvelope
    set?: StationMasterDetailsWhereUniqueInput | StationMasterDetailsWhereUniqueInput[]
    disconnect?: StationMasterDetailsWhereUniqueInput | StationMasterDetailsWhereUniqueInput[]
    delete?: StationMasterDetailsWhereUniqueInput | StationMasterDetailsWhereUniqueInput[]
    connect?: StationMasterDetailsWhereUniqueInput | StationMasterDetailsWhereUniqueInput[]
    update?: StationMasterDetailsUpdateWithWhereUniqueWithoutStationInput | StationMasterDetailsUpdateWithWhereUniqueWithoutStationInput[]
    updateMany?: StationMasterDetailsUpdateManyWithWhereWithoutStationInput | StationMasterDetailsUpdateManyWithWhereWithoutStationInput[]
    deleteMany?: StationMasterDetailsScalarWhereInput | StationMasterDetailsScalarWhereInput[]
  }

  export type BookingUpdateManyWithoutStationNestedInput = {
    create?: XOR<BookingCreateWithoutStationInput, BookingUncheckedCreateWithoutStationInput> | BookingCreateWithoutStationInput[] | BookingUncheckedCreateWithoutStationInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutStationInput | BookingCreateOrConnectWithoutStationInput[]
    upsert?: BookingUpsertWithWhereUniqueWithoutStationInput | BookingUpsertWithWhereUniqueWithoutStationInput[]
    createMany?: BookingCreateManyStationInputEnvelope
    set?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    disconnect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    delete?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    update?: BookingUpdateWithWhereUniqueWithoutStationInput | BookingUpdateWithWhereUniqueWithoutStationInput[]
    updateMany?: BookingUpdateManyWithWhereWithoutStationInput | BookingUpdateManyWithWhereWithoutStationInput[]
    deleteMany?: BookingScalarWhereInput | BookingScalarWhereInput[]
  }

  export type ChargingSlotUpdateManyWithoutStationNestedInput = {
    create?: XOR<ChargingSlotCreateWithoutStationInput, ChargingSlotUncheckedCreateWithoutStationInput> | ChargingSlotCreateWithoutStationInput[] | ChargingSlotUncheckedCreateWithoutStationInput[]
    connectOrCreate?: ChargingSlotCreateOrConnectWithoutStationInput | ChargingSlotCreateOrConnectWithoutStationInput[]
    upsert?: ChargingSlotUpsertWithWhereUniqueWithoutStationInput | ChargingSlotUpsertWithWhereUniqueWithoutStationInput[]
    createMany?: ChargingSlotCreateManyStationInputEnvelope
    set?: ChargingSlotWhereUniqueInput | ChargingSlotWhereUniqueInput[]
    disconnect?: ChargingSlotWhereUniqueInput | ChargingSlotWhereUniqueInput[]
    delete?: ChargingSlotWhereUniqueInput | ChargingSlotWhereUniqueInput[]
    connect?: ChargingSlotWhereUniqueInput | ChargingSlotWhereUniqueInput[]
    update?: ChargingSlotUpdateWithWhereUniqueWithoutStationInput | ChargingSlotUpdateWithWhereUniqueWithoutStationInput[]
    updateMany?: ChargingSlotUpdateManyWithWhereWithoutStationInput | ChargingSlotUpdateManyWithWhereWithoutStationInput[]
    deleteMany?: ChargingSlotScalarWhereInput | ChargingSlotScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutStationNestedInput = {
    create?: XOR<ReviewCreateWithoutStationInput, ReviewUncheckedCreateWithoutStationInput> | ReviewCreateWithoutStationInput[] | ReviewUncheckedCreateWithoutStationInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutStationInput | ReviewCreateOrConnectWithoutStationInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutStationInput | ReviewUpsertWithWhereUniqueWithoutStationInput[]
    createMany?: ReviewCreateManyStationInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutStationInput | ReviewUpdateWithWhereUniqueWithoutStationInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutStationInput | ReviewUpdateManyWithWhereWithoutStationInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ChargingHistoryUpdateManyWithoutStationNestedInput = {
    create?: XOR<ChargingHistoryCreateWithoutStationInput, ChargingHistoryUncheckedCreateWithoutStationInput> | ChargingHistoryCreateWithoutStationInput[] | ChargingHistoryUncheckedCreateWithoutStationInput[]
    connectOrCreate?: ChargingHistoryCreateOrConnectWithoutStationInput | ChargingHistoryCreateOrConnectWithoutStationInput[]
    upsert?: ChargingHistoryUpsertWithWhereUniqueWithoutStationInput | ChargingHistoryUpsertWithWhereUniqueWithoutStationInput[]
    createMany?: ChargingHistoryCreateManyStationInputEnvelope
    set?: ChargingHistoryWhereUniqueInput | ChargingHistoryWhereUniqueInput[]
    disconnect?: ChargingHistoryWhereUniqueInput | ChargingHistoryWhereUniqueInput[]
    delete?: ChargingHistoryWhereUniqueInput | ChargingHistoryWhereUniqueInput[]
    connect?: ChargingHistoryWhereUniqueInput | ChargingHistoryWhereUniqueInput[]
    update?: ChargingHistoryUpdateWithWhereUniqueWithoutStationInput | ChargingHistoryUpdateWithWhereUniqueWithoutStationInput[]
    updateMany?: ChargingHistoryUpdateManyWithWhereWithoutStationInput | ChargingHistoryUpdateManyWithWhereWithoutStationInput[]
    deleteMany?: ChargingHistoryScalarWhereInput | ChargingHistoryScalarWhereInput[]
  }

  export type StationMasterDetailsUncheckedUpdateManyWithoutStationNestedInput = {
    create?: XOR<StationMasterDetailsCreateWithoutStationInput, StationMasterDetailsUncheckedCreateWithoutStationInput> | StationMasterDetailsCreateWithoutStationInput[] | StationMasterDetailsUncheckedCreateWithoutStationInput[]
    connectOrCreate?: StationMasterDetailsCreateOrConnectWithoutStationInput | StationMasterDetailsCreateOrConnectWithoutStationInput[]
    upsert?: StationMasterDetailsUpsertWithWhereUniqueWithoutStationInput | StationMasterDetailsUpsertWithWhereUniqueWithoutStationInput[]
    createMany?: StationMasterDetailsCreateManyStationInputEnvelope
    set?: StationMasterDetailsWhereUniqueInput | StationMasterDetailsWhereUniqueInput[]
    disconnect?: StationMasterDetailsWhereUniqueInput | StationMasterDetailsWhereUniqueInput[]
    delete?: StationMasterDetailsWhereUniqueInput | StationMasterDetailsWhereUniqueInput[]
    connect?: StationMasterDetailsWhereUniqueInput | StationMasterDetailsWhereUniqueInput[]
    update?: StationMasterDetailsUpdateWithWhereUniqueWithoutStationInput | StationMasterDetailsUpdateWithWhereUniqueWithoutStationInput[]
    updateMany?: StationMasterDetailsUpdateManyWithWhereWithoutStationInput | StationMasterDetailsUpdateManyWithWhereWithoutStationInput[]
    deleteMany?: StationMasterDetailsScalarWhereInput | StationMasterDetailsScalarWhereInput[]
  }

  export type BookingUncheckedUpdateManyWithoutStationNestedInput = {
    create?: XOR<BookingCreateWithoutStationInput, BookingUncheckedCreateWithoutStationInput> | BookingCreateWithoutStationInput[] | BookingUncheckedCreateWithoutStationInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutStationInput | BookingCreateOrConnectWithoutStationInput[]
    upsert?: BookingUpsertWithWhereUniqueWithoutStationInput | BookingUpsertWithWhereUniqueWithoutStationInput[]
    createMany?: BookingCreateManyStationInputEnvelope
    set?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    disconnect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    delete?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    update?: BookingUpdateWithWhereUniqueWithoutStationInput | BookingUpdateWithWhereUniqueWithoutStationInput[]
    updateMany?: BookingUpdateManyWithWhereWithoutStationInput | BookingUpdateManyWithWhereWithoutStationInput[]
    deleteMany?: BookingScalarWhereInput | BookingScalarWhereInput[]
  }

  export type ChargingSlotUncheckedUpdateManyWithoutStationNestedInput = {
    create?: XOR<ChargingSlotCreateWithoutStationInput, ChargingSlotUncheckedCreateWithoutStationInput> | ChargingSlotCreateWithoutStationInput[] | ChargingSlotUncheckedCreateWithoutStationInput[]
    connectOrCreate?: ChargingSlotCreateOrConnectWithoutStationInput | ChargingSlotCreateOrConnectWithoutStationInput[]
    upsert?: ChargingSlotUpsertWithWhereUniqueWithoutStationInput | ChargingSlotUpsertWithWhereUniqueWithoutStationInput[]
    createMany?: ChargingSlotCreateManyStationInputEnvelope
    set?: ChargingSlotWhereUniqueInput | ChargingSlotWhereUniqueInput[]
    disconnect?: ChargingSlotWhereUniqueInput | ChargingSlotWhereUniqueInput[]
    delete?: ChargingSlotWhereUniqueInput | ChargingSlotWhereUniqueInput[]
    connect?: ChargingSlotWhereUniqueInput | ChargingSlotWhereUniqueInput[]
    update?: ChargingSlotUpdateWithWhereUniqueWithoutStationInput | ChargingSlotUpdateWithWhereUniqueWithoutStationInput[]
    updateMany?: ChargingSlotUpdateManyWithWhereWithoutStationInput | ChargingSlotUpdateManyWithWhereWithoutStationInput[]
    deleteMany?: ChargingSlotScalarWhereInput | ChargingSlotScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutStationNestedInput = {
    create?: XOR<ReviewCreateWithoutStationInput, ReviewUncheckedCreateWithoutStationInput> | ReviewCreateWithoutStationInput[] | ReviewUncheckedCreateWithoutStationInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutStationInput | ReviewCreateOrConnectWithoutStationInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutStationInput | ReviewUpsertWithWhereUniqueWithoutStationInput[]
    createMany?: ReviewCreateManyStationInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutStationInput | ReviewUpdateWithWhereUniqueWithoutStationInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutStationInput | ReviewUpdateManyWithWhereWithoutStationInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ChargingHistoryUncheckedUpdateManyWithoutStationNestedInput = {
    create?: XOR<ChargingHistoryCreateWithoutStationInput, ChargingHistoryUncheckedCreateWithoutStationInput> | ChargingHistoryCreateWithoutStationInput[] | ChargingHistoryUncheckedCreateWithoutStationInput[]
    connectOrCreate?: ChargingHistoryCreateOrConnectWithoutStationInput | ChargingHistoryCreateOrConnectWithoutStationInput[]
    upsert?: ChargingHistoryUpsertWithWhereUniqueWithoutStationInput | ChargingHistoryUpsertWithWhereUniqueWithoutStationInput[]
    createMany?: ChargingHistoryCreateManyStationInputEnvelope
    set?: ChargingHistoryWhereUniqueInput | ChargingHistoryWhereUniqueInput[]
    disconnect?: ChargingHistoryWhereUniqueInput | ChargingHistoryWhereUniqueInput[]
    delete?: ChargingHistoryWhereUniqueInput | ChargingHistoryWhereUniqueInput[]
    connect?: ChargingHistoryWhereUniqueInput | ChargingHistoryWhereUniqueInput[]
    update?: ChargingHistoryUpdateWithWhereUniqueWithoutStationInput | ChargingHistoryUpdateWithWhereUniqueWithoutStationInput[]
    updateMany?: ChargingHistoryUpdateManyWithWhereWithoutStationInput | ChargingHistoryUpdateManyWithWhereWithoutStationInput[]
    deleteMany?: ChargingHistoryScalarWhereInput | ChargingHistoryScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutBookingsInput = {
    create?: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookingsInput
    connect?: UserWhereUniqueInput
  }

  export type StationCreateNestedOneWithoutBookingsInput = {
    create?: XOR<StationCreateWithoutBookingsInput, StationUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: StationCreateOrConnectWithoutBookingsInput
    connect?: StationWhereUniqueInput
  }

  export type TransactionCreateNestedOneWithoutBookingInput = {
    create?: XOR<TransactionCreateWithoutBookingInput, TransactionUncheckedCreateWithoutBookingInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutBookingInput
    connect?: TransactionWhereUniqueInput
  }

  export type ChargingHistoryCreateNestedOneWithoutBookingInput = {
    create?: XOR<ChargingHistoryCreateWithoutBookingInput, ChargingHistoryUncheckedCreateWithoutBookingInput>
    connectOrCreate?: ChargingHistoryCreateOrConnectWithoutBookingInput
    connect?: ChargingHistoryWhereUniqueInput
  }

  export type TransactionUncheckedCreateNestedOneWithoutBookingInput = {
    create?: XOR<TransactionCreateWithoutBookingInput, TransactionUncheckedCreateWithoutBookingInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutBookingInput
    connect?: TransactionWhereUniqueInput
  }

  export type ChargingHistoryUncheckedCreateNestedOneWithoutBookingInput = {
    create?: XOR<ChargingHistoryCreateWithoutBookingInput, ChargingHistoryUncheckedCreateWithoutBookingInput>
    connectOrCreate?: ChargingHistoryCreateOrConnectWithoutBookingInput
    connect?: ChargingHistoryWhereUniqueInput
  }

  export type EnumBookingStatusFieldUpdateOperationsInput = {
    set?: $Enums.BookingStatus
  }

  export type UserUpdateOneRequiredWithoutBookingsNestedInput = {
    create?: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookingsInput
    upsert?: UserUpsertWithoutBookingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBookingsInput, UserUpdateWithoutBookingsInput>, UserUncheckedUpdateWithoutBookingsInput>
  }

  export type StationUpdateOneRequiredWithoutBookingsNestedInput = {
    create?: XOR<StationCreateWithoutBookingsInput, StationUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: StationCreateOrConnectWithoutBookingsInput
    upsert?: StationUpsertWithoutBookingsInput
    connect?: StationWhereUniqueInput
    update?: XOR<XOR<StationUpdateToOneWithWhereWithoutBookingsInput, StationUpdateWithoutBookingsInput>, StationUncheckedUpdateWithoutBookingsInput>
  }

  export type TransactionUpdateOneWithoutBookingNestedInput = {
    create?: XOR<TransactionCreateWithoutBookingInput, TransactionUncheckedCreateWithoutBookingInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutBookingInput
    upsert?: TransactionUpsertWithoutBookingInput
    disconnect?: TransactionWhereInput | boolean
    delete?: TransactionWhereInput | boolean
    connect?: TransactionWhereUniqueInput
    update?: XOR<XOR<TransactionUpdateToOneWithWhereWithoutBookingInput, TransactionUpdateWithoutBookingInput>, TransactionUncheckedUpdateWithoutBookingInput>
  }

  export type ChargingHistoryUpdateOneWithoutBookingNestedInput = {
    create?: XOR<ChargingHistoryCreateWithoutBookingInput, ChargingHistoryUncheckedCreateWithoutBookingInput>
    connectOrCreate?: ChargingHistoryCreateOrConnectWithoutBookingInput
    upsert?: ChargingHistoryUpsertWithoutBookingInput
    disconnect?: ChargingHistoryWhereInput | boolean
    delete?: ChargingHistoryWhereInput | boolean
    connect?: ChargingHistoryWhereUniqueInput
    update?: XOR<XOR<ChargingHistoryUpdateToOneWithWhereWithoutBookingInput, ChargingHistoryUpdateWithoutBookingInput>, ChargingHistoryUncheckedUpdateWithoutBookingInput>
  }

  export type TransactionUncheckedUpdateOneWithoutBookingNestedInput = {
    create?: XOR<TransactionCreateWithoutBookingInput, TransactionUncheckedCreateWithoutBookingInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutBookingInput
    upsert?: TransactionUpsertWithoutBookingInput
    disconnect?: TransactionWhereInput | boolean
    delete?: TransactionWhereInput | boolean
    connect?: TransactionWhereUniqueInput
    update?: XOR<XOR<TransactionUpdateToOneWithWhereWithoutBookingInput, TransactionUpdateWithoutBookingInput>, TransactionUncheckedUpdateWithoutBookingInput>
  }

  export type ChargingHistoryUncheckedUpdateOneWithoutBookingNestedInput = {
    create?: XOR<ChargingHistoryCreateWithoutBookingInput, ChargingHistoryUncheckedCreateWithoutBookingInput>
    connectOrCreate?: ChargingHistoryCreateOrConnectWithoutBookingInput
    upsert?: ChargingHistoryUpsertWithoutBookingInput
    disconnect?: ChargingHistoryWhereInput | boolean
    delete?: ChargingHistoryWhereInput | boolean
    connect?: ChargingHistoryWhereUniqueInput
    update?: XOR<XOR<ChargingHistoryUpdateToOneWithWhereWithoutBookingInput, ChargingHistoryUpdateWithoutBookingInput>, ChargingHistoryUncheckedUpdateWithoutBookingInput>
  }

  export type UserCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsInput
    connect?: UserWhereUniqueInput
  }

  export type BookingCreateNestedOneWithoutTransactionInput = {
    create?: XOR<BookingCreateWithoutTransactionInput, BookingUncheckedCreateWithoutTransactionInput>
    connectOrCreate?: BookingCreateOrConnectWithoutTransactionInput
    connect?: BookingWhereUniqueInput
  }

  export type EnumTransactionTypeFieldUpdateOperationsInput = {
    set?: $Enums.TransactionType
  }

  export type EnumTransactionStatusFieldUpdateOperationsInput = {
    set?: $Enums.TransactionStatus
  }

  export type UserUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsInput
    upsert?: UserUpsertWithoutTransactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTransactionsInput, UserUpdateWithoutTransactionsInput>, UserUncheckedUpdateWithoutTransactionsInput>
  }

  export type BookingUpdateOneWithoutTransactionNestedInput = {
    create?: XOR<BookingCreateWithoutTransactionInput, BookingUncheckedCreateWithoutTransactionInput>
    connectOrCreate?: BookingCreateOrConnectWithoutTransactionInput
    upsert?: BookingUpsertWithoutTransactionInput
    disconnect?: BookingWhereInput | boolean
    delete?: BookingWhereInput | boolean
    connect?: BookingWhereUniqueInput
    update?: XOR<XOR<BookingUpdateToOneWithWhereWithoutTransactionInput, BookingUpdateWithoutTransactionInput>, BookingUncheckedUpdateWithoutTransactionInput>
  }

  export type StationCreateNestedOneWithoutChargingSlotsInput = {
    create?: XOR<StationCreateWithoutChargingSlotsInput, StationUncheckedCreateWithoutChargingSlotsInput>
    connectOrCreate?: StationCreateOrConnectWithoutChargingSlotsInput
    connect?: StationWhereUniqueInput
  }

  export type EnumSlotTypeFieldUpdateOperationsInput = {
    set?: $Enums.SlotType
  }

  export type StationUpdateOneRequiredWithoutChargingSlotsNestedInput = {
    create?: XOR<StationCreateWithoutChargingSlotsInput, StationUncheckedCreateWithoutChargingSlotsInput>
    connectOrCreate?: StationCreateOrConnectWithoutChargingSlotsInput
    upsert?: StationUpsertWithoutChargingSlotsInput
    connect?: StationWhereUniqueInput
    update?: XOR<XOR<StationUpdateToOneWithWhereWithoutChargingSlotsInput, StationUpdateWithoutChargingSlotsInput>, StationUncheckedUpdateWithoutChargingSlotsInput>
  }

  export type UserCreateNestedOneWithoutReviewsInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    connect?: UserWhereUniqueInput
  }

  export type StationCreateNestedOneWithoutReviewsInput = {
    create?: XOR<StationCreateWithoutReviewsInput, StationUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: StationCreateOrConnectWithoutReviewsInput
    connect?: StationWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    upsert?: UserUpsertWithoutReviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReviewsInput, UserUpdateWithoutReviewsInput>, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type StationUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<StationCreateWithoutReviewsInput, StationUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: StationCreateOrConnectWithoutReviewsInput
    upsert?: StationUpsertWithoutReviewsInput
    connect?: StationWhereUniqueInput
    update?: XOR<XOR<StationUpdateToOneWithWhereWithoutReviewsInput, StationUpdateWithoutReviewsInput>, StationUncheckedUpdateWithoutReviewsInput>
  }

  export type UserCreateNestedOneWithoutChargingHistoriesInput = {
    create?: XOR<UserCreateWithoutChargingHistoriesInput, UserUncheckedCreateWithoutChargingHistoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutChargingHistoriesInput
    connect?: UserWhereUniqueInput
  }

  export type StationCreateNestedOneWithoutChargingHistoriesInput = {
    create?: XOR<StationCreateWithoutChargingHistoriesInput, StationUncheckedCreateWithoutChargingHistoriesInput>
    connectOrCreate?: StationCreateOrConnectWithoutChargingHistoriesInput
    connect?: StationWhereUniqueInput
  }

  export type BookingCreateNestedOneWithoutChargingHistoryInput = {
    create?: XOR<BookingCreateWithoutChargingHistoryInput, BookingUncheckedCreateWithoutChargingHistoryInput>
    connectOrCreate?: BookingCreateOrConnectWithoutChargingHistoryInput
    connect?: BookingWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutChargingHistoriesNestedInput = {
    create?: XOR<UserCreateWithoutChargingHistoriesInput, UserUncheckedCreateWithoutChargingHistoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutChargingHistoriesInput
    upsert?: UserUpsertWithoutChargingHistoriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChargingHistoriesInput, UserUpdateWithoutChargingHistoriesInput>, UserUncheckedUpdateWithoutChargingHistoriesInput>
  }

  export type StationUpdateOneRequiredWithoutChargingHistoriesNestedInput = {
    create?: XOR<StationCreateWithoutChargingHistoriesInput, StationUncheckedCreateWithoutChargingHistoriesInput>
    connectOrCreate?: StationCreateOrConnectWithoutChargingHistoriesInput
    upsert?: StationUpsertWithoutChargingHistoriesInput
    connect?: StationWhereUniqueInput
    update?: XOR<XOR<StationUpdateToOneWithWhereWithoutChargingHistoriesInput, StationUpdateWithoutChargingHistoriesInput>, StationUncheckedUpdateWithoutChargingHistoriesInput>
  }

  export type BookingUpdateOneWithoutChargingHistoryNestedInput = {
    create?: XOR<BookingCreateWithoutChargingHistoryInput, BookingUncheckedCreateWithoutChargingHistoryInput>
    connectOrCreate?: BookingCreateOrConnectWithoutChargingHistoryInput
    upsert?: BookingUpsertWithoutChargingHistoryInput
    disconnect?: BookingWhereInput | boolean
    delete?: BookingWhereInput | boolean
    connect?: BookingWhereUniqueInput
    update?: XOR<XOR<BookingUpdateToOneWithWhereWithoutChargingHistoryInput, BookingUpdateWithoutChargingHistoryInput>, BookingUncheckedUpdateWithoutChargingHistoryInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserCreateNestedOneWithoutOtpsInput = {
    create?: XOR<UserCreateWithoutOtpsInput, UserUncheckedCreateWithoutOtpsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOtpsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutOtpsNestedInput = {
    create?: XOR<UserCreateWithoutOtpsInput, UserUncheckedCreateWithoutOtpsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOtpsInput
    upsert?: UserUpsertWithoutOtpsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOtpsInput, UserUpdateWithoutOtpsInput>, UserUncheckedUpdateWithoutOtpsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumAccountTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountType | EnumAccountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountTypeFilter<$PrismaModel> | $Enums.AccountType
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumAccountTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountType | EnumAccountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountTypeWithAggregatesFilter<$PrismaModel> | $Enums.AccountType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccountTypeFilter<$PrismaModel>
    _max?: NestedEnumAccountTypeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumOwnerTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.OwnerType | EnumOwnerTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OwnerType[] | ListEnumOwnerTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OwnerType[] | ListEnumOwnerTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOwnerTypeFilter<$PrismaModel> | $Enums.OwnerType
  }

  export type NestedEnumOwnerTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OwnerType | EnumOwnerTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OwnerType[] | ListEnumOwnerTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OwnerType[] | ListEnumOwnerTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOwnerTypeWithAggregatesFilter<$PrismaModel> | $Enums.OwnerType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOwnerTypeFilter<$PrismaModel>
    _max?: NestedEnumOwnerTypeFilter<$PrismaModel>
  }

  export type NestedEnumBookingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BookingStatus | EnumBookingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBookingStatusFilter<$PrismaModel> | $Enums.BookingStatus
  }

  export type NestedEnumBookingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BookingStatus | EnumBookingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBookingStatusWithAggregatesFilter<$PrismaModel> | $Enums.BookingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBookingStatusFilter<$PrismaModel>
    _max?: NestedEnumBookingStatusFilter<$PrismaModel>
  }

  export type NestedEnumTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeFilter<$PrismaModel> | $Enums.TransactionType
  }

  export type NestedEnumTransactionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionStatusFilter<$PrismaModel> | $Enums.TransactionStatus
  }

  export type NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.TransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumTransactionTypeFilter<$PrismaModel>
  }

  export type NestedEnumTransactionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionStatusWithAggregatesFilter<$PrismaModel> | $Enums.TransactionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionStatusFilter<$PrismaModel>
    _max?: NestedEnumTransactionStatusFilter<$PrismaModel>
  }

  export type NestedEnumSlotTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SlotType | EnumSlotTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SlotType[] | ListEnumSlotTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SlotType[] | ListEnumSlotTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSlotTypeFilter<$PrismaModel> | $Enums.SlotType
  }

  export type NestedEnumSlotTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SlotType | EnumSlotTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SlotType[] | ListEnumSlotTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SlotType[] | ListEnumSlotTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSlotTypeWithAggregatesFilter<$PrismaModel> | $Enums.SlotType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSlotTypeFilter<$PrismaModel>
    _max?: NestedEnumSlotTypeFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type OTPCreateWithoutUserInput = {
    id?: string
    otp: string
    createdAt?: Date | string
    expiresAt: Date | string
    isUsed?: boolean
  }

  export type OTPUncheckedCreateWithoutUserInput = {
    id?: string
    otp: string
    createdAt?: Date | string
    expiresAt: Date | string
    isUsed?: boolean
  }

  export type OTPCreateOrConnectWithoutUserInput = {
    where: OTPWhereUniqueInput
    create: XOR<OTPCreateWithoutUserInput, OTPUncheckedCreateWithoutUserInput>
  }

  export type OTPCreateManyUserInputEnvelope = {
    data: OTPCreateManyUserInput | OTPCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EVCreateWithoutUserInput = {
    id?: string
    brand: string
    model: string
    licensePlate: string
    batteryCapacity: number
    batteryPercentage: number
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EVUncheckedCreateWithoutUserInput = {
    id?: string
    brand: string
    model: string
    licensePlate: string
    batteryCapacity: number
    batteryPercentage: number
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EVCreateOrConnectWithoutUserInput = {
    where: EVWhereUniqueInput
    create: XOR<EVCreateWithoutUserInput, EVUncheckedCreateWithoutUserInput>
  }

  export type EVCreateManyUserInputEnvelope = {
    data: EVCreateManyUserInput | EVCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BookingCreateWithoutUserInput = {
    id?: string
    evId: string
    startTime: Date | string
    endTime: Date | string
    status?: $Enums.BookingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    station: StationCreateNestedOneWithoutBookingsInput
    transaction?: TransactionCreateNestedOneWithoutBookingInput
    chargingHistory?: ChargingHistoryCreateNestedOneWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutUserInput = {
    id?: string
    stationId: string
    evId: string
    startTime: Date | string
    endTime: Date | string
    status?: $Enums.BookingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    transaction?: TransactionUncheckedCreateNestedOneWithoutBookingInput
    chargingHistory?: ChargingHistoryUncheckedCreateNestedOneWithoutBookingInput
  }

  export type BookingCreateOrConnectWithoutUserInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput>
  }

  export type BookingCreateManyUserInputEnvelope = {
    data: BookingCreateManyUserInput | BookingCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type StationCreateWithoutOwnerInput = {
    id?: string
    name: string
    companyName?: string | null
    ownerType: $Enums.OwnerType
    address: string
    latitude: number
    longitude: number
    totalSlots: number
    availableSlots: number
    contact?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    stationMasters?: StationMasterDetailsCreateNestedManyWithoutStationInput
    bookings?: BookingCreateNestedManyWithoutStationInput
    chargingSlots?: ChargingSlotCreateNestedManyWithoutStationInput
    reviews?: ReviewCreateNestedManyWithoutStationInput
    chargingHistories?: ChargingHistoryCreateNestedManyWithoutStationInput
  }

  export type StationUncheckedCreateWithoutOwnerInput = {
    id?: string
    name: string
    companyName?: string | null
    ownerType: $Enums.OwnerType
    address: string
    latitude: number
    longitude: number
    totalSlots: number
    availableSlots: number
    contact?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    stationMasters?: StationMasterDetailsUncheckedCreateNestedManyWithoutStationInput
    bookings?: BookingUncheckedCreateNestedManyWithoutStationInput
    chargingSlots?: ChargingSlotUncheckedCreateNestedManyWithoutStationInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutStationInput
    chargingHistories?: ChargingHistoryUncheckedCreateNestedManyWithoutStationInput
  }

  export type StationCreateOrConnectWithoutOwnerInput = {
    where: StationWhereUniqueInput
    create: XOR<StationCreateWithoutOwnerInput, StationUncheckedCreateWithoutOwnerInput>
  }

  export type StationCreateManyOwnerInputEnvelope = {
    data: StationCreateManyOwnerInput | StationCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutUserInput = {
    id?: string
    amount: number
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    booking?: BookingCreateNestedOneWithoutTransactionInput
  }

  export type TransactionUncheckedCreateWithoutUserInput = {
    id?: string
    amount: number
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    bookingId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutUserInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput>
  }

  export type TransactionCreateManyUserInputEnvelope = {
    data: TransactionCreateManyUserInput | TransactionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutUserInput = {
    id?: string
    rating?: number
    comment?: string | null
    createdAt?: Date | string
    station: StationCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutUserInput = {
    id?: string
    stationId: string
    rating?: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type ReviewCreateOrConnectWithoutUserInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewCreateManyUserInputEnvelope = {
    data: ReviewCreateManyUserInput | ReviewCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ChargingHistoryCreateWithoutUserInput = {
    id?: string
    evId: string
    energyUsed: number
    cost: number
    duration: number
    createdAt?: Date | string
    station: StationCreateNestedOneWithoutChargingHistoriesInput
    booking?: BookingCreateNestedOneWithoutChargingHistoryInput
  }

  export type ChargingHistoryUncheckedCreateWithoutUserInput = {
    id?: string
    stationId: string
    bookingId?: string | null
    evId: string
    energyUsed: number
    cost: number
    duration: number
    createdAt?: Date | string
  }

  export type ChargingHistoryCreateOrConnectWithoutUserInput = {
    where: ChargingHistoryWhereUniqueInput
    create: XOR<ChargingHistoryCreateWithoutUserInput, ChargingHistoryUncheckedCreateWithoutUserInput>
  }

  export type ChargingHistoryCreateManyUserInputEnvelope = {
    data: ChargingHistoryCreateManyUserInput | ChargingHistoryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type StationMasterDetailsCreateWithoutOwnerInput = {
    id?: string
    shift: string
    experience?: number | null
    certification?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutStationMasterDetailsInput
    station: StationCreateNestedOneWithoutStationMastersInput
  }

  export type StationMasterDetailsUncheckedCreateWithoutOwnerInput = {
    id?: string
    userId: string
    stationId: string
    shift: string
    experience?: number | null
    certification?: string | null
    createdAt?: Date | string
  }

  export type StationMasterDetailsCreateOrConnectWithoutOwnerInput = {
    where: StationMasterDetailsWhereUniqueInput
    create: XOR<StationMasterDetailsCreateWithoutOwnerInput, StationMasterDetailsUncheckedCreateWithoutOwnerInput>
  }

  export type StationMasterDetailsCreateManyOwnerInputEnvelope = {
    data: StationMasterDetailsCreateManyOwnerInput | StationMasterDetailsCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type UserDetailsCreateWithoutUserInput = {
    id?: string
    address?: string | null
    preferences?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    createdAt?: Date | string
  }

  export type UserDetailsUncheckedCreateWithoutUserInput = {
    id?: string
    address?: string | null
    preferences?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    createdAt?: Date | string
  }

  export type UserDetailsCreateOrConnectWithoutUserInput = {
    where: UserDetailsWhereUniqueInput
    create: XOR<UserDetailsCreateWithoutUserInput, UserDetailsUncheckedCreateWithoutUserInput>
  }

  export type OwnerDetailsCreateWithoutUserInput = {
    id?: string
    companyName: string
    companyRegNo: string
    companyDocs: string
    address?: string | null
    contactEmail?: string | null
    createdAt?: Date | string
  }

  export type OwnerDetailsUncheckedCreateWithoutUserInput = {
    id?: string
    companyName: string
    companyRegNo: string
    companyDocs: string
    address?: string | null
    contactEmail?: string | null
    createdAt?: Date | string
  }

  export type OwnerDetailsCreateOrConnectWithoutUserInput = {
    where: OwnerDetailsWhereUniqueInput
    create: XOR<OwnerDetailsCreateWithoutUserInput, OwnerDetailsUncheckedCreateWithoutUserInput>
  }

  export type AdminDetailsCreateWithoutUserInput = {
    id?: string
    employeeId: string
    department: string
    accessLevel?: number
    assignedZone?: string | null
    createdAt?: Date | string
  }

  export type AdminDetailsUncheckedCreateWithoutUserInput = {
    id?: string
    employeeId: string
    department: string
    accessLevel?: number
    assignedZone?: string | null
    createdAt?: Date | string
  }

  export type AdminDetailsCreateOrConnectWithoutUserInput = {
    where: AdminDetailsWhereUniqueInput
    create: XOR<AdminDetailsCreateWithoutUserInput, AdminDetailsUncheckedCreateWithoutUserInput>
  }

  export type StationMasterDetailsCreateWithoutUserInput = {
    id?: string
    shift: string
    experience?: number | null
    certification?: string | null
    createdAt?: Date | string
    station: StationCreateNestedOneWithoutStationMastersInput
    owner: UserCreateNestedOneWithoutStationMastersUnderMeInput
  }

  export type StationMasterDetailsUncheckedCreateWithoutUserInput = {
    id?: string
    stationId: string
    ownerId: string
    shift: string
    experience?: number | null
    certification?: string | null
    createdAt?: Date | string
  }

  export type StationMasterDetailsCreateOrConnectWithoutUserInput = {
    where: StationMasterDetailsWhereUniqueInput
    create: XOR<StationMasterDetailsCreateWithoutUserInput, StationMasterDetailsUncheckedCreateWithoutUserInput>
  }

  export type OTPUpsertWithWhereUniqueWithoutUserInput = {
    where: OTPWhereUniqueInput
    update: XOR<OTPUpdateWithoutUserInput, OTPUncheckedUpdateWithoutUserInput>
    create: XOR<OTPCreateWithoutUserInput, OTPUncheckedCreateWithoutUserInput>
  }

  export type OTPUpdateWithWhereUniqueWithoutUserInput = {
    where: OTPWhereUniqueInput
    data: XOR<OTPUpdateWithoutUserInput, OTPUncheckedUpdateWithoutUserInput>
  }

  export type OTPUpdateManyWithWhereWithoutUserInput = {
    where: OTPScalarWhereInput
    data: XOR<OTPUpdateManyMutationInput, OTPUncheckedUpdateManyWithoutUserInput>
  }

  export type OTPScalarWhereInput = {
    AND?: OTPScalarWhereInput | OTPScalarWhereInput[]
    OR?: OTPScalarWhereInput[]
    NOT?: OTPScalarWhereInput | OTPScalarWhereInput[]
    id?: StringFilter<"OTP"> | string
    userId?: StringFilter<"OTP"> | string
    otp?: StringFilter<"OTP"> | string
    createdAt?: DateTimeFilter<"OTP"> | Date | string
    expiresAt?: DateTimeFilter<"OTP"> | Date | string
    isUsed?: BoolFilter<"OTP"> | boolean
  }

  export type EVUpsertWithWhereUniqueWithoutUserInput = {
    where: EVWhereUniqueInput
    update: XOR<EVUpdateWithoutUserInput, EVUncheckedUpdateWithoutUserInput>
    create: XOR<EVCreateWithoutUserInput, EVUncheckedCreateWithoutUserInput>
  }

  export type EVUpdateWithWhereUniqueWithoutUserInput = {
    where: EVWhereUniqueInput
    data: XOR<EVUpdateWithoutUserInput, EVUncheckedUpdateWithoutUserInput>
  }

  export type EVUpdateManyWithWhereWithoutUserInput = {
    where: EVScalarWhereInput
    data: XOR<EVUpdateManyMutationInput, EVUncheckedUpdateManyWithoutUserInput>
  }

  export type EVScalarWhereInput = {
    AND?: EVScalarWhereInput | EVScalarWhereInput[]
    OR?: EVScalarWhereInput[]
    NOT?: EVScalarWhereInput | EVScalarWhereInput[]
    id?: StringFilter<"EV"> | string
    userId?: StringFilter<"EV"> | string
    brand?: StringFilter<"EV"> | string
    model?: StringFilter<"EV"> | string
    licensePlate?: StringFilter<"EV"> | string
    batteryCapacity?: FloatFilter<"EV"> | number
    batteryPercentage?: FloatFilter<"EV"> | number
    isDefault?: BoolFilter<"EV"> | boolean
    createdAt?: DateTimeFilter<"EV"> | Date | string
    updatedAt?: DateTimeFilter<"EV"> | Date | string
  }

  export type BookingUpsertWithWhereUniqueWithoutUserInput = {
    where: BookingWhereUniqueInput
    update: XOR<BookingUpdateWithoutUserInput, BookingUncheckedUpdateWithoutUserInput>
    create: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput>
  }

  export type BookingUpdateWithWhereUniqueWithoutUserInput = {
    where: BookingWhereUniqueInput
    data: XOR<BookingUpdateWithoutUserInput, BookingUncheckedUpdateWithoutUserInput>
  }

  export type BookingUpdateManyWithWhereWithoutUserInput = {
    where: BookingScalarWhereInput
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyWithoutUserInput>
  }

  export type BookingScalarWhereInput = {
    AND?: BookingScalarWhereInput | BookingScalarWhereInput[]
    OR?: BookingScalarWhereInput[]
    NOT?: BookingScalarWhereInput | BookingScalarWhereInput[]
    id?: StringFilter<"Booking"> | string
    userId?: StringFilter<"Booking"> | string
    stationId?: StringFilter<"Booking"> | string
    evId?: StringFilter<"Booking"> | string
    startTime?: DateTimeFilter<"Booking"> | Date | string
    endTime?: DateTimeFilter<"Booking"> | Date | string
    status?: EnumBookingStatusFilter<"Booking"> | $Enums.BookingStatus
    createdAt?: DateTimeFilter<"Booking"> | Date | string
    updatedAt?: DateTimeFilter<"Booking"> | Date | string
  }

  export type StationUpsertWithWhereUniqueWithoutOwnerInput = {
    where: StationWhereUniqueInput
    update: XOR<StationUpdateWithoutOwnerInput, StationUncheckedUpdateWithoutOwnerInput>
    create: XOR<StationCreateWithoutOwnerInput, StationUncheckedCreateWithoutOwnerInput>
  }

  export type StationUpdateWithWhereUniqueWithoutOwnerInput = {
    where: StationWhereUniqueInput
    data: XOR<StationUpdateWithoutOwnerInput, StationUncheckedUpdateWithoutOwnerInput>
  }

  export type StationUpdateManyWithWhereWithoutOwnerInput = {
    where: StationScalarWhereInput
    data: XOR<StationUpdateManyMutationInput, StationUncheckedUpdateManyWithoutOwnerInput>
  }

  export type StationScalarWhereInput = {
    AND?: StationScalarWhereInput | StationScalarWhereInput[]
    OR?: StationScalarWhereInput[]
    NOT?: StationScalarWhereInput | StationScalarWhereInput[]
    id?: StringFilter<"Station"> | string
    name?: StringFilter<"Station"> | string
    companyName?: StringNullableFilter<"Station"> | string | null
    ownerType?: EnumOwnerTypeFilter<"Station"> | $Enums.OwnerType
    ownerId?: StringFilter<"Station"> | string
    address?: StringFilter<"Station"> | string
    latitude?: FloatFilter<"Station"> | number
    longitude?: FloatFilter<"Station"> | number
    totalSlots?: IntFilter<"Station"> | number
    availableSlots?: IntFilter<"Station"> | number
    contact?: StringNullableFilter<"Station"> | string | null
    createdAt?: DateTimeFilter<"Station"> | Date | string
    updatedAt?: DateTimeFilter<"Station"> | Date | string
  }

  export type TransactionUpsertWithWhereUniqueWithoutUserInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutUserInput, TransactionUncheckedUpdateWithoutUserInput>
    create: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutUserInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutUserInput, TransactionUncheckedUpdateWithoutUserInput>
  }

  export type TransactionUpdateManyWithWhereWithoutUserInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutUserInput>
  }

  export type TransactionScalarWhereInput = {
    AND?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    OR?: TransactionScalarWhereInput[]
    NOT?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    id?: StringFilter<"Transaction"> | string
    userId?: StringFilter<"Transaction"> | string
    amount?: FloatFilter<"Transaction"> | number
    type?: EnumTransactionTypeFilter<"Transaction"> | $Enums.TransactionType
    status?: EnumTransactionStatusFilter<"Transaction"> | $Enums.TransactionStatus
    bookingId?: StringNullableFilter<"Transaction"> | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
  }

  export type ReviewUpsertWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
  }

  export type ReviewUpdateManyWithWhereWithoutUserInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutUserInput>
  }

  export type ReviewScalarWhereInput = {
    AND?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    OR?: ReviewScalarWhereInput[]
    NOT?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    id?: StringFilter<"Review"> | string
    userId?: StringFilter<"Review"> | string
    stationId?: StringFilter<"Review"> | string
    rating?: IntFilter<"Review"> | number
    comment?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    isRead?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type ChargingHistoryUpsertWithWhereUniqueWithoutUserInput = {
    where: ChargingHistoryWhereUniqueInput
    update: XOR<ChargingHistoryUpdateWithoutUserInput, ChargingHistoryUncheckedUpdateWithoutUserInput>
    create: XOR<ChargingHistoryCreateWithoutUserInput, ChargingHistoryUncheckedCreateWithoutUserInput>
  }

  export type ChargingHistoryUpdateWithWhereUniqueWithoutUserInput = {
    where: ChargingHistoryWhereUniqueInput
    data: XOR<ChargingHistoryUpdateWithoutUserInput, ChargingHistoryUncheckedUpdateWithoutUserInput>
  }

  export type ChargingHistoryUpdateManyWithWhereWithoutUserInput = {
    where: ChargingHistoryScalarWhereInput
    data: XOR<ChargingHistoryUpdateManyMutationInput, ChargingHistoryUncheckedUpdateManyWithoutUserInput>
  }

  export type ChargingHistoryScalarWhereInput = {
    AND?: ChargingHistoryScalarWhereInput | ChargingHistoryScalarWhereInput[]
    OR?: ChargingHistoryScalarWhereInput[]
    NOT?: ChargingHistoryScalarWhereInput | ChargingHistoryScalarWhereInput[]
    id?: StringFilter<"ChargingHistory"> | string
    userId?: StringFilter<"ChargingHistory"> | string
    stationId?: StringFilter<"ChargingHistory"> | string
    bookingId?: StringNullableFilter<"ChargingHistory"> | string | null
    evId?: StringFilter<"ChargingHistory"> | string
    energyUsed?: FloatFilter<"ChargingHistory"> | number
    cost?: FloatFilter<"ChargingHistory"> | number
    duration?: IntFilter<"ChargingHistory"> | number
    createdAt?: DateTimeFilter<"ChargingHistory"> | Date | string
  }

  export type StationMasterDetailsUpsertWithWhereUniqueWithoutOwnerInput = {
    where: StationMasterDetailsWhereUniqueInput
    update: XOR<StationMasterDetailsUpdateWithoutOwnerInput, StationMasterDetailsUncheckedUpdateWithoutOwnerInput>
    create: XOR<StationMasterDetailsCreateWithoutOwnerInput, StationMasterDetailsUncheckedCreateWithoutOwnerInput>
  }

  export type StationMasterDetailsUpdateWithWhereUniqueWithoutOwnerInput = {
    where: StationMasterDetailsWhereUniqueInput
    data: XOR<StationMasterDetailsUpdateWithoutOwnerInput, StationMasterDetailsUncheckedUpdateWithoutOwnerInput>
  }

  export type StationMasterDetailsUpdateManyWithWhereWithoutOwnerInput = {
    where: StationMasterDetailsScalarWhereInput
    data: XOR<StationMasterDetailsUpdateManyMutationInput, StationMasterDetailsUncheckedUpdateManyWithoutOwnerInput>
  }

  export type StationMasterDetailsScalarWhereInput = {
    AND?: StationMasterDetailsScalarWhereInput | StationMasterDetailsScalarWhereInput[]
    OR?: StationMasterDetailsScalarWhereInput[]
    NOT?: StationMasterDetailsScalarWhereInput | StationMasterDetailsScalarWhereInput[]
    id?: StringFilter<"StationMasterDetails"> | string
    userId?: StringFilter<"StationMasterDetails"> | string
    stationId?: StringFilter<"StationMasterDetails"> | string
    ownerId?: StringFilter<"StationMasterDetails"> | string
    shift?: StringFilter<"StationMasterDetails"> | string
    experience?: IntNullableFilter<"StationMasterDetails"> | number | null
    certification?: StringNullableFilter<"StationMasterDetails"> | string | null
    createdAt?: DateTimeFilter<"StationMasterDetails"> | Date | string
  }

  export type UserDetailsUpsertWithoutUserInput = {
    update: XOR<UserDetailsUpdateWithoutUserInput, UserDetailsUncheckedUpdateWithoutUserInput>
    create: XOR<UserDetailsCreateWithoutUserInput, UserDetailsUncheckedCreateWithoutUserInput>
    where?: UserDetailsWhereInput
  }

  export type UserDetailsUpdateToOneWithWhereWithoutUserInput = {
    where?: UserDetailsWhereInput
    data: XOR<UserDetailsUpdateWithoutUserInput, UserDetailsUncheckedUpdateWithoutUserInput>
  }

  export type UserDetailsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserDetailsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    preferences?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OwnerDetailsUpsertWithoutUserInput = {
    update: XOR<OwnerDetailsUpdateWithoutUserInput, OwnerDetailsUncheckedUpdateWithoutUserInput>
    create: XOR<OwnerDetailsCreateWithoutUserInput, OwnerDetailsUncheckedCreateWithoutUserInput>
    where?: OwnerDetailsWhereInput
  }

  export type OwnerDetailsUpdateToOneWithWhereWithoutUserInput = {
    where?: OwnerDetailsWhereInput
    data: XOR<OwnerDetailsUpdateWithoutUserInput, OwnerDetailsUncheckedUpdateWithoutUserInput>
  }

  export type OwnerDetailsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    companyRegNo?: StringFieldUpdateOperationsInput | string
    companyDocs?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OwnerDetailsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    companyRegNo?: StringFieldUpdateOperationsInput | string
    companyDocs?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminDetailsUpsertWithoutUserInput = {
    update: XOR<AdminDetailsUpdateWithoutUserInput, AdminDetailsUncheckedUpdateWithoutUserInput>
    create: XOR<AdminDetailsCreateWithoutUserInput, AdminDetailsUncheckedCreateWithoutUserInput>
    where?: AdminDetailsWhereInput
  }

  export type AdminDetailsUpdateToOneWithWhereWithoutUserInput = {
    where?: AdminDetailsWhereInput
    data: XOR<AdminDetailsUpdateWithoutUserInput, AdminDetailsUncheckedUpdateWithoutUserInput>
  }

  export type AdminDetailsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    accessLevel?: IntFieldUpdateOperationsInput | number
    assignedZone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminDetailsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    accessLevel?: IntFieldUpdateOperationsInput | number
    assignedZone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StationMasterDetailsUpsertWithoutUserInput = {
    update: XOR<StationMasterDetailsUpdateWithoutUserInput, StationMasterDetailsUncheckedUpdateWithoutUserInput>
    create: XOR<StationMasterDetailsCreateWithoutUserInput, StationMasterDetailsUncheckedCreateWithoutUserInput>
    where?: StationMasterDetailsWhereInput
  }

  export type StationMasterDetailsUpdateToOneWithWhereWithoutUserInput = {
    where?: StationMasterDetailsWhereInput
    data: XOR<StationMasterDetailsUpdateWithoutUserInput, StationMasterDetailsUncheckedUpdateWithoutUserInput>
  }

  export type StationMasterDetailsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    shift?: StringFieldUpdateOperationsInput | string
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    certification?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    station?: StationUpdateOneRequiredWithoutStationMastersNestedInput
    owner?: UserUpdateOneRequiredWithoutStationMastersUnderMeNestedInput
  }

  export type StationMasterDetailsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    stationId?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    shift?: StringFieldUpdateOperationsInput | string
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    certification?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutUserDetailsInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otps?: OTPCreateNestedManyWithoutUserInput
    evs?: EVCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    stations?: StationCreateNestedManyWithoutOwnerInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    chargingHistories?: ChargingHistoryCreateNestedManyWithoutUserInput
    stationMastersUnderMe?: StationMasterDetailsCreateNestedManyWithoutOwnerInput
    ownerDetails?: OwnerDetailsCreateNestedOneWithoutUserInput
    adminDetails?: AdminDetailsCreateNestedOneWithoutUserInput
    stationMasterDetails?: StationMasterDetailsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserDetailsInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otps?: OTPUncheckedCreateNestedManyWithoutUserInput
    evs?: EVUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    stations?: StationUncheckedCreateNestedManyWithoutOwnerInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    chargingHistories?: ChargingHistoryUncheckedCreateNestedManyWithoutUserInput
    stationMastersUnderMe?: StationMasterDetailsUncheckedCreateNestedManyWithoutOwnerInput
    ownerDetails?: OwnerDetailsUncheckedCreateNestedOneWithoutUserInput
    adminDetails?: AdminDetailsUncheckedCreateNestedOneWithoutUserInput
    stationMasterDetails?: StationMasterDetailsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserDetailsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserDetailsInput, UserUncheckedCreateWithoutUserDetailsInput>
  }

  export type UserUpsertWithoutUserDetailsInput = {
    update: XOR<UserUpdateWithoutUserDetailsInput, UserUncheckedUpdateWithoutUserDetailsInput>
    create: XOR<UserCreateWithoutUserDetailsInput, UserUncheckedCreateWithoutUserDetailsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserDetailsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserDetailsInput, UserUncheckedUpdateWithoutUserDetailsInput>
  }

  export type UserUpdateWithoutUserDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otps?: OTPUpdateManyWithoutUserNestedInput
    evs?: EVUpdateManyWithoutUserNestedInput
    bookings?: BookingUpdateManyWithoutUserNestedInput
    stations?: StationUpdateManyWithoutOwnerNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    chargingHistories?: ChargingHistoryUpdateManyWithoutUserNestedInput
    stationMastersUnderMe?: StationMasterDetailsUpdateManyWithoutOwnerNestedInput
    ownerDetails?: OwnerDetailsUpdateOneWithoutUserNestedInput
    adminDetails?: AdminDetailsUpdateOneWithoutUserNestedInput
    stationMasterDetails?: StationMasterDetailsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otps?: OTPUncheckedUpdateManyWithoutUserNestedInput
    evs?: EVUncheckedUpdateManyWithoutUserNestedInput
    bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    stations?: StationUncheckedUpdateManyWithoutOwnerNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    chargingHistories?: ChargingHistoryUncheckedUpdateManyWithoutUserNestedInput
    stationMastersUnderMe?: StationMasterDetailsUncheckedUpdateManyWithoutOwnerNestedInput
    ownerDetails?: OwnerDetailsUncheckedUpdateOneWithoutUserNestedInput
    adminDetails?: AdminDetailsUncheckedUpdateOneWithoutUserNestedInput
    stationMasterDetails?: StationMasterDetailsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutOwnerDetailsInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otps?: OTPCreateNestedManyWithoutUserInput
    evs?: EVCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    stations?: StationCreateNestedManyWithoutOwnerInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    chargingHistories?: ChargingHistoryCreateNestedManyWithoutUserInput
    stationMastersUnderMe?: StationMasterDetailsCreateNestedManyWithoutOwnerInput
    userDetails?: UserDetailsCreateNestedOneWithoutUserInput
    adminDetails?: AdminDetailsCreateNestedOneWithoutUserInput
    stationMasterDetails?: StationMasterDetailsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOwnerDetailsInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otps?: OTPUncheckedCreateNestedManyWithoutUserInput
    evs?: EVUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    stations?: StationUncheckedCreateNestedManyWithoutOwnerInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    chargingHistories?: ChargingHistoryUncheckedCreateNestedManyWithoutUserInput
    stationMastersUnderMe?: StationMasterDetailsUncheckedCreateNestedManyWithoutOwnerInput
    userDetails?: UserDetailsUncheckedCreateNestedOneWithoutUserInput
    adminDetails?: AdminDetailsUncheckedCreateNestedOneWithoutUserInput
    stationMasterDetails?: StationMasterDetailsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOwnerDetailsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOwnerDetailsInput, UserUncheckedCreateWithoutOwnerDetailsInput>
  }

  export type UserUpsertWithoutOwnerDetailsInput = {
    update: XOR<UserUpdateWithoutOwnerDetailsInput, UserUncheckedUpdateWithoutOwnerDetailsInput>
    create: XOR<UserCreateWithoutOwnerDetailsInput, UserUncheckedCreateWithoutOwnerDetailsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOwnerDetailsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOwnerDetailsInput, UserUncheckedUpdateWithoutOwnerDetailsInput>
  }

  export type UserUpdateWithoutOwnerDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otps?: OTPUpdateManyWithoutUserNestedInput
    evs?: EVUpdateManyWithoutUserNestedInput
    bookings?: BookingUpdateManyWithoutUserNestedInput
    stations?: StationUpdateManyWithoutOwnerNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    chargingHistories?: ChargingHistoryUpdateManyWithoutUserNestedInput
    stationMastersUnderMe?: StationMasterDetailsUpdateManyWithoutOwnerNestedInput
    userDetails?: UserDetailsUpdateOneWithoutUserNestedInput
    adminDetails?: AdminDetailsUpdateOneWithoutUserNestedInput
    stationMasterDetails?: StationMasterDetailsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOwnerDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otps?: OTPUncheckedUpdateManyWithoutUserNestedInput
    evs?: EVUncheckedUpdateManyWithoutUserNestedInput
    bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    stations?: StationUncheckedUpdateManyWithoutOwnerNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    chargingHistories?: ChargingHistoryUncheckedUpdateManyWithoutUserNestedInput
    stationMastersUnderMe?: StationMasterDetailsUncheckedUpdateManyWithoutOwnerNestedInput
    userDetails?: UserDetailsUncheckedUpdateOneWithoutUserNestedInput
    adminDetails?: AdminDetailsUncheckedUpdateOneWithoutUserNestedInput
    stationMasterDetails?: StationMasterDetailsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutAdminDetailsInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otps?: OTPCreateNestedManyWithoutUserInput
    evs?: EVCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    stations?: StationCreateNestedManyWithoutOwnerInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    chargingHistories?: ChargingHistoryCreateNestedManyWithoutUserInput
    stationMastersUnderMe?: StationMasterDetailsCreateNestedManyWithoutOwnerInput
    userDetails?: UserDetailsCreateNestedOneWithoutUserInput
    ownerDetails?: OwnerDetailsCreateNestedOneWithoutUserInput
    stationMasterDetails?: StationMasterDetailsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAdminDetailsInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otps?: OTPUncheckedCreateNestedManyWithoutUserInput
    evs?: EVUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    stations?: StationUncheckedCreateNestedManyWithoutOwnerInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    chargingHistories?: ChargingHistoryUncheckedCreateNestedManyWithoutUserInput
    stationMastersUnderMe?: StationMasterDetailsUncheckedCreateNestedManyWithoutOwnerInput
    userDetails?: UserDetailsUncheckedCreateNestedOneWithoutUserInput
    ownerDetails?: OwnerDetailsUncheckedCreateNestedOneWithoutUserInput
    stationMasterDetails?: StationMasterDetailsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAdminDetailsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdminDetailsInput, UserUncheckedCreateWithoutAdminDetailsInput>
  }

  export type UserUpsertWithoutAdminDetailsInput = {
    update: XOR<UserUpdateWithoutAdminDetailsInput, UserUncheckedUpdateWithoutAdminDetailsInput>
    create: XOR<UserCreateWithoutAdminDetailsInput, UserUncheckedCreateWithoutAdminDetailsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAdminDetailsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAdminDetailsInput, UserUncheckedUpdateWithoutAdminDetailsInput>
  }

  export type UserUpdateWithoutAdminDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otps?: OTPUpdateManyWithoutUserNestedInput
    evs?: EVUpdateManyWithoutUserNestedInput
    bookings?: BookingUpdateManyWithoutUserNestedInput
    stations?: StationUpdateManyWithoutOwnerNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    chargingHistories?: ChargingHistoryUpdateManyWithoutUserNestedInput
    stationMastersUnderMe?: StationMasterDetailsUpdateManyWithoutOwnerNestedInput
    userDetails?: UserDetailsUpdateOneWithoutUserNestedInput
    ownerDetails?: OwnerDetailsUpdateOneWithoutUserNestedInput
    stationMasterDetails?: StationMasterDetailsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAdminDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otps?: OTPUncheckedUpdateManyWithoutUserNestedInput
    evs?: EVUncheckedUpdateManyWithoutUserNestedInput
    bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    stations?: StationUncheckedUpdateManyWithoutOwnerNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    chargingHistories?: ChargingHistoryUncheckedUpdateManyWithoutUserNestedInput
    stationMastersUnderMe?: StationMasterDetailsUncheckedUpdateManyWithoutOwnerNestedInput
    userDetails?: UserDetailsUncheckedUpdateOneWithoutUserNestedInput
    ownerDetails?: OwnerDetailsUncheckedUpdateOneWithoutUserNestedInput
    stationMasterDetails?: StationMasterDetailsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutStationMasterDetailsInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otps?: OTPCreateNestedManyWithoutUserInput
    evs?: EVCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    stations?: StationCreateNestedManyWithoutOwnerInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    chargingHistories?: ChargingHistoryCreateNestedManyWithoutUserInput
    stationMastersUnderMe?: StationMasterDetailsCreateNestedManyWithoutOwnerInput
    userDetails?: UserDetailsCreateNestedOneWithoutUserInput
    ownerDetails?: OwnerDetailsCreateNestedOneWithoutUserInput
    adminDetails?: AdminDetailsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStationMasterDetailsInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otps?: OTPUncheckedCreateNestedManyWithoutUserInput
    evs?: EVUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    stations?: StationUncheckedCreateNestedManyWithoutOwnerInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    chargingHistories?: ChargingHistoryUncheckedCreateNestedManyWithoutUserInput
    stationMastersUnderMe?: StationMasterDetailsUncheckedCreateNestedManyWithoutOwnerInput
    userDetails?: UserDetailsUncheckedCreateNestedOneWithoutUserInput
    ownerDetails?: OwnerDetailsUncheckedCreateNestedOneWithoutUserInput
    adminDetails?: AdminDetailsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStationMasterDetailsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStationMasterDetailsInput, UserUncheckedCreateWithoutStationMasterDetailsInput>
  }

  export type StationCreateWithoutStationMastersInput = {
    id?: string
    name: string
    companyName?: string | null
    ownerType: $Enums.OwnerType
    address: string
    latitude: number
    longitude: number
    totalSlots: number
    availableSlots: number
    contact?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutStationsInput
    bookings?: BookingCreateNestedManyWithoutStationInput
    chargingSlots?: ChargingSlotCreateNestedManyWithoutStationInput
    reviews?: ReviewCreateNestedManyWithoutStationInput
    chargingHistories?: ChargingHistoryCreateNestedManyWithoutStationInput
  }

  export type StationUncheckedCreateWithoutStationMastersInput = {
    id?: string
    name: string
    companyName?: string | null
    ownerType: $Enums.OwnerType
    ownerId: string
    address: string
    latitude: number
    longitude: number
    totalSlots: number
    availableSlots: number
    contact?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bookings?: BookingUncheckedCreateNestedManyWithoutStationInput
    chargingSlots?: ChargingSlotUncheckedCreateNestedManyWithoutStationInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutStationInput
    chargingHistories?: ChargingHistoryUncheckedCreateNestedManyWithoutStationInput
  }

  export type StationCreateOrConnectWithoutStationMastersInput = {
    where: StationWhereUniqueInput
    create: XOR<StationCreateWithoutStationMastersInput, StationUncheckedCreateWithoutStationMastersInput>
  }

  export type UserCreateWithoutStationMastersUnderMeInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otps?: OTPCreateNestedManyWithoutUserInput
    evs?: EVCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    stations?: StationCreateNestedManyWithoutOwnerInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    chargingHistories?: ChargingHistoryCreateNestedManyWithoutUserInput
    userDetails?: UserDetailsCreateNestedOneWithoutUserInput
    ownerDetails?: OwnerDetailsCreateNestedOneWithoutUserInput
    adminDetails?: AdminDetailsCreateNestedOneWithoutUserInput
    stationMasterDetails?: StationMasterDetailsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStationMastersUnderMeInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otps?: OTPUncheckedCreateNestedManyWithoutUserInput
    evs?: EVUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    stations?: StationUncheckedCreateNestedManyWithoutOwnerInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    chargingHistories?: ChargingHistoryUncheckedCreateNestedManyWithoutUserInput
    userDetails?: UserDetailsUncheckedCreateNestedOneWithoutUserInput
    ownerDetails?: OwnerDetailsUncheckedCreateNestedOneWithoutUserInput
    adminDetails?: AdminDetailsUncheckedCreateNestedOneWithoutUserInput
    stationMasterDetails?: StationMasterDetailsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStationMastersUnderMeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStationMastersUnderMeInput, UserUncheckedCreateWithoutStationMastersUnderMeInput>
  }

  export type UserUpsertWithoutStationMasterDetailsInput = {
    update: XOR<UserUpdateWithoutStationMasterDetailsInput, UserUncheckedUpdateWithoutStationMasterDetailsInput>
    create: XOR<UserCreateWithoutStationMasterDetailsInput, UserUncheckedCreateWithoutStationMasterDetailsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStationMasterDetailsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStationMasterDetailsInput, UserUncheckedUpdateWithoutStationMasterDetailsInput>
  }

  export type UserUpdateWithoutStationMasterDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otps?: OTPUpdateManyWithoutUserNestedInput
    evs?: EVUpdateManyWithoutUserNestedInput
    bookings?: BookingUpdateManyWithoutUserNestedInput
    stations?: StationUpdateManyWithoutOwnerNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    chargingHistories?: ChargingHistoryUpdateManyWithoutUserNestedInput
    stationMastersUnderMe?: StationMasterDetailsUpdateManyWithoutOwnerNestedInput
    userDetails?: UserDetailsUpdateOneWithoutUserNestedInput
    ownerDetails?: OwnerDetailsUpdateOneWithoutUserNestedInput
    adminDetails?: AdminDetailsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStationMasterDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otps?: OTPUncheckedUpdateManyWithoutUserNestedInput
    evs?: EVUncheckedUpdateManyWithoutUserNestedInput
    bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    stations?: StationUncheckedUpdateManyWithoutOwnerNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    chargingHistories?: ChargingHistoryUncheckedUpdateManyWithoutUserNestedInput
    stationMastersUnderMe?: StationMasterDetailsUncheckedUpdateManyWithoutOwnerNestedInput
    userDetails?: UserDetailsUncheckedUpdateOneWithoutUserNestedInput
    ownerDetails?: OwnerDetailsUncheckedUpdateOneWithoutUserNestedInput
    adminDetails?: AdminDetailsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type StationUpsertWithoutStationMastersInput = {
    update: XOR<StationUpdateWithoutStationMastersInput, StationUncheckedUpdateWithoutStationMastersInput>
    create: XOR<StationCreateWithoutStationMastersInput, StationUncheckedCreateWithoutStationMastersInput>
    where?: StationWhereInput
  }

  export type StationUpdateToOneWithWhereWithoutStationMastersInput = {
    where?: StationWhereInput
    data: XOR<StationUpdateWithoutStationMastersInput, StationUncheckedUpdateWithoutStationMastersInput>
  }

  export type StationUpdateWithoutStationMastersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerType?: EnumOwnerTypeFieldUpdateOperationsInput | $Enums.OwnerType
    address?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    totalSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutStationsNestedInput
    bookings?: BookingUpdateManyWithoutStationNestedInput
    chargingSlots?: ChargingSlotUpdateManyWithoutStationNestedInput
    reviews?: ReviewUpdateManyWithoutStationNestedInput
    chargingHistories?: ChargingHistoryUpdateManyWithoutStationNestedInput
  }

  export type StationUncheckedUpdateWithoutStationMastersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerType?: EnumOwnerTypeFieldUpdateOperationsInput | $Enums.OwnerType
    ownerId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    totalSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUncheckedUpdateManyWithoutStationNestedInput
    chargingSlots?: ChargingSlotUncheckedUpdateManyWithoutStationNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutStationNestedInput
    chargingHistories?: ChargingHistoryUncheckedUpdateManyWithoutStationNestedInput
  }

  export type UserUpsertWithoutStationMastersUnderMeInput = {
    update: XOR<UserUpdateWithoutStationMastersUnderMeInput, UserUncheckedUpdateWithoutStationMastersUnderMeInput>
    create: XOR<UserCreateWithoutStationMastersUnderMeInput, UserUncheckedCreateWithoutStationMastersUnderMeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStationMastersUnderMeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStationMastersUnderMeInput, UserUncheckedUpdateWithoutStationMastersUnderMeInput>
  }

  export type UserUpdateWithoutStationMastersUnderMeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otps?: OTPUpdateManyWithoutUserNestedInput
    evs?: EVUpdateManyWithoutUserNestedInput
    bookings?: BookingUpdateManyWithoutUserNestedInput
    stations?: StationUpdateManyWithoutOwnerNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    chargingHistories?: ChargingHistoryUpdateManyWithoutUserNestedInput
    userDetails?: UserDetailsUpdateOneWithoutUserNestedInput
    ownerDetails?: OwnerDetailsUpdateOneWithoutUserNestedInput
    adminDetails?: AdminDetailsUpdateOneWithoutUserNestedInput
    stationMasterDetails?: StationMasterDetailsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStationMastersUnderMeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otps?: OTPUncheckedUpdateManyWithoutUserNestedInput
    evs?: EVUncheckedUpdateManyWithoutUserNestedInput
    bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    stations?: StationUncheckedUpdateManyWithoutOwnerNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    chargingHistories?: ChargingHistoryUncheckedUpdateManyWithoutUserNestedInput
    userDetails?: UserDetailsUncheckedUpdateOneWithoutUserNestedInput
    ownerDetails?: OwnerDetailsUncheckedUpdateOneWithoutUserNestedInput
    adminDetails?: AdminDetailsUncheckedUpdateOneWithoutUserNestedInput
    stationMasterDetails?: StationMasterDetailsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutEvsInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otps?: OTPCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    stations?: StationCreateNestedManyWithoutOwnerInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    chargingHistories?: ChargingHistoryCreateNestedManyWithoutUserInput
    stationMastersUnderMe?: StationMasterDetailsCreateNestedManyWithoutOwnerInput
    userDetails?: UserDetailsCreateNestedOneWithoutUserInput
    ownerDetails?: OwnerDetailsCreateNestedOneWithoutUserInput
    adminDetails?: AdminDetailsCreateNestedOneWithoutUserInput
    stationMasterDetails?: StationMasterDetailsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEvsInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otps?: OTPUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    stations?: StationUncheckedCreateNestedManyWithoutOwnerInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    chargingHistories?: ChargingHistoryUncheckedCreateNestedManyWithoutUserInput
    stationMastersUnderMe?: StationMasterDetailsUncheckedCreateNestedManyWithoutOwnerInput
    userDetails?: UserDetailsUncheckedCreateNestedOneWithoutUserInput
    ownerDetails?: OwnerDetailsUncheckedCreateNestedOneWithoutUserInput
    adminDetails?: AdminDetailsUncheckedCreateNestedOneWithoutUserInput
    stationMasterDetails?: StationMasterDetailsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEvsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEvsInput, UserUncheckedCreateWithoutEvsInput>
  }

  export type UserUpsertWithoutEvsInput = {
    update: XOR<UserUpdateWithoutEvsInput, UserUncheckedUpdateWithoutEvsInput>
    create: XOR<UserCreateWithoutEvsInput, UserUncheckedCreateWithoutEvsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEvsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEvsInput, UserUncheckedUpdateWithoutEvsInput>
  }

  export type UserUpdateWithoutEvsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otps?: OTPUpdateManyWithoutUserNestedInput
    bookings?: BookingUpdateManyWithoutUserNestedInput
    stations?: StationUpdateManyWithoutOwnerNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    chargingHistories?: ChargingHistoryUpdateManyWithoutUserNestedInput
    stationMastersUnderMe?: StationMasterDetailsUpdateManyWithoutOwnerNestedInput
    userDetails?: UserDetailsUpdateOneWithoutUserNestedInput
    ownerDetails?: OwnerDetailsUpdateOneWithoutUserNestedInput
    adminDetails?: AdminDetailsUpdateOneWithoutUserNestedInput
    stationMasterDetails?: StationMasterDetailsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEvsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otps?: OTPUncheckedUpdateManyWithoutUserNestedInput
    bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    stations?: StationUncheckedUpdateManyWithoutOwnerNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    chargingHistories?: ChargingHistoryUncheckedUpdateManyWithoutUserNestedInput
    stationMastersUnderMe?: StationMasterDetailsUncheckedUpdateManyWithoutOwnerNestedInput
    userDetails?: UserDetailsUncheckedUpdateOneWithoutUserNestedInput
    ownerDetails?: OwnerDetailsUncheckedUpdateOneWithoutUserNestedInput
    adminDetails?: AdminDetailsUncheckedUpdateOneWithoutUserNestedInput
    stationMasterDetails?: StationMasterDetailsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutStationsInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otps?: OTPCreateNestedManyWithoutUserInput
    evs?: EVCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    chargingHistories?: ChargingHistoryCreateNestedManyWithoutUserInput
    stationMastersUnderMe?: StationMasterDetailsCreateNestedManyWithoutOwnerInput
    userDetails?: UserDetailsCreateNestedOneWithoutUserInput
    ownerDetails?: OwnerDetailsCreateNestedOneWithoutUserInput
    adminDetails?: AdminDetailsCreateNestedOneWithoutUserInput
    stationMasterDetails?: StationMasterDetailsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStationsInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otps?: OTPUncheckedCreateNestedManyWithoutUserInput
    evs?: EVUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    chargingHistories?: ChargingHistoryUncheckedCreateNestedManyWithoutUserInput
    stationMastersUnderMe?: StationMasterDetailsUncheckedCreateNestedManyWithoutOwnerInput
    userDetails?: UserDetailsUncheckedCreateNestedOneWithoutUserInput
    ownerDetails?: OwnerDetailsUncheckedCreateNestedOneWithoutUserInput
    adminDetails?: AdminDetailsUncheckedCreateNestedOneWithoutUserInput
    stationMasterDetails?: StationMasterDetailsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStationsInput, UserUncheckedCreateWithoutStationsInput>
  }

  export type StationMasterDetailsCreateWithoutStationInput = {
    id?: string
    shift: string
    experience?: number | null
    certification?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutStationMasterDetailsInput
    owner: UserCreateNestedOneWithoutStationMastersUnderMeInput
  }

  export type StationMasterDetailsUncheckedCreateWithoutStationInput = {
    id?: string
    userId: string
    ownerId: string
    shift: string
    experience?: number | null
    certification?: string | null
    createdAt?: Date | string
  }

  export type StationMasterDetailsCreateOrConnectWithoutStationInput = {
    where: StationMasterDetailsWhereUniqueInput
    create: XOR<StationMasterDetailsCreateWithoutStationInput, StationMasterDetailsUncheckedCreateWithoutStationInput>
  }

  export type StationMasterDetailsCreateManyStationInputEnvelope = {
    data: StationMasterDetailsCreateManyStationInput | StationMasterDetailsCreateManyStationInput[]
    skipDuplicates?: boolean
  }

  export type BookingCreateWithoutStationInput = {
    id?: string
    evId: string
    startTime: Date | string
    endTime: Date | string
    status?: $Enums.BookingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBookingsInput
    transaction?: TransactionCreateNestedOneWithoutBookingInput
    chargingHistory?: ChargingHistoryCreateNestedOneWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutStationInput = {
    id?: string
    userId: string
    evId: string
    startTime: Date | string
    endTime: Date | string
    status?: $Enums.BookingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    transaction?: TransactionUncheckedCreateNestedOneWithoutBookingInput
    chargingHistory?: ChargingHistoryUncheckedCreateNestedOneWithoutBookingInput
  }

  export type BookingCreateOrConnectWithoutStationInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutStationInput, BookingUncheckedCreateWithoutStationInput>
  }

  export type BookingCreateManyStationInputEnvelope = {
    data: BookingCreateManyStationInput | BookingCreateManyStationInput[]
    skipDuplicates?: boolean
  }

  export type ChargingSlotCreateWithoutStationInput = {
    id?: string
    isOccupied?: boolean
    powerLevel: number
    type: $Enums.SlotType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChargingSlotUncheckedCreateWithoutStationInput = {
    id?: string
    isOccupied?: boolean
    powerLevel: number
    type: $Enums.SlotType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChargingSlotCreateOrConnectWithoutStationInput = {
    where: ChargingSlotWhereUniqueInput
    create: XOR<ChargingSlotCreateWithoutStationInput, ChargingSlotUncheckedCreateWithoutStationInput>
  }

  export type ChargingSlotCreateManyStationInputEnvelope = {
    data: ChargingSlotCreateManyStationInput | ChargingSlotCreateManyStationInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutStationInput = {
    id?: string
    rating?: number
    comment?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutStationInput = {
    id?: string
    userId: string
    rating?: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type ReviewCreateOrConnectWithoutStationInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutStationInput, ReviewUncheckedCreateWithoutStationInput>
  }

  export type ReviewCreateManyStationInputEnvelope = {
    data: ReviewCreateManyStationInput | ReviewCreateManyStationInput[]
    skipDuplicates?: boolean
  }

  export type ChargingHistoryCreateWithoutStationInput = {
    id?: string
    evId: string
    energyUsed: number
    cost: number
    duration: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutChargingHistoriesInput
    booking?: BookingCreateNestedOneWithoutChargingHistoryInput
  }

  export type ChargingHistoryUncheckedCreateWithoutStationInput = {
    id?: string
    userId: string
    bookingId?: string | null
    evId: string
    energyUsed: number
    cost: number
    duration: number
    createdAt?: Date | string
  }

  export type ChargingHistoryCreateOrConnectWithoutStationInput = {
    where: ChargingHistoryWhereUniqueInput
    create: XOR<ChargingHistoryCreateWithoutStationInput, ChargingHistoryUncheckedCreateWithoutStationInput>
  }

  export type ChargingHistoryCreateManyStationInputEnvelope = {
    data: ChargingHistoryCreateManyStationInput | ChargingHistoryCreateManyStationInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutStationsInput = {
    update: XOR<UserUpdateWithoutStationsInput, UserUncheckedUpdateWithoutStationsInput>
    create: XOR<UserCreateWithoutStationsInput, UserUncheckedCreateWithoutStationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStationsInput, UserUncheckedUpdateWithoutStationsInput>
  }

  export type UserUpdateWithoutStationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otps?: OTPUpdateManyWithoutUserNestedInput
    evs?: EVUpdateManyWithoutUserNestedInput
    bookings?: BookingUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    chargingHistories?: ChargingHistoryUpdateManyWithoutUserNestedInput
    stationMastersUnderMe?: StationMasterDetailsUpdateManyWithoutOwnerNestedInput
    userDetails?: UserDetailsUpdateOneWithoutUserNestedInput
    ownerDetails?: OwnerDetailsUpdateOneWithoutUserNestedInput
    adminDetails?: AdminDetailsUpdateOneWithoutUserNestedInput
    stationMasterDetails?: StationMasterDetailsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otps?: OTPUncheckedUpdateManyWithoutUserNestedInput
    evs?: EVUncheckedUpdateManyWithoutUserNestedInput
    bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    chargingHistories?: ChargingHistoryUncheckedUpdateManyWithoutUserNestedInput
    stationMastersUnderMe?: StationMasterDetailsUncheckedUpdateManyWithoutOwnerNestedInput
    userDetails?: UserDetailsUncheckedUpdateOneWithoutUserNestedInput
    ownerDetails?: OwnerDetailsUncheckedUpdateOneWithoutUserNestedInput
    adminDetails?: AdminDetailsUncheckedUpdateOneWithoutUserNestedInput
    stationMasterDetails?: StationMasterDetailsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type StationMasterDetailsUpsertWithWhereUniqueWithoutStationInput = {
    where: StationMasterDetailsWhereUniqueInput
    update: XOR<StationMasterDetailsUpdateWithoutStationInput, StationMasterDetailsUncheckedUpdateWithoutStationInput>
    create: XOR<StationMasterDetailsCreateWithoutStationInput, StationMasterDetailsUncheckedCreateWithoutStationInput>
  }

  export type StationMasterDetailsUpdateWithWhereUniqueWithoutStationInput = {
    where: StationMasterDetailsWhereUniqueInput
    data: XOR<StationMasterDetailsUpdateWithoutStationInput, StationMasterDetailsUncheckedUpdateWithoutStationInput>
  }

  export type StationMasterDetailsUpdateManyWithWhereWithoutStationInput = {
    where: StationMasterDetailsScalarWhereInput
    data: XOR<StationMasterDetailsUpdateManyMutationInput, StationMasterDetailsUncheckedUpdateManyWithoutStationInput>
  }

  export type BookingUpsertWithWhereUniqueWithoutStationInput = {
    where: BookingWhereUniqueInput
    update: XOR<BookingUpdateWithoutStationInput, BookingUncheckedUpdateWithoutStationInput>
    create: XOR<BookingCreateWithoutStationInput, BookingUncheckedCreateWithoutStationInput>
  }

  export type BookingUpdateWithWhereUniqueWithoutStationInput = {
    where: BookingWhereUniqueInput
    data: XOR<BookingUpdateWithoutStationInput, BookingUncheckedUpdateWithoutStationInput>
  }

  export type BookingUpdateManyWithWhereWithoutStationInput = {
    where: BookingScalarWhereInput
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyWithoutStationInput>
  }

  export type ChargingSlotUpsertWithWhereUniqueWithoutStationInput = {
    where: ChargingSlotWhereUniqueInput
    update: XOR<ChargingSlotUpdateWithoutStationInput, ChargingSlotUncheckedUpdateWithoutStationInput>
    create: XOR<ChargingSlotCreateWithoutStationInput, ChargingSlotUncheckedCreateWithoutStationInput>
  }

  export type ChargingSlotUpdateWithWhereUniqueWithoutStationInput = {
    where: ChargingSlotWhereUniqueInput
    data: XOR<ChargingSlotUpdateWithoutStationInput, ChargingSlotUncheckedUpdateWithoutStationInput>
  }

  export type ChargingSlotUpdateManyWithWhereWithoutStationInput = {
    where: ChargingSlotScalarWhereInput
    data: XOR<ChargingSlotUpdateManyMutationInput, ChargingSlotUncheckedUpdateManyWithoutStationInput>
  }

  export type ChargingSlotScalarWhereInput = {
    AND?: ChargingSlotScalarWhereInput | ChargingSlotScalarWhereInput[]
    OR?: ChargingSlotScalarWhereInput[]
    NOT?: ChargingSlotScalarWhereInput | ChargingSlotScalarWhereInput[]
    id?: StringFilter<"ChargingSlot"> | string
    stationId?: StringFilter<"ChargingSlot"> | string
    isOccupied?: BoolFilter<"ChargingSlot"> | boolean
    powerLevel?: IntFilter<"ChargingSlot"> | number
    type?: EnumSlotTypeFilter<"ChargingSlot"> | $Enums.SlotType
    createdAt?: DateTimeFilter<"ChargingSlot"> | Date | string
    updatedAt?: DateTimeFilter<"ChargingSlot"> | Date | string
  }

  export type ReviewUpsertWithWhereUniqueWithoutStationInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutStationInput, ReviewUncheckedUpdateWithoutStationInput>
    create: XOR<ReviewCreateWithoutStationInput, ReviewUncheckedCreateWithoutStationInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutStationInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutStationInput, ReviewUncheckedUpdateWithoutStationInput>
  }

  export type ReviewUpdateManyWithWhereWithoutStationInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutStationInput>
  }

  export type ChargingHistoryUpsertWithWhereUniqueWithoutStationInput = {
    where: ChargingHistoryWhereUniqueInput
    update: XOR<ChargingHistoryUpdateWithoutStationInput, ChargingHistoryUncheckedUpdateWithoutStationInput>
    create: XOR<ChargingHistoryCreateWithoutStationInput, ChargingHistoryUncheckedCreateWithoutStationInput>
  }

  export type ChargingHistoryUpdateWithWhereUniqueWithoutStationInput = {
    where: ChargingHistoryWhereUniqueInput
    data: XOR<ChargingHistoryUpdateWithoutStationInput, ChargingHistoryUncheckedUpdateWithoutStationInput>
  }

  export type ChargingHistoryUpdateManyWithWhereWithoutStationInput = {
    where: ChargingHistoryScalarWhereInput
    data: XOR<ChargingHistoryUpdateManyMutationInput, ChargingHistoryUncheckedUpdateManyWithoutStationInput>
  }

  export type UserCreateWithoutBookingsInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otps?: OTPCreateNestedManyWithoutUserInput
    evs?: EVCreateNestedManyWithoutUserInput
    stations?: StationCreateNestedManyWithoutOwnerInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    chargingHistories?: ChargingHistoryCreateNestedManyWithoutUserInput
    stationMastersUnderMe?: StationMasterDetailsCreateNestedManyWithoutOwnerInput
    userDetails?: UserDetailsCreateNestedOneWithoutUserInput
    ownerDetails?: OwnerDetailsCreateNestedOneWithoutUserInput
    adminDetails?: AdminDetailsCreateNestedOneWithoutUserInput
    stationMasterDetails?: StationMasterDetailsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBookingsInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otps?: OTPUncheckedCreateNestedManyWithoutUserInput
    evs?: EVUncheckedCreateNestedManyWithoutUserInput
    stations?: StationUncheckedCreateNestedManyWithoutOwnerInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    chargingHistories?: ChargingHistoryUncheckedCreateNestedManyWithoutUserInput
    stationMastersUnderMe?: StationMasterDetailsUncheckedCreateNestedManyWithoutOwnerInput
    userDetails?: UserDetailsUncheckedCreateNestedOneWithoutUserInput
    ownerDetails?: OwnerDetailsUncheckedCreateNestedOneWithoutUserInput
    adminDetails?: AdminDetailsUncheckedCreateNestedOneWithoutUserInput
    stationMasterDetails?: StationMasterDetailsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBookingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
  }

  export type StationCreateWithoutBookingsInput = {
    id?: string
    name: string
    companyName?: string | null
    ownerType: $Enums.OwnerType
    address: string
    latitude: number
    longitude: number
    totalSlots: number
    availableSlots: number
    contact?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutStationsInput
    stationMasters?: StationMasterDetailsCreateNestedManyWithoutStationInput
    chargingSlots?: ChargingSlotCreateNestedManyWithoutStationInput
    reviews?: ReviewCreateNestedManyWithoutStationInput
    chargingHistories?: ChargingHistoryCreateNestedManyWithoutStationInput
  }

  export type StationUncheckedCreateWithoutBookingsInput = {
    id?: string
    name: string
    companyName?: string | null
    ownerType: $Enums.OwnerType
    ownerId: string
    address: string
    latitude: number
    longitude: number
    totalSlots: number
    availableSlots: number
    contact?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    stationMasters?: StationMasterDetailsUncheckedCreateNestedManyWithoutStationInput
    chargingSlots?: ChargingSlotUncheckedCreateNestedManyWithoutStationInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutStationInput
    chargingHistories?: ChargingHistoryUncheckedCreateNestedManyWithoutStationInput
  }

  export type StationCreateOrConnectWithoutBookingsInput = {
    where: StationWhereUniqueInput
    create: XOR<StationCreateWithoutBookingsInput, StationUncheckedCreateWithoutBookingsInput>
  }

  export type TransactionCreateWithoutBookingInput = {
    id?: string
    amount: number
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutBookingInput = {
    id?: string
    userId: string
    amount: number
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutBookingInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutBookingInput, TransactionUncheckedCreateWithoutBookingInput>
  }

  export type ChargingHistoryCreateWithoutBookingInput = {
    id?: string
    evId: string
    energyUsed: number
    cost: number
    duration: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutChargingHistoriesInput
    station: StationCreateNestedOneWithoutChargingHistoriesInput
  }

  export type ChargingHistoryUncheckedCreateWithoutBookingInput = {
    id?: string
    userId: string
    stationId: string
    evId: string
    energyUsed: number
    cost: number
    duration: number
    createdAt?: Date | string
  }

  export type ChargingHistoryCreateOrConnectWithoutBookingInput = {
    where: ChargingHistoryWhereUniqueInput
    create: XOR<ChargingHistoryCreateWithoutBookingInput, ChargingHistoryUncheckedCreateWithoutBookingInput>
  }

  export type UserUpsertWithoutBookingsInput = {
    update: XOR<UserUpdateWithoutBookingsInput, UserUncheckedUpdateWithoutBookingsInput>
    create: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBookingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBookingsInput, UserUncheckedUpdateWithoutBookingsInput>
  }

  export type UserUpdateWithoutBookingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otps?: OTPUpdateManyWithoutUserNestedInput
    evs?: EVUpdateManyWithoutUserNestedInput
    stations?: StationUpdateManyWithoutOwnerNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    chargingHistories?: ChargingHistoryUpdateManyWithoutUserNestedInput
    stationMastersUnderMe?: StationMasterDetailsUpdateManyWithoutOwnerNestedInput
    userDetails?: UserDetailsUpdateOneWithoutUserNestedInput
    ownerDetails?: OwnerDetailsUpdateOneWithoutUserNestedInput
    adminDetails?: AdminDetailsUpdateOneWithoutUserNestedInput
    stationMasterDetails?: StationMasterDetailsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBookingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otps?: OTPUncheckedUpdateManyWithoutUserNestedInput
    evs?: EVUncheckedUpdateManyWithoutUserNestedInput
    stations?: StationUncheckedUpdateManyWithoutOwnerNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    chargingHistories?: ChargingHistoryUncheckedUpdateManyWithoutUserNestedInput
    stationMastersUnderMe?: StationMasterDetailsUncheckedUpdateManyWithoutOwnerNestedInput
    userDetails?: UserDetailsUncheckedUpdateOneWithoutUserNestedInput
    ownerDetails?: OwnerDetailsUncheckedUpdateOneWithoutUserNestedInput
    adminDetails?: AdminDetailsUncheckedUpdateOneWithoutUserNestedInput
    stationMasterDetails?: StationMasterDetailsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type StationUpsertWithoutBookingsInput = {
    update: XOR<StationUpdateWithoutBookingsInput, StationUncheckedUpdateWithoutBookingsInput>
    create: XOR<StationCreateWithoutBookingsInput, StationUncheckedCreateWithoutBookingsInput>
    where?: StationWhereInput
  }

  export type StationUpdateToOneWithWhereWithoutBookingsInput = {
    where?: StationWhereInput
    data: XOR<StationUpdateWithoutBookingsInput, StationUncheckedUpdateWithoutBookingsInput>
  }

  export type StationUpdateWithoutBookingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerType?: EnumOwnerTypeFieldUpdateOperationsInput | $Enums.OwnerType
    address?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    totalSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutStationsNestedInput
    stationMasters?: StationMasterDetailsUpdateManyWithoutStationNestedInput
    chargingSlots?: ChargingSlotUpdateManyWithoutStationNestedInput
    reviews?: ReviewUpdateManyWithoutStationNestedInput
    chargingHistories?: ChargingHistoryUpdateManyWithoutStationNestedInput
  }

  export type StationUncheckedUpdateWithoutBookingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerType?: EnumOwnerTypeFieldUpdateOperationsInput | $Enums.OwnerType
    ownerId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    totalSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stationMasters?: StationMasterDetailsUncheckedUpdateManyWithoutStationNestedInput
    chargingSlots?: ChargingSlotUncheckedUpdateManyWithoutStationNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutStationNestedInput
    chargingHistories?: ChargingHistoryUncheckedUpdateManyWithoutStationNestedInput
  }

  export type TransactionUpsertWithoutBookingInput = {
    update: XOR<TransactionUpdateWithoutBookingInput, TransactionUncheckedUpdateWithoutBookingInput>
    create: XOR<TransactionCreateWithoutBookingInput, TransactionUncheckedCreateWithoutBookingInput>
    where?: TransactionWhereInput
  }

  export type TransactionUpdateToOneWithWhereWithoutBookingInput = {
    where?: TransactionWhereInput
    data: XOR<TransactionUpdateWithoutBookingInput, TransactionUncheckedUpdateWithoutBookingInput>
  }

  export type TransactionUpdateWithoutBookingInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutBookingInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChargingHistoryUpsertWithoutBookingInput = {
    update: XOR<ChargingHistoryUpdateWithoutBookingInput, ChargingHistoryUncheckedUpdateWithoutBookingInput>
    create: XOR<ChargingHistoryCreateWithoutBookingInput, ChargingHistoryUncheckedCreateWithoutBookingInput>
    where?: ChargingHistoryWhereInput
  }

  export type ChargingHistoryUpdateToOneWithWhereWithoutBookingInput = {
    where?: ChargingHistoryWhereInput
    data: XOR<ChargingHistoryUpdateWithoutBookingInput, ChargingHistoryUncheckedUpdateWithoutBookingInput>
  }

  export type ChargingHistoryUpdateWithoutBookingInput = {
    id?: StringFieldUpdateOperationsInput | string
    evId?: StringFieldUpdateOperationsInput | string
    energyUsed?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutChargingHistoriesNestedInput
    station?: StationUpdateOneRequiredWithoutChargingHistoriesNestedInput
  }

  export type ChargingHistoryUncheckedUpdateWithoutBookingInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    stationId?: StringFieldUpdateOperationsInput | string
    evId?: StringFieldUpdateOperationsInput | string
    energyUsed?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutTransactionsInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otps?: OTPCreateNestedManyWithoutUserInput
    evs?: EVCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    stations?: StationCreateNestedManyWithoutOwnerInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    chargingHistories?: ChargingHistoryCreateNestedManyWithoutUserInput
    stationMastersUnderMe?: StationMasterDetailsCreateNestedManyWithoutOwnerInput
    userDetails?: UserDetailsCreateNestedOneWithoutUserInput
    ownerDetails?: OwnerDetailsCreateNestedOneWithoutUserInput
    adminDetails?: AdminDetailsCreateNestedOneWithoutUserInput
    stationMasterDetails?: StationMasterDetailsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTransactionsInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otps?: OTPUncheckedCreateNestedManyWithoutUserInput
    evs?: EVUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    stations?: StationUncheckedCreateNestedManyWithoutOwnerInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    chargingHistories?: ChargingHistoryUncheckedCreateNestedManyWithoutUserInput
    stationMastersUnderMe?: StationMasterDetailsUncheckedCreateNestedManyWithoutOwnerInput
    userDetails?: UserDetailsUncheckedCreateNestedOneWithoutUserInput
    ownerDetails?: OwnerDetailsUncheckedCreateNestedOneWithoutUserInput
    adminDetails?: AdminDetailsUncheckedCreateNestedOneWithoutUserInput
    stationMasterDetails?: StationMasterDetailsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTransactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
  }

  export type BookingCreateWithoutTransactionInput = {
    id?: string
    evId: string
    startTime: Date | string
    endTime: Date | string
    status?: $Enums.BookingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBookingsInput
    station: StationCreateNestedOneWithoutBookingsInput
    chargingHistory?: ChargingHistoryCreateNestedOneWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutTransactionInput = {
    id?: string
    userId: string
    stationId: string
    evId: string
    startTime: Date | string
    endTime: Date | string
    status?: $Enums.BookingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    chargingHistory?: ChargingHistoryUncheckedCreateNestedOneWithoutBookingInput
  }

  export type BookingCreateOrConnectWithoutTransactionInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutTransactionInput, BookingUncheckedCreateWithoutTransactionInput>
  }

  export type UserUpsertWithoutTransactionsInput = {
    update: XOR<UserUpdateWithoutTransactionsInput, UserUncheckedUpdateWithoutTransactionsInput>
    create: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTransactionsInput, UserUncheckedUpdateWithoutTransactionsInput>
  }

  export type UserUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otps?: OTPUpdateManyWithoutUserNestedInput
    evs?: EVUpdateManyWithoutUserNestedInput
    bookings?: BookingUpdateManyWithoutUserNestedInput
    stations?: StationUpdateManyWithoutOwnerNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    chargingHistories?: ChargingHistoryUpdateManyWithoutUserNestedInput
    stationMastersUnderMe?: StationMasterDetailsUpdateManyWithoutOwnerNestedInput
    userDetails?: UserDetailsUpdateOneWithoutUserNestedInput
    ownerDetails?: OwnerDetailsUpdateOneWithoutUserNestedInput
    adminDetails?: AdminDetailsUpdateOneWithoutUserNestedInput
    stationMasterDetails?: StationMasterDetailsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otps?: OTPUncheckedUpdateManyWithoutUserNestedInput
    evs?: EVUncheckedUpdateManyWithoutUserNestedInput
    bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    stations?: StationUncheckedUpdateManyWithoutOwnerNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    chargingHistories?: ChargingHistoryUncheckedUpdateManyWithoutUserNestedInput
    stationMastersUnderMe?: StationMasterDetailsUncheckedUpdateManyWithoutOwnerNestedInput
    userDetails?: UserDetailsUncheckedUpdateOneWithoutUserNestedInput
    ownerDetails?: OwnerDetailsUncheckedUpdateOneWithoutUserNestedInput
    adminDetails?: AdminDetailsUncheckedUpdateOneWithoutUserNestedInput
    stationMasterDetails?: StationMasterDetailsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type BookingUpsertWithoutTransactionInput = {
    update: XOR<BookingUpdateWithoutTransactionInput, BookingUncheckedUpdateWithoutTransactionInput>
    create: XOR<BookingCreateWithoutTransactionInput, BookingUncheckedCreateWithoutTransactionInput>
    where?: BookingWhereInput
  }

  export type BookingUpdateToOneWithWhereWithoutTransactionInput = {
    where?: BookingWhereInput
    data: XOR<BookingUpdateWithoutTransactionInput, BookingUncheckedUpdateWithoutTransactionInput>
  }

  export type BookingUpdateWithoutTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    evId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBookingsNestedInput
    station?: StationUpdateOneRequiredWithoutBookingsNestedInput
    chargingHistory?: ChargingHistoryUpdateOneWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateWithoutTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    stationId?: StringFieldUpdateOperationsInput | string
    evId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chargingHistory?: ChargingHistoryUncheckedUpdateOneWithoutBookingNestedInput
  }

  export type StationCreateWithoutChargingSlotsInput = {
    id?: string
    name: string
    companyName?: string | null
    ownerType: $Enums.OwnerType
    address: string
    latitude: number
    longitude: number
    totalSlots: number
    availableSlots: number
    contact?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutStationsInput
    stationMasters?: StationMasterDetailsCreateNestedManyWithoutStationInput
    bookings?: BookingCreateNestedManyWithoutStationInput
    reviews?: ReviewCreateNestedManyWithoutStationInput
    chargingHistories?: ChargingHistoryCreateNestedManyWithoutStationInput
  }

  export type StationUncheckedCreateWithoutChargingSlotsInput = {
    id?: string
    name: string
    companyName?: string | null
    ownerType: $Enums.OwnerType
    ownerId: string
    address: string
    latitude: number
    longitude: number
    totalSlots: number
    availableSlots: number
    contact?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    stationMasters?: StationMasterDetailsUncheckedCreateNestedManyWithoutStationInput
    bookings?: BookingUncheckedCreateNestedManyWithoutStationInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutStationInput
    chargingHistories?: ChargingHistoryUncheckedCreateNestedManyWithoutStationInput
  }

  export type StationCreateOrConnectWithoutChargingSlotsInput = {
    where: StationWhereUniqueInput
    create: XOR<StationCreateWithoutChargingSlotsInput, StationUncheckedCreateWithoutChargingSlotsInput>
  }

  export type StationUpsertWithoutChargingSlotsInput = {
    update: XOR<StationUpdateWithoutChargingSlotsInput, StationUncheckedUpdateWithoutChargingSlotsInput>
    create: XOR<StationCreateWithoutChargingSlotsInput, StationUncheckedCreateWithoutChargingSlotsInput>
    where?: StationWhereInput
  }

  export type StationUpdateToOneWithWhereWithoutChargingSlotsInput = {
    where?: StationWhereInput
    data: XOR<StationUpdateWithoutChargingSlotsInput, StationUncheckedUpdateWithoutChargingSlotsInput>
  }

  export type StationUpdateWithoutChargingSlotsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerType?: EnumOwnerTypeFieldUpdateOperationsInput | $Enums.OwnerType
    address?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    totalSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutStationsNestedInput
    stationMasters?: StationMasterDetailsUpdateManyWithoutStationNestedInput
    bookings?: BookingUpdateManyWithoutStationNestedInput
    reviews?: ReviewUpdateManyWithoutStationNestedInput
    chargingHistories?: ChargingHistoryUpdateManyWithoutStationNestedInput
  }

  export type StationUncheckedUpdateWithoutChargingSlotsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerType?: EnumOwnerTypeFieldUpdateOperationsInput | $Enums.OwnerType
    ownerId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    totalSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stationMasters?: StationMasterDetailsUncheckedUpdateManyWithoutStationNestedInput
    bookings?: BookingUncheckedUpdateManyWithoutStationNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutStationNestedInput
    chargingHistories?: ChargingHistoryUncheckedUpdateManyWithoutStationNestedInput
  }

  export type UserCreateWithoutReviewsInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otps?: OTPCreateNestedManyWithoutUserInput
    evs?: EVCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    stations?: StationCreateNestedManyWithoutOwnerInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    chargingHistories?: ChargingHistoryCreateNestedManyWithoutUserInput
    stationMastersUnderMe?: StationMasterDetailsCreateNestedManyWithoutOwnerInput
    userDetails?: UserDetailsCreateNestedOneWithoutUserInput
    ownerDetails?: OwnerDetailsCreateNestedOneWithoutUserInput
    adminDetails?: AdminDetailsCreateNestedOneWithoutUserInput
    stationMasterDetails?: StationMasterDetailsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReviewsInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otps?: OTPUncheckedCreateNestedManyWithoutUserInput
    evs?: EVUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    stations?: StationUncheckedCreateNestedManyWithoutOwnerInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    chargingHistories?: ChargingHistoryUncheckedCreateNestedManyWithoutUserInput
    stationMastersUnderMe?: StationMasterDetailsUncheckedCreateNestedManyWithoutOwnerInput
    userDetails?: UserDetailsUncheckedCreateNestedOneWithoutUserInput
    ownerDetails?: OwnerDetailsUncheckedCreateNestedOneWithoutUserInput
    adminDetails?: AdminDetailsUncheckedCreateNestedOneWithoutUserInput
    stationMasterDetails?: StationMasterDetailsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
  }

  export type StationCreateWithoutReviewsInput = {
    id?: string
    name: string
    companyName?: string | null
    ownerType: $Enums.OwnerType
    address: string
    latitude: number
    longitude: number
    totalSlots: number
    availableSlots: number
    contact?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutStationsInput
    stationMasters?: StationMasterDetailsCreateNestedManyWithoutStationInput
    bookings?: BookingCreateNestedManyWithoutStationInput
    chargingSlots?: ChargingSlotCreateNestedManyWithoutStationInput
    chargingHistories?: ChargingHistoryCreateNestedManyWithoutStationInput
  }

  export type StationUncheckedCreateWithoutReviewsInput = {
    id?: string
    name: string
    companyName?: string | null
    ownerType: $Enums.OwnerType
    ownerId: string
    address: string
    latitude: number
    longitude: number
    totalSlots: number
    availableSlots: number
    contact?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    stationMasters?: StationMasterDetailsUncheckedCreateNestedManyWithoutStationInput
    bookings?: BookingUncheckedCreateNestedManyWithoutStationInput
    chargingSlots?: ChargingSlotUncheckedCreateNestedManyWithoutStationInput
    chargingHistories?: ChargingHistoryUncheckedCreateNestedManyWithoutStationInput
  }

  export type StationCreateOrConnectWithoutReviewsInput = {
    where: StationWhereUniqueInput
    create: XOR<StationCreateWithoutReviewsInput, StationUncheckedCreateWithoutReviewsInput>
  }

  export type UserUpsertWithoutReviewsInput = {
    update: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReviewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otps?: OTPUpdateManyWithoutUserNestedInput
    evs?: EVUpdateManyWithoutUserNestedInput
    bookings?: BookingUpdateManyWithoutUserNestedInput
    stations?: StationUpdateManyWithoutOwnerNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    chargingHistories?: ChargingHistoryUpdateManyWithoutUserNestedInput
    stationMastersUnderMe?: StationMasterDetailsUpdateManyWithoutOwnerNestedInput
    userDetails?: UserDetailsUpdateOneWithoutUserNestedInput
    ownerDetails?: OwnerDetailsUpdateOneWithoutUserNestedInput
    adminDetails?: AdminDetailsUpdateOneWithoutUserNestedInput
    stationMasterDetails?: StationMasterDetailsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otps?: OTPUncheckedUpdateManyWithoutUserNestedInput
    evs?: EVUncheckedUpdateManyWithoutUserNestedInput
    bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    stations?: StationUncheckedUpdateManyWithoutOwnerNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    chargingHistories?: ChargingHistoryUncheckedUpdateManyWithoutUserNestedInput
    stationMastersUnderMe?: StationMasterDetailsUncheckedUpdateManyWithoutOwnerNestedInput
    userDetails?: UserDetailsUncheckedUpdateOneWithoutUserNestedInput
    ownerDetails?: OwnerDetailsUncheckedUpdateOneWithoutUserNestedInput
    adminDetails?: AdminDetailsUncheckedUpdateOneWithoutUserNestedInput
    stationMasterDetails?: StationMasterDetailsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type StationUpsertWithoutReviewsInput = {
    update: XOR<StationUpdateWithoutReviewsInput, StationUncheckedUpdateWithoutReviewsInput>
    create: XOR<StationCreateWithoutReviewsInput, StationUncheckedCreateWithoutReviewsInput>
    where?: StationWhereInput
  }

  export type StationUpdateToOneWithWhereWithoutReviewsInput = {
    where?: StationWhereInput
    data: XOR<StationUpdateWithoutReviewsInput, StationUncheckedUpdateWithoutReviewsInput>
  }

  export type StationUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerType?: EnumOwnerTypeFieldUpdateOperationsInput | $Enums.OwnerType
    address?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    totalSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutStationsNestedInput
    stationMasters?: StationMasterDetailsUpdateManyWithoutStationNestedInput
    bookings?: BookingUpdateManyWithoutStationNestedInput
    chargingSlots?: ChargingSlotUpdateManyWithoutStationNestedInput
    chargingHistories?: ChargingHistoryUpdateManyWithoutStationNestedInput
  }

  export type StationUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerType?: EnumOwnerTypeFieldUpdateOperationsInput | $Enums.OwnerType
    ownerId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    totalSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stationMasters?: StationMasterDetailsUncheckedUpdateManyWithoutStationNestedInput
    bookings?: BookingUncheckedUpdateManyWithoutStationNestedInput
    chargingSlots?: ChargingSlotUncheckedUpdateManyWithoutStationNestedInput
    chargingHistories?: ChargingHistoryUncheckedUpdateManyWithoutStationNestedInput
  }

  export type UserCreateWithoutChargingHistoriesInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otps?: OTPCreateNestedManyWithoutUserInput
    evs?: EVCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    stations?: StationCreateNestedManyWithoutOwnerInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    stationMastersUnderMe?: StationMasterDetailsCreateNestedManyWithoutOwnerInput
    userDetails?: UserDetailsCreateNestedOneWithoutUserInput
    ownerDetails?: OwnerDetailsCreateNestedOneWithoutUserInput
    adminDetails?: AdminDetailsCreateNestedOneWithoutUserInput
    stationMasterDetails?: StationMasterDetailsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutChargingHistoriesInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otps?: OTPUncheckedCreateNestedManyWithoutUserInput
    evs?: EVUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    stations?: StationUncheckedCreateNestedManyWithoutOwnerInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    stationMastersUnderMe?: StationMasterDetailsUncheckedCreateNestedManyWithoutOwnerInput
    userDetails?: UserDetailsUncheckedCreateNestedOneWithoutUserInput
    ownerDetails?: OwnerDetailsUncheckedCreateNestedOneWithoutUserInput
    adminDetails?: AdminDetailsUncheckedCreateNestedOneWithoutUserInput
    stationMasterDetails?: StationMasterDetailsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutChargingHistoriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChargingHistoriesInput, UserUncheckedCreateWithoutChargingHistoriesInput>
  }

  export type StationCreateWithoutChargingHistoriesInput = {
    id?: string
    name: string
    companyName?: string | null
    ownerType: $Enums.OwnerType
    address: string
    latitude: number
    longitude: number
    totalSlots: number
    availableSlots: number
    contact?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutStationsInput
    stationMasters?: StationMasterDetailsCreateNestedManyWithoutStationInput
    bookings?: BookingCreateNestedManyWithoutStationInput
    chargingSlots?: ChargingSlotCreateNestedManyWithoutStationInput
    reviews?: ReviewCreateNestedManyWithoutStationInput
  }

  export type StationUncheckedCreateWithoutChargingHistoriesInput = {
    id?: string
    name: string
    companyName?: string | null
    ownerType: $Enums.OwnerType
    ownerId: string
    address: string
    latitude: number
    longitude: number
    totalSlots: number
    availableSlots: number
    contact?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    stationMasters?: StationMasterDetailsUncheckedCreateNestedManyWithoutStationInput
    bookings?: BookingUncheckedCreateNestedManyWithoutStationInput
    chargingSlots?: ChargingSlotUncheckedCreateNestedManyWithoutStationInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutStationInput
  }

  export type StationCreateOrConnectWithoutChargingHistoriesInput = {
    where: StationWhereUniqueInput
    create: XOR<StationCreateWithoutChargingHistoriesInput, StationUncheckedCreateWithoutChargingHistoriesInput>
  }

  export type BookingCreateWithoutChargingHistoryInput = {
    id?: string
    evId: string
    startTime: Date | string
    endTime: Date | string
    status?: $Enums.BookingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBookingsInput
    station: StationCreateNestedOneWithoutBookingsInput
    transaction?: TransactionCreateNestedOneWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutChargingHistoryInput = {
    id?: string
    userId: string
    stationId: string
    evId: string
    startTime: Date | string
    endTime: Date | string
    status?: $Enums.BookingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    transaction?: TransactionUncheckedCreateNestedOneWithoutBookingInput
  }

  export type BookingCreateOrConnectWithoutChargingHistoryInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutChargingHistoryInput, BookingUncheckedCreateWithoutChargingHistoryInput>
  }

  export type UserUpsertWithoutChargingHistoriesInput = {
    update: XOR<UserUpdateWithoutChargingHistoriesInput, UserUncheckedUpdateWithoutChargingHistoriesInput>
    create: XOR<UserCreateWithoutChargingHistoriesInput, UserUncheckedCreateWithoutChargingHistoriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChargingHistoriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChargingHistoriesInput, UserUncheckedUpdateWithoutChargingHistoriesInput>
  }

  export type UserUpdateWithoutChargingHistoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otps?: OTPUpdateManyWithoutUserNestedInput
    evs?: EVUpdateManyWithoutUserNestedInput
    bookings?: BookingUpdateManyWithoutUserNestedInput
    stations?: StationUpdateManyWithoutOwnerNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    stationMastersUnderMe?: StationMasterDetailsUpdateManyWithoutOwnerNestedInput
    userDetails?: UserDetailsUpdateOneWithoutUserNestedInput
    ownerDetails?: OwnerDetailsUpdateOneWithoutUserNestedInput
    adminDetails?: AdminDetailsUpdateOneWithoutUserNestedInput
    stationMasterDetails?: StationMasterDetailsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutChargingHistoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otps?: OTPUncheckedUpdateManyWithoutUserNestedInput
    evs?: EVUncheckedUpdateManyWithoutUserNestedInput
    bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    stations?: StationUncheckedUpdateManyWithoutOwnerNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    stationMastersUnderMe?: StationMasterDetailsUncheckedUpdateManyWithoutOwnerNestedInput
    userDetails?: UserDetailsUncheckedUpdateOneWithoutUserNestedInput
    ownerDetails?: OwnerDetailsUncheckedUpdateOneWithoutUserNestedInput
    adminDetails?: AdminDetailsUncheckedUpdateOneWithoutUserNestedInput
    stationMasterDetails?: StationMasterDetailsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type StationUpsertWithoutChargingHistoriesInput = {
    update: XOR<StationUpdateWithoutChargingHistoriesInput, StationUncheckedUpdateWithoutChargingHistoriesInput>
    create: XOR<StationCreateWithoutChargingHistoriesInput, StationUncheckedCreateWithoutChargingHistoriesInput>
    where?: StationWhereInput
  }

  export type StationUpdateToOneWithWhereWithoutChargingHistoriesInput = {
    where?: StationWhereInput
    data: XOR<StationUpdateWithoutChargingHistoriesInput, StationUncheckedUpdateWithoutChargingHistoriesInput>
  }

  export type StationUpdateWithoutChargingHistoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerType?: EnumOwnerTypeFieldUpdateOperationsInput | $Enums.OwnerType
    address?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    totalSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutStationsNestedInput
    stationMasters?: StationMasterDetailsUpdateManyWithoutStationNestedInput
    bookings?: BookingUpdateManyWithoutStationNestedInput
    chargingSlots?: ChargingSlotUpdateManyWithoutStationNestedInput
    reviews?: ReviewUpdateManyWithoutStationNestedInput
  }

  export type StationUncheckedUpdateWithoutChargingHistoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerType?: EnumOwnerTypeFieldUpdateOperationsInput | $Enums.OwnerType
    ownerId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    totalSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stationMasters?: StationMasterDetailsUncheckedUpdateManyWithoutStationNestedInput
    bookings?: BookingUncheckedUpdateManyWithoutStationNestedInput
    chargingSlots?: ChargingSlotUncheckedUpdateManyWithoutStationNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutStationNestedInput
  }

  export type BookingUpsertWithoutChargingHistoryInput = {
    update: XOR<BookingUpdateWithoutChargingHistoryInput, BookingUncheckedUpdateWithoutChargingHistoryInput>
    create: XOR<BookingCreateWithoutChargingHistoryInput, BookingUncheckedCreateWithoutChargingHistoryInput>
    where?: BookingWhereInput
  }

  export type BookingUpdateToOneWithWhereWithoutChargingHistoryInput = {
    where?: BookingWhereInput
    data: XOR<BookingUpdateWithoutChargingHistoryInput, BookingUncheckedUpdateWithoutChargingHistoryInput>
  }

  export type BookingUpdateWithoutChargingHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    evId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBookingsNestedInput
    station?: StationUpdateOneRequiredWithoutBookingsNestedInput
    transaction?: TransactionUpdateOneWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateWithoutChargingHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    stationId?: StringFieldUpdateOperationsInput | string
    evId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transaction?: TransactionUncheckedUpdateOneWithoutBookingNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otps?: OTPCreateNestedManyWithoutUserInput
    evs?: EVCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    stations?: StationCreateNestedManyWithoutOwnerInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    chargingHistories?: ChargingHistoryCreateNestedManyWithoutUserInput
    stationMastersUnderMe?: StationMasterDetailsCreateNestedManyWithoutOwnerInput
    userDetails?: UserDetailsCreateNestedOneWithoutUserInput
    ownerDetails?: OwnerDetailsCreateNestedOneWithoutUserInput
    adminDetails?: AdminDetailsCreateNestedOneWithoutUserInput
    stationMasterDetails?: StationMasterDetailsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otps?: OTPUncheckedCreateNestedManyWithoutUserInput
    evs?: EVUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    stations?: StationUncheckedCreateNestedManyWithoutOwnerInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    chargingHistories?: ChargingHistoryUncheckedCreateNestedManyWithoutUserInput
    stationMastersUnderMe?: StationMasterDetailsUncheckedCreateNestedManyWithoutOwnerInput
    userDetails?: UserDetailsUncheckedCreateNestedOneWithoutUserInput
    ownerDetails?: OwnerDetailsUncheckedCreateNestedOneWithoutUserInput
    adminDetails?: AdminDetailsUncheckedCreateNestedOneWithoutUserInput
    stationMasterDetails?: StationMasterDetailsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otps?: OTPUpdateManyWithoutUserNestedInput
    evs?: EVUpdateManyWithoutUserNestedInput
    bookings?: BookingUpdateManyWithoutUserNestedInput
    stations?: StationUpdateManyWithoutOwnerNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    chargingHistories?: ChargingHistoryUpdateManyWithoutUserNestedInput
    stationMastersUnderMe?: StationMasterDetailsUpdateManyWithoutOwnerNestedInput
    userDetails?: UserDetailsUpdateOneWithoutUserNestedInput
    ownerDetails?: OwnerDetailsUpdateOneWithoutUserNestedInput
    adminDetails?: AdminDetailsUpdateOneWithoutUserNestedInput
    stationMasterDetails?: StationMasterDetailsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otps?: OTPUncheckedUpdateManyWithoutUserNestedInput
    evs?: EVUncheckedUpdateManyWithoutUserNestedInput
    bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    stations?: StationUncheckedUpdateManyWithoutOwnerNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    chargingHistories?: ChargingHistoryUncheckedUpdateManyWithoutUserNestedInput
    stationMastersUnderMe?: StationMasterDetailsUncheckedUpdateManyWithoutOwnerNestedInput
    userDetails?: UserDetailsUncheckedUpdateOneWithoutUserNestedInput
    ownerDetails?: OwnerDetailsUncheckedUpdateOneWithoutUserNestedInput
    adminDetails?: AdminDetailsUncheckedUpdateOneWithoutUserNestedInput
    stationMasterDetails?: StationMasterDetailsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutOtpsInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    evs?: EVCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    stations?: StationCreateNestedManyWithoutOwnerInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    chargingHistories?: ChargingHistoryCreateNestedManyWithoutUserInput
    stationMastersUnderMe?: StationMasterDetailsCreateNestedManyWithoutOwnerInput
    userDetails?: UserDetailsCreateNestedOneWithoutUserInput
    ownerDetails?: OwnerDetailsCreateNestedOneWithoutUserInput
    adminDetails?: AdminDetailsCreateNestedOneWithoutUserInput
    stationMasterDetails?: StationMasterDetailsCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOtpsInput = {
    id?: string
    name: string
    email: string
    password: string
    accountType: $Enums.AccountType
    image?: string | null
    gender?: string | null
    dateOfBirth?: Date | string | null
    about?: string | null
    contactNumber?: string | null
    token?: string | null
    tokenExpires?: Date | string | null
    resetPasswordExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    evs?: EVUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    stations?: StationUncheckedCreateNestedManyWithoutOwnerInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    chargingHistories?: ChargingHistoryUncheckedCreateNestedManyWithoutUserInput
    stationMastersUnderMe?: StationMasterDetailsUncheckedCreateNestedManyWithoutOwnerInput
    userDetails?: UserDetailsUncheckedCreateNestedOneWithoutUserInput
    ownerDetails?: OwnerDetailsUncheckedCreateNestedOneWithoutUserInput
    adminDetails?: AdminDetailsUncheckedCreateNestedOneWithoutUserInput
    stationMasterDetails?: StationMasterDetailsUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOtpsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOtpsInput, UserUncheckedCreateWithoutOtpsInput>
  }

  export type UserUpsertWithoutOtpsInput = {
    update: XOR<UserUpdateWithoutOtpsInput, UserUncheckedUpdateWithoutOtpsInput>
    create: XOR<UserCreateWithoutOtpsInput, UserUncheckedCreateWithoutOtpsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOtpsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOtpsInput, UserUncheckedUpdateWithoutOtpsInput>
  }

  export type UserUpdateWithoutOtpsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    evs?: EVUpdateManyWithoutUserNestedInput
    bookings?: BookingUpdateManyWithoutUserNestedInput
    stations?: StationUpdateManyWithoutOwnerNestedInput
    transactions?: TransactionUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    chargingHistories?: ChargingHistoryUpdateManyWithoutUserNestedInput
    stationMastersUnderMe?: StationMasterDetailsUpdateManyWithoutOwnerNestedInput
    userDetails?: UserDetailsUpdateOneWithoutUserNestedInput
    ownerDetails?: OwnerDetailsUpdateOneWithoutUserNestedInput
    adminDetails?: AdminDetailsUpdateOneWithoutUserNestedInput
    stationMasterDetails?: StationMasterDetailsUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOtpsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountType?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    image?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    about?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    evs?: EVUncheckedUpdateManyWithoutUserNestedInput
    bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    stations?: StationUncheckedUpdateManyWithoutOwnerNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    chargingHistories?: ChargingHistoryUncheckedUpdateManyWithoutUserNestedInput
    stationMastersUnderMe?: StationMasterDetailsUncheckedUpdateManyWithoutOwnerNestedInput
    userDetails?: UserDetailsUncheckedUpdateOneWithoutUserNestedInput
    ownerDetails?: OwnerDetailsUncheckedUpdateOneWithoutUserNestedInput
    adminDetails?: AdminDetailsUncheckedUpdateOneWithoutUserNestedInput
    stationMasterDetails?: StationMasterDetailsUncheckedUpdateOneWithoutUserNestedInput
  }

  export type OTPCreateManyUserInput = {
    id?: string
    otp: string
    createdAt?: Date | string
    expiresAt: Date | string
    isUsed?: boolean
  }

  export type EVCreateManyUserInput = {
    id?: string
    brand: string
    model: string
    licensePlate: string
    batteryCapacity: number
    batteryPercentage: number
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingCreateManyUserInput = {
    id?: string
    stationId: string
    evId: string
    startTime: Date | string
    endTime: Date | string
    status?: $Enums.BookingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StationCreateManyOwnerInput = {
    id?: string
    name: string
    companyName?: string | null
    ownerType: $Enums.OwnerType
    address: string
    latitude: number
    longitude: number
    totalSlots: number
    availableSlots: number
    contact?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateManyUserInput = {
    id?: string
    amount: number
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    bookingId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReviewCreateManyUserInput = {
    id?: string
    stationId: string
    rating?: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    message: string
    type: $Enums.NotificationType
    isRead?: boolean
    createdAt?: Date | string
  }

  export type ChargingHistoryCreateManyUserInput = {
    id?: string
    stationId: string
    bookingId?: string | null
    evId: string
    energyUsed: number
    cost: number
    duration: number
    createdAt?: Date | string
  }

  export type StationMasterDetailsCreateManyOwnerInput = {
    id?: string
    userId: string
    stationId: string
    shift: string
    experience?: number | null
    certification?: string | null
    createdAt?: Date | string
  }

  export type OTPUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OTPUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OTPUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EVUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    licensePlate?: StringFieldUpdateOperationsInput | string
    batteryCapacity?: FloatFieldUpdateOperationsInput | number
    batteryPercentage?: FloatFieldUpdateOperationsInput | number
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EVUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    licensePlate?: StringFieldUpdateOperationsInput | string
    batteryCapacity?: FloatFieldUpdateOperationsInput | number
    batteryPercentage?: FloatFieldUpdateOperationsInput | number
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EVUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    licensePlate?: StringFieldUpdateOperationsInput | string
    batteryCapacity?: FloatFieldUpdateOperationsInput | number
    batteryPercentage?: FloatFieldUpdateOperationsInput | number
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    evId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    station?: StationUpdateOneRequiredWithoutBookingsNestedInput
    transaction?: TransactionUpdateOneWithoutBookingNestedInput
    chargingHistory?: ChargingHistoryUpdateOneWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    stationId?: StringFieldUpdateOperationsInput | string
    evId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transaction?: TransactionUncheckedUpdateOneWithoutBookingNestedInput
    chargingHistory?: ChargingHistoryUncheckedUpdateOneWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    stationId?: StringFieldUpdateOperationsInput | string
    evId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StationUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerType?: EnumOwnerTypeFieldUpdateOperationsInput | $Enums.OwnerType
    address?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    totalSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stationMasters?: StationMasterDetailsUpdateManyWithoutStationNestedInput
    bookings?: BookingUpdateManyWithoutStationNestedInput
    chargingSlots?: ChargingSlotUpdateManyWithoutStationNestedInput
    reviews?: ReviewUpdateManyWithoutStationNestedInput
    chargingHistories?: ChargingHistoryUpdateManyWithoutStationNestedInput
  }

  export type StationUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerType?: EnumOwnerTypeFieldUpdateOperationsInput | $Enums.OwnerType
    address?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    totalSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stationMasters?: StationMasterDetailsUncheckedUpdateManyWithoutStationNestedInput
    bookings?: BookingUncheckedUpdateManyWithoutStationNestedInput
    chargingSlots?: ChargingSlotUncheckedUpdateManyWithoutStationNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutStationNestedInput
    chargingHistories?: ChargingHistoryUncheckedUpdateManyWithoutStationNestedInput
  }

  export type StationUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    ownerType?: EnumOwnerTypeFieldUpdateOperationsInput | $Enums.OwnerType
    address?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    totalSlots?: IntFieldUpdateOperationsInput | number
    availableSlots?: IntFieldUpdateOperationsInput | number
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    booking?: BookingUpdateOneWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    bookingId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    bookingId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    station?: StationUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    stationId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    stationId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChargingHistoryUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    evId?: StringFieldUpdateOperationsInput | string
    energyUsed?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    station?: StationUpdateOneRequiredWithoutChargingHistoriesNestedInput
    booking?: BookingUpdateOneWithoutChargingHistoryNestedInput
  }

  export type ChargingHistoryUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    stationId?: StringFieldUpdateOperationsInput | string
    bookingId?: NullableStringFieldUpdateOperationsInput | string | null
    evId?: StringFieldUpdateOperationsInput | string
    energyUsed?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChargingHistoryUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    stationId?: StringFieldUpdateOperationsInput | string
    bookingId?: NullableStringFieldUpdateOperationsInput | string | null
    evId?: StringFieldUpdateOperationsInput | string
    energyUsed?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StationMasterDetailsUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    shift?: StringFieldUpdateOperationsInput | string
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    certification?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStationMasterDetailsNestedInput
    station?: StationUpdateOneRequiredWithoutStationMastersNestedInput
  }

  export type StationMasterDetailsUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    stationId?: StringFieldUpdateOperationsInput | string
    shift?: StringFieldUpdateOperationsInput | string
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    certification?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StationMasterDetailsUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    stationId?: StringFieldUpdateOperationsInput | string
    shift?: StringFieldUpdateOperationsInput | string
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    certification?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StationMasterDetailsCreateManyStationInput = {
    id?: string
    userId: string
    ownerId: string
    shift: string
    experience?: number | null
    certification?: string | null
    createdAt?: Date | string
  }

  export type BookingCreateManyStationInput = {
    id?: string
    userId: string
    evId: string
    startTime: Date | string
    endTime: Date | string
    status?: $Enums.BookingStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChargingSlotCreateManyStationInput = {
    id?: string
    isOccupied?: boolean
    powerLevel: number
    type: $Enums.SlotType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReviewCreateManyStationInput = {
    id?: string
    userId: string
    rating?: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type ChargingHistoryCreateManyStationInput = {
    id?: string
    userId: string
    bookingId?: string | null
    evId: string
    energyUsed: number
    cost: number
    duration: number
    createdAt?: Date | string
  }

  export type StationMasterDetailsUpdateWithoutStationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shift?: StringFieldUpdateOperationsInput | string
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    certification?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStationMasterDetailsNestedInput
    owner?: UserUpdateOneRequiredWithoutStationMastersUnderMeNestedInput
  }

  export type StationMasterDetailsUncheckedUpdateWithoutStationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    shift?: StringFieldUpdateOperationsInput | string
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    certification?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StationMasterDetailsUncheckedUpdateManyWithoutStationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    shift?: StringFieldUpdateOperationsInput | string
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    certification?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingUpdateWithoutStationInput = {
    id?: StringFieldUpdateOperationsInput | string
    evId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBookingsNestedInput
    transaction?: TransactionUpdateOneWithoutBookingNestedInput
    chargingHistory?: ChargingHistoryUpdateOneWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateWithoutStationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    evId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transaction?: TransactionUncheckedUpdateOneWithoutBookingNestedInput
    chargingHistory?: ChargingHistoryUncheckedUpdateOneWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateManyWithoutStationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    evId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChargingSlotUpdateWithoutStationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isOccupied?: BoolFieldUpdateOperationsInput | boolean
    powerLevel?: IntFieldUpdateOperationsInput | number
    type?: EnumSlotTypeFieldUpdateOperationsInput | $Enums.SlotType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChargingSlotUncheckedUpdateWithoutStationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isOccupied?: BoolFieldUpdateOperationsInput | boolean
    powerLevel?: IntFieldUpdateOperationsInput | number
    type?: EnumSlotTypeFieldUpdateOperationsInput | $Enums.SlotType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChargingSlotUncheckedUpdateManyWithoutStationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isOccupied?: BoolFieldUpdateOperationsInput | boolean
    powerLevel?: IntFieldUpdateOperationsInput | number
    type?: EnumSlotTypeFieldUpdateOperationsInput | $Enums.SlotType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUpdateWithoutStationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutStationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyWithoutStationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChargingHistoryUpdateWithoutStationInput = {
    id?: StringFieldUpdateOperationsInput | string
    evId?: StringFieldUpdateOperationsInput | string
    energyUsed?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutChargingHistoriesNestedInput
    booking?: BookingUpdateOneWithoutChargingHistoryNestedInput
  }

  export type ChargingHistoryUncheckedUpdateWithoutStationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    bookingId?: NullableStringFieldUpdateOperationsInput | string | null
    evId?: StringFieldUpdateOperationsInput | string
    energyUsed?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChargingHistoryUncheckedUpdateManyWithoutStationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    bookingId?: NullableStringFieldUpdateOperationsInput | string | null
    evId?: StringFieldUpdateOperationsInput | string
    energyUsed?: FloatFieldUpdateOperationsInput | number
    cost?: FloatFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}